[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d iFridge"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103-F10-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103-F10-2/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* If you want to manage your food items without hassle, iFridge is the application made for you!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* This application is made for tech savvy individuals to manage the food in their fridge, control Wastage, and create Shopping Lists."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* This is a desktop application for managing Food in a Fridge. It has a GUI but most of the user interactions happen using a Command Line Interface."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* With reminders for food expiring soon and periodic feedback about the waste generated, iFridge will make sure you review and minimize waste."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* You can create template lists (list of items that you would like to have in your fridge at any time)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* And, with a single command, you can generate a shopping list of items that are in your template list but not yet there in the Fridge!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "* Some parts of this application were inspired by https://se-education.org by SE-EDU initiative."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "ManasVegi": 6,
      "kelvinnharris": 1,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "mainClassName \u003d \u0027seedu.ifridge.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    // https://mvnrepository.com/artifact/com.joestelmach/natty"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.13\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    // https://mvnrepository.com/artifact/org.jfree/jfreechart-fx"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    compile group: \u0027org.jfree\u0027, name: \u0027jfreechart-fx\u0027, version: \u00271.0.1\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    archiveName \u003d \u0027iFridge.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "zhangxuan97": 7,
      "-": 153
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "iFridge was developed by the https://AY1920S1-CS2103-F10-2.github.io/docs/Team.html[AY1920S1-CS2103-F10-2] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d CS2103-F10-2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Tie Ying Kathleen"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "image::teika97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "{empty}[http://github.com/teika97[github]] [\u003c\u003cteika97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "Role: Team Lead + Scheduling and tracking"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "Responsibilities: In charge of UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Kelvin Harris"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "image::kelvinnharris.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "{empty}[https://github.com/kelvinnharris[github]] [\u003c\u003ckelvinnharris#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "Responsibilities: In charge of Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Evelyne Juliet"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "image::evelynejuliet.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "{empty}[https://github.com/evelynejuliet[github] [\u003c\u003cevelynejuliet#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "Responsibilities: In charge of Commons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Zhang Xuan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "image::zhangxuan97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "{empty}[https://github.com/zhangxuan97[github]] [\u003c\u003czhangxuan97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "Responsibilities: In charge of Storage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Manas Vegi"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "image::manasvegi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "{empty}[https://github.com/ManasVegi[github]] [\u003c\u003cManasVegi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "Responsibilities: In charge of Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "teika97": 27,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "* *Email us* : You can also reach us at `https://github.com/AY1920S1-CS2103-F10-2`"
      }
    ],
    "authorContributionMap": {
      "teika97": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d iFridge - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d Waste Report Feature"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Under `WasteReportCommand#execute`, when iterating through the months from the starting month to"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "the ending month:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* We first retrieve the relevant `WasteList` for the month using `Model#getWasteListByMonth(WasteMonth)`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* Thereafter, we obtain a `WasteStatistic` object, which contains the weight, volume and quantity of food wasted"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "for the given month by calling `WasteList#getWasteStatistic`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* Collect the data by storing it in a `HashMap` indexed by the month (a `WasteMonth` object) with the corresponding"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "`WasteStatistic` as the value."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "The following sequence diagram shows how the waste report feature works:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "image::WasteReportSequenceDiagram.png[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "image::WasteReportSequenceDiagramRef.png[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "The following activity diagram shows what happens when the user enters a command to generate a waste report:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "image::WasteReportActivityDiagram.png[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "To see what constitutes a valid time frame, refer to our"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "https://ay1920s1-cs2103-f10-2.github.io/main/UserGuide.html#displaying-food-wastage-statistics-code-wlist-report-code[user guide]."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Possible Alternative Implementations"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* **Alternative 1**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Since the waste statistics for the previous months are unlikely to change, they can be stored externally and loaded"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "upon launch of the application, instead of calculating every time the waste report command is executed."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "** Pros: Will improve the runtime of the application."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "** Cons: Will take up more storage space."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d Use Grocery Feature"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "image::UseGrocerySequenceDiagram.png[]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Implementations"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Refer to sequence diagram above."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Subtracting the values"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* **Alternative 1 (current choice):** Create a new grocery item and replace it with the old one."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* **Alternative 2:** Modify the Amount in the grocery item."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "** Pros: Will be more efficient and use less memory."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "** Cons: We must ensure that the implementation is correct."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d GroceryList Feature"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d WasteList Feature"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Edit Template Item feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "teika97"
        },
        "content": "The edit template item mechanism is facilitated by `UniqueTemplateItems`, `TemplateList` and `TemplateToBeShown`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "teika97"
        },
        "content": "The `TemplateList` is an observable list of `UniqueTemplateItems` while the UniqueTemplateItems contains an observable list"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "teika97"
        },
        "content": "of template items. The `TemplateToBeShown` is a instance of the `UniqueTemplateItems` that is used to show the current template"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "teika97"
        },
        "content": "that is visible on the user interface."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teika97"
        },
        "content": "To edit the individual templates stored in the `TemplateList`, the command retrieves the template as well as the item to be edited."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "teika97"
        },
        "content": "Retrieving the existing item allows for retrieval of unchanged data field. The template item at the specified index will then be"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teika97"
        },
        "content": "overwritten with a new edited TemplateItem."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "teika97"
        },
        "content": "Similarly, the `UniqueTemplateItems` object at the specified index will also be overwritten by a new `UniqueTemplateItems`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teika97"
        },
        "content": "containing the edited template item with unchanged template items already transferred into the new `UniqueTemplateItems` object."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "teika97"
        },
        "content": "The model is updated with the new `TemplateList`, as well as the new `TemplateToBeShown`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "teika97"
        },
        "content": "The creation of new objects to override the previous is necessary as template items and templates are stored as immutable objects in the `UniqueTemplateItems`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "teika97"
        },
        "content": "and `TemplateList` respectively, and therefore cannot be edited directly."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `Model#getFilteredTemplateList()` -- Gets an unmodifiable template list."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `Model#setTemplate()` -- Replaces the previous template object with the new template object."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `Model#setShownTemplate()` -- Replaces the previous templateToBeShown with the new template so that the edited template is visible in the UI."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "teika97"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#getFilteredTemplateList()`, `Model#setTemplate()`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "teika97"
        },
        "content": "`Model#setShownTemplate()` and `Model#updateFilteredTemplateToBeShown()` respectively."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "teika97"
        },
        "content": "NOTE: When the user launches the application for the first time. The `TemplateToBeShown` will be initialized however it will not"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "teika97"
        },
        "content": "be visible until a templateItemCommand is executed. This can be done using an AddTemplateItemCommand, a DeleteTemplateItemCommand,"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "teika97"
        },
        "content": "a ListTemplateItemCommand, or an EditTemplateItemCommand."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "teika97"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command related to managing of template items:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "teika97"
        },
        "content": "image::TemplateItemCommandUIActivityDiagram.png[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "teika97"
        },
        "content": "The following sequence diagram shows how the edit template item operation works for the logic component:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "teika97"
        },
        "content": "image::EditTemplateItemSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "teika97"
        },
        "content": "Due to lack of space, please refer to the below list for args1, args2, args3, args4 shown in the diagram above."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "teika97"
        },
        "content": "* args1: \"tlist template edit 1 i/1 a/2units\""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "teika97"
        },
        "content": "* args2: \"template edit 1 i/1 a/2units\""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "teika97"
        },
        "content": "* args3: \"edit 1 i/1 a/2units\""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "teika97"
        },
        "content": "* args4: \"1 i/1 a/2units\""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "teika97"
        },
        "content": "NOTE: The lifeline for `TemplateListParser`, `TemplateItemParser`,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "teika97"
        },
        "content": "`EditTemplateItemCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "teika97"
        },
        "content": "The following sequence diagram shows how the edit template item operation works for the model component:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "teika97"
        },
        "content": "image::EditTemplateItemSequenceDiagram3.png[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "teika97"
        },
        "content": "NOTE: The lifeline for `TemplateListParser`, `TemplateItemParser`,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "teika97"
        },
        "content": "`EditTemplateItemCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "teika97"
        },
        "content": "Aspect: How edit command is parsed"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "teika97"
        },
        "content": "* Alternative 1 (current choice): Create a separate parser just for template item management"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "teika97"
        },
        "content": "    * Pros: Easy to implement. Parser structure follows the same structure as the model. More OOP."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "teika97"
        },
        "content": "    * Cons: May be confusing to differentiate between TemplateItemParser and TemplateListParser."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "teika97"
        },
        "content": "* Alternative 2: The TemplateListParser is able to distinguish between template and template item management"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "teika97"
        },
        "content": "    * Pros: Less confusing as there is only one parser managing the template list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "teika97"
        },
        "content": "    * Cons: Implementation of the commands becomes more complicated. Less OOP."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "teika97"
        },
        "content": "* Alternative 3: The TemplateItemParser is at the same hierarchy as the TemplateListParser instead of inside."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "teika97"
        },
        "content": "    * Pros: The user command can be shorter. E.g. \"template edit ...\" instead of \"tlist template edit ...\""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "teika97"
        },
        "content": "    * Cons: Not as obvious to the user that both commands involve the same template list."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "teika97"
        },
        "content": "The following sequence diagram shows how the edit template item operation works for the logic component:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "teika97"
        },
        "content": "* has a need to manage a significant number of groceries"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "teika97"
        },
        "content": "* has a tendency to forget to keep track of expiring items"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "teika97"
        },
        "content": "* interested in reducing their own food waste"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "teika97"
        },
        "content": "* wants an hassle-free way to shop for groceries"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teika97"
        },
        "content": "*Value proposition*: manage food inventory in order to reduce food waste"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "|`* * *` |organized user |add items to shopping list |decide the grocery items that I need to purchase later"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "|`* * *` |organized user |mark grocery items as bought and add their corresponding expiry and amount details|keep track of bought groceries"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "|`* * *` |lazy user |add all bought items to grocery list |update grocery to contain all the bought items"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "|`* * *` |meticulous user |display shopping list |view the items in shopping list (items yet to be bought before bought items)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "|`* *` |organized user |tag items (not yet bought) in shopping list as urgent |view the urgent items first when I display shopping list"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "|`* * *` |careless user |edit and delete items in shopping list |change details of or remove grocery items"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "|`*` |user |create pdf of shopping list |refer to the pdf while shopping"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|`* * *` |user |add \u003c\u003ctemplate,templates\u003e\u003e of grocery items |to keep track of what I want to have in my fridge"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "teika97"
        },
        "content": "|`* * *` |user |edit templates of grocery items |edit items and volumes based on my current needs and preferences"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "teika97"
        },
        "content": "|`* * *` |user |delete templates |maintain a short list of templates I regularly use"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "teika97"
        },
        "content": "|`* * *` |user |add multiple templates |use different templates depending on the occasion"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "teika97"
        },
        "content": "|`* * *` |user |generate a shopping list using my templates |save time on checking what is missing from my fridge"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|`* * *` |environmentally-conscious user |compare my \u003c\u003cfood-waste,food wastage statistics\u003e\u003e |better manage my food waste"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|`* * *` |environmentally-conscious user |get feedback on how I am performing on my food waste management |improve my food waste management"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|`* *` |environmentally-conscious user |see which kinds of food I most commonly waste |cut down on unnecessary food waste"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|`* * *` |forgetful user |see a list of my expired food items |retrieve and dispose of them"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "|`* * *` |user |add groceries |keep track of all the groceries bought"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "|`* * *` |user |see the expiry dates of my groceries |know when they expire."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "|`* * *` |user |update my grocery list |keep track of the amount of groceries I have"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "|`* *` |user |find a specific grocery |know more information about that grocery"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "|`* * *` |user |view all groceries |know what to buy more of"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "|`* * *` |user |remove a grocery |maintain only usable items in the fridge"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "|`* * *` |user |get reminders on expiring food items |prevent food wastage"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "|`* * *` |user |set default reminder settings |get reminders of expiring food within the specified number of days every time I launch the app"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "|`* * *` |user |sort food items |view grocery list with the specified sorting method"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "|`* * *` |user |set default sort settings |view grocery list with the specified sorting method every time I display the grocery list"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "|`* * *` |user |merge food items with same name and expiry date when viewing grocery list |view grocery list in a more organized manner"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "(For all use cases below, the *System* is the `iFridge` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Use case: Edit grocery item"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "1.  User requests to list grocery items"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "2.  iFridge shows the list of grocery items"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "3.  User requests to edit a specific grocery item\u0027s name/amount/expiry date"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "4.  iFridge performs the specified edit on the specified grocery item"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d Use case: Add food item"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "1.  User requests to list all food items"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "2.  iFridge shows a list of food items"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "3.  User requests to add an item to the list"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "4.  iFridge appends the item to the list"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* 3a. The given input is invalid"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "** 3a1. iFridge shows an error message."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "teika97"
        },
        "content": "+"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "teika97"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* 3b. The given amount is negative."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "+"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "** 3b1. iFridge shows an error message."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "+"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* 3c. The given expiry date is of invalid format"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "+"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "** 3c1. iFridge shows an error message."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d Use case: Removing a tag"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "1.  User requests to list all food items"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "2.  iFridge shows a list of food items"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "3.  User requests to remove a tag from a specific food item in the list"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "4.  iFridge removes the tag"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "** 3a1. iFridge shows an error message."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* 3b. The tag specified is non-existent."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "** 3b1. iFridge shows an error message."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "** Use case resumes at step 2."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Use case: Using food item"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "1.  User requests to list all food items"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "2.  iFridge shows a list of food items"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "3.  User requests to use a certain amount of a specific food item"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "4.  iFridge reduces the amount of the specific food item"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "+"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* 3a. The given amount is more than the amount of food registered in the list."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "+"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "** 3a1. iFridge shows an error message."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "* 3b. The given amount is exactly the same as amount of food registered in the list."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "** 3b1. iFridge removes the food item from the list."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "** 3a1. iFridge shows an error message."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Use case: Delete grocery item"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "teika97"
        },
        "content": "1.  User requests to list grocery items"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "teika97"
        },
        "content": "2.  GroceryList shows a list of grocery items"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "teika97"
        },
        "content": "3.  User requests to delete a specific grocery item in the list"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "teika97"
        },
        "content": "4.  GroceryList deletes the person"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "teika97"
        },
        "content": "** 3a1. GroceryList shows an error message."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "teika97"
        },
        "content": ".  Application should be used by a single user."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "teika97"
        },
        "content": ".  A user must be able to work with command-line interface."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "teika97"
        },
        "content": ".  Should be able to hold up to 1000 food items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "teika97"
        },
        "content": ".  Storage comprises of human editable file."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "teika97"
        },
        "content": ".  No database management systems used."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "teika97"
        },
        "content": ".  Application has object-oriented design."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "teika97"
        },
        "content": ".  Application is platform independent, portable and does not use a remote server or external software."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "teika97"
        },
        "content": ".  Application has easy to test features."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "[[grocery]] Grocery: Food items found in the fridge."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "[[food-waste]] Food Waste: Groceries that have expired and have not been fully consumed."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "[[template]] Template: A list of food items that the user regularly wants to keep in their fridge."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "[[shopping]] Shopping: Grocery items to be bought."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 18,
      "ManasVegi": 28,
      "teika97": 103,
      "zhangxuan97": 62,
      "kelvinnharris": 50,
      "-": 452
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d iFridge - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "-": 122
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d iFridge - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "-": 51
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d iFridge - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook Level 3 (AB3) is for those who *prefer to use a desktop app for managing contacts*. More importantly, AB3 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ".  Download the latest `iFridge.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* *`list`* : lists all food items in your grocery list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* **`add`**`add n/milk e/23/10/2019 a/1000 u/ml` : adds the food item `milk` to the iFridge application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/ITEM_NAME`, `ITEM_NAME` is a parameter which can be used as `add n/apple`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/apple t/fruit` or as `n/apple`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* Items with … after them can be used multiple times including zero times e.g. `[t/TAG]…` can be used as ` ` (i.e. 0 times), `t/fruit`, `t/fruit t/healthy` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/ITEM_NAME e/EXPIRY_DATE`, `e/EXPIRY_DATE n/ITEM_NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d\u003d\u003d System Management"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d\u003d\u003d\u003d Loading the file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Upon launching the app, existing lists will be automatically loaded into their respective lists."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Upon exiting the app, updated lists will be automatically saved."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d\u003d\u003d\u003d Checking reminders on expiry dates"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Display list with all food expiring within n days."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "`rem r/NUMBER_OF_DAYS`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Change default number of days which food is expiring in, to be displayed at the start of the app every time the app is launched."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "`remDefault r/NUMBER_OF_DAYS`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "* `rem r/3`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "* `remDefault r/3`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Upon launching the app, list of food expiring within (default; 3 days if not yet specified) is displayed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d\u003d\u003d\u003d Sort settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Supports sorting of list displayed by alphabetical order first, or expiry date first."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "`sort by/TYPE` - displays list with the specified sorting method first."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "`sortDefault by/TYPE` - change default sorting method when list method is called every time the app is launched."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "* `sort by/alphabetical`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "* `sortDefault by/expiry`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "For food with the same name, it will be automatically sorted by their expiry dates."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "For food with the same expiry dates, it will be automatically sorted by their alphabetical order."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "For same name *and* same expiry dates, it will be displayed based on the order they are added into the grocery list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d\u003d\u003d\u003d Display settings"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Supports list display in merged or unmerged form."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "`list d/TYPE` - display grocery list of food objects, where food objects with the same name and expiry dates are merged or not."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "`listDefault d/TYPE` - change default display method when list method is called every time the app is launched."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "* `list d/merge`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "* `listDefault d/unmerge`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003d\u003d\u003d\u003d Waste list clearing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Clearing of waste list is done automatically at the start of every month."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d Grocery List Management"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a food item: `glist add`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Adds a grocery item to the grocery list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Format: `glist add n/ITEM_NAME e/EXPIRY_DATE a/AMOUNT [t/TAG]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `e/EXPIRY_DATE` must follow the format `dd.MM.yyyy` or `dd/MM/yyyy` or `dd-MM-yyyy`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `a/AMOUNT` must have a magnitude i.e. measurable quantity. Amount unit is not mandatory. Magnitude and unit can be separated by a space."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* There may be more than one tag field."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* The input fields can be in any order."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist add n/Fuji apples e/30.10.2019 t/healthy a/10units` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Add Fuji apples of quantity 10 units, tagged as \"healthy\" and expiring on 30 October 2019."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist add n/salad a/3 e/25.09.2019` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Add salad of quantity 3, untagged and expiring on 25 September 2019."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist add n/tea a/200 ml e/18.10.2019 t/fresh t/drink` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Add tea of quantity 200 ml, tagged as \"fresh\" and \"drink\" and expiring on 18 October 2019."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all grocery items: `glist list`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Shows a list of grocery items in the grocery list. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Format: `glist list`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a grocery item: `glist delete`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Deletes the specified grocery item from the grocery list when it is done being used."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "If the amount of the food item left \u003e 0, the item will be moved to the waste list. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Format: `glist delete INDEX`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Use a grocery item: `glist use`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Reduces the amount left of a grocery item by the specified amount. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Format: `glist use INDEX a/AMOUNT`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* The system only recognises metric units. e.g. kilogram, liter. The system does not support unrecognised units such as tablespoon (not precise), and pint (not a metric unit)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Metric units with different metric prefixes is allowed. e.g. gram, milliliter."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Whitespace between magnitude and unit is allowed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist use 2 a/300g` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Reduces the amount of 2nd item by 300 grams."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist use 3 a/5 L` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Reduces the amount of 3rd item by 5 liters."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a grocery item: `glist edit`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Edits an existing item in the grocery list. +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Format: `glist edit INDEX [n/ITEM_NAME] [e/EXPIRY_DATE] [t/TAG]`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "****"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Edits an item at the specified `INDEX`. The index refers to the number shown in the displayed list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* At least one of the optional field must be provided."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Amount cannot be edited, but can only be modified through `use`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Existing values will be updated to input values."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* When editing tags, the existing tags of the item will be removed. i.e. adding of tags is not cumulative."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* You can remove all the item\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "****"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist edit 1 n/Fuji apple t/healthy` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Edits the name and tag of the 1st item to be `Fuji apple` and `healthy` respectively."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist edit 2 n/Olive oil t/` +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Edits the name of the 2nd item to `Olive oil` and clears all existing tags."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Sort the grocery list: `glist sort` (Coming in v2.0)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Sorts the grocery list based on the type of sorting. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Format: `glist sort by/TYPE`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "The type of sorting supported is as follows:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "****"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Alphabetical: Sort the grocery list in alphabetical order"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Expiry date: Sort the grocery list based on the expiry date"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist sort by/alphabetical`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist sort by/expiry`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Filter: `glist filter` (Coming in v2.0)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Returns a list of food items that matches the specified tag. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Format: `glist filter t/TAG`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003d\u003d\u003d\u003d Locating items by name: `glist find` (Coming in v2.0)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Finds items whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Format: `glist find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* The search is case insensitive. e.g `apple` will match `Apple`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* The order of the keywords does not matter. e.g. `apple milk` will match `milk apple`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Only the item name is searched."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Only full words will be matched e.g. `appl` will not match `apple`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `apple milk` will return `Apple juice`, `Mango milk`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist find apple` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Returns `Fuji apple` and `Apple loaf cake`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "* `glist find milo doughnut roasted` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Returns any grocery item which contains any of the names `milo`, `doughnut`, or `roasted`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d Waste List Management"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Moving an item into waste list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "When you delete an item from your grocery list using `delete`, the item will automatically be"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "moved into the waste list if it has not been fully used (the amount of food remaining \u003e 0)."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Moving all expired food items from grocery list to waste list"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "By default, every time the application is launched, Food Orchestra helps you check which items"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "are expired and automatically moves them into the waste list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the waste list: `wlist list`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Shows a list of the food items which have been wasted +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Format: `wlist list [m/MONTH_OF_YEAR]` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "****"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* If a particular month is specified, the food waste of the particular month will be displayed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Otherwise, the food waste of the current month is displayed."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* The `MONTH_OF_YEAR` permits formats allowable by the Natty library. This includes both relative months"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "and the exact month. We recommend specifying the format in the style of `MMM yyyy`, e.g. `sep 2019`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "****"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* `wlist`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* `wlist m/sep 2019`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Displaying food wastage statistics: `wlist report`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Shows a charted report detailing your food wastage statistics across a time frame."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Format: `wlist report [sm/START_MONTH] [em/END_MONTH]`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "****"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* The report will display 3 charts: kg, litres and units of food wasted per month across the"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "time frame."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"^2,^2,10\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|Start Month |End Month |Result"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|\u0026#10003; |\u0026#10003; |The start and end month would follow that specified by the user."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|\u0026#10003; |\u0026#10007; |The start month follows that specified by the user, and the end month"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "will by one year from the start month or the current month, whichever is earlier."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|\u0026#10007; |\u0026#10003; |The end month follows that specified by the user, and the start month"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "will be one year before the end month of the earliest month found in your waste archive,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "whichever is later."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|\u0026#10007; |\u0026#10007; |The end month would be the current month, and the start month would be"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "one year ago or the earliest month found in your waste archive, whichever is later."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* If you wish to specify both the start and end dates, please ensure that they are at least one"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "month apart."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* The dates can be specified in any format permissible by the Natty library. If you only wish to"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "see your waste report starting 5 months ago, you can consider the command `wlist report sm/5 months ago`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "****"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* `wlist report sm/Mar 2019`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* `wlist report sm/Mar 2019 em/Oct 2019`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "The allowable date formats can be found in the Natty library documentation."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Obtain feedback based on current food wastage: `wlist feedback`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Format: `wlist feedback`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "****"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Shows the current month’s wastage statistics:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* How many kg, litres, and units wasted so far"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* Predicted wastage for the month"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "* Feedback on how user is managing food waste compared to the average food waste management across the past year"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "****"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Our prediction algorithm: +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "We first interpolate your current month\u0027s waste statistics to arrive at an estimate. Following which,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "we take a weighted average of your waste statistics across the past couple of months to provide you with"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "a more reliable prediction."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "As with any other application, our prediction algorithm will be more accurate with more frequent usage."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d View most commonly wasted food items: `wlist food`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Format: `wlist food`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Generates a word cloud based on user\u0027s most commonly wasted food."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Templates List Management"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Add new template: \u0027tlist add\u0027"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "teika97"
        },
        "content": "Adds a new template into template list. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: \u0027tlist add n/TEMPLATENAME\u0027"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teika97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist add n/Weekly Necessities`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist add n/Birthday Party Prep`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist add n/Beef Goulash`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d\u003d Edit template name: `tlist edit`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teika97"
        },
        "content": "Updates name of specified template in template list. +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: `tlist edit INDEX n/TEMPLATENAME`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teika97"
        },
        "content": "****"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teika97"
        },
        "content": "* Edits the template at the specified `INDEX`. The index refers to the index number shown in the displayed template list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "teika97"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "teika97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist edit 1 n/Daily Necessities`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "teika97"
        },
        "content": "Edits the name of the 1st template in the template list to `Daily Necessities`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a template: `tlist delete`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "teika97"
        },
        "content": "Deletes a specified template from the template list. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: `tlist delete INDEX`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "teika97"
        },
        "content": "****"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "teika97"
        },
        "content": "* Deletes the template at the specified `INDEX`. The index refers to the index number shown in the displayed template list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "teika97"
        },
        "content": "****"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "teika97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist delete 1`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "teika97"
        },
        "content": "Deletes the 1st template in the template list"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Clear template list: `tlist clear`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "teika97"
        },
        "content": "Clears all template entries from the template list. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: `tlist clear`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d\u003d Show list of all templates: `tlist list`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "teika97"
        },
        "content": "Shows all entries in the template list +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: `tlist list`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d Template Management"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d\u003d Add new grocery item: `tlist template`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "teika97"
        },
        "content": "Adds an item into a specified template. +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: `tlist template add TEMPLATEINDEX [n/NAME] [a/AMOUNT]`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "teika97"
        },
        "content": "****"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "teika97"
        },
        "content": "* Adds item into the template under the specified `INDEX` as shown in the displayed template list."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "teika97"
        },
        "content": "****"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "teika97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist template add 1 n/Milk a/1L`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist template add 2 n/Eggs a/12units`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d\u003d Edit item name: `tlist template edit`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "teika97"
        },
        "content": "Edits a specified item in the specified template `TEMPLATENAME`. +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: `tlist n/TEMPLATENAME edit INDEX [f/FOODITEM] [a/AMOUNT]`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "teika97"
        },
        "content": "****"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "teika97"
        },
        "content": "* Edits the food item at the specified `INDEX`. The index refers to the index number shown in the displayed template. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "teika97"
        },
        "content": "* Units in the amount field must match that of the item specified"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist template edit 1 i/1 n/Low-Fat Milk`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "teika97"
        },
        "content": "Edits the name of the first food item in the first template to  `Low-Fat Milk`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist template edit 1 i/1 a/2l`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "teika97"
        },
        "content": "Edits the amount of the first food item in the first template to 2 litres."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d\u003d Delete food item: `tlist template delete`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "teika97"
        },
        "content": "Deletes the specified item from the specified template. +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: `tlist template delete TEMPLATEINDEX i/ITEMINDEX`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "teika97"
        },
        "content": "* Deletes the food item at the specified `INDEX`. The index refers to the index number shown in the displayed template. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist template delete 1`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "teika97"
        },
        "content": "Deletes the first food item in the first template"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003d\u003d\u003d\u003d Shows template: `tlist template list`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "teika97"
        },
        "content": "Shows all entries in the specified template. +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: `tlist template list TEMPLATEINDEX`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "teika97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `tlist template list 1`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "teika97"
        },
        "content": "Shows all entries in the first template"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d Shopping List Management"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d Add new item to shopping list: \u0027slist add\u0027"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Adds a new item to the shopping list. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Format: \u0027slist add f/FOOD_ITEM a/AMOUNT\u0027"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* `slist add n/apple a/2`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* `slist add n/milk a/1l`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* `slist add n/banana a/3`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d Edit item in shopping list: \u0027slist edit\u0027"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Edits the name of a specified item in a shopping list. +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Format: \u0027slist edit INDEX [f/FOODNAME] [a/AMOUNT]\u0027"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "****"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* Edits the food item at the specified `INDEX`. The index refers to the index number shown in the shopping list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* Units in the amount field must match that of the item specified"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* `slist edit 3 f/pomegranate`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Edits the name of the third food item in the shopping list to  `pomegranate`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* `slist edit 2 a/2l`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Edits the amount of the second food item in the shopping list to 2 litres."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d Delete item in shopping list: \u0027slist delete\u0027"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Delete specified item from shopping list. +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Format: \u0027slist delete INDEX\u0027"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* Deletes the food item at the specified `INDEX`. The index refers to the index number shown in the shopping list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* `slist delete 1`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Deletes the first food item in the shopping list."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d Show shopping list: \u0027slist\u0027"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Lists out all items in the shopping list with bought items first"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Format: `slist`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* `slist`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Shows all entries in the shopping list."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d Mark item as ‘bought’: \u0027slist bought\u0027"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Marks an item as bought and assigns the expiry date and amount to that item"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "There is flexibility in the amount of items that are bought. You can indicate more or less number of items bought than the number indicated in the shopping list."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Format: `slist bought INDEX e/EXPIRYDATE a/AMOUNT`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* `slist bought 1 e/3 Dec 2019 a/3`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Marks the item at index 1 as bought and sets its expiry date as 3rd December, 2019 and amount as 3."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* `slist bought 2 e/3 Nov 2019 a/2l`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Marks the item at index 2 as bought and sets its expiry date as 3rd November, 2019 and amount as 2 litres."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d Add bought items: \u0027slist merge bought\u0027"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Adds all items marked as ‘bought’ to the grocery list."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Format: `slist merge bought`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* Adds all the items marked as bought in shopping list into the grocery list."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* If the item with same expiry date is already present in the shopping list, just add the amount to the amount already present in the grocery list."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `slist merge bought`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "teika97"
        },
        "content": "Merges all the items in shopping list marked as bought into the grocery list."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003d\u003d\u003d\u003d Generate shopping list: `slist addAll`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "teika97"
        },
        "content": "Generates a shopping list from all missing grocery items in the template."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "teika97"
        },
        "content": "Format: `slist addAll [l/TEMPLATENAME] ...`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "teika97"
        },
        "content": "****"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "teika97"
        },
        "content": "* At least one template name must be provided."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "teika97"
        },
        "content": "* In the case of multiple template lists, the amount of duplicate items will be summed up."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "teika97"
        },
        "content": "* In the case of the shopping list already containing food items, the amount of duplicate items will be summed up."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "teika97"
        },
        "content": "* `slist addAll l/Weekly Necessities l/Birthday Cake`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "teika97"
        },
        "content": "All entries from the templates `Weekly Necessities` and `Birthday Cake` will be added into the shopping list."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "iFridge data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* *Add* `slist add f/FOOD_ITEM a/AMOUNT`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* *Delete* : `slist delete INDEX`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* *Edit* : `slist edit INDEX [f/FOOD_ITEM] [a/AMOUNT]`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* *Merge* : `slist merge bought`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "* *Bought* : `slist bought INDEX [e/EXPIRY_DATE] [a/AMOUNT]`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 52,
      "ManasVegi": 47,
      "teika97": 105,
      "zhangxuan97": 108,
      "kelvinnharris": 112,
      "-": 118
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(groceryList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/EditTemplateItemSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teika97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":iFridgeParser\" as iFridgeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":TemplateListParser\" as TemplateListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":TemplateItemParser\" as TemplateItemParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":EditTemplateItemCommandParser\" as EditTemplateItemCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \"e:EditTemplateItemCommand\" as EditTemplateItemCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "[-\u003e LogicManager : execute(\"tlist template edit 1 i/1 a/2units \")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "LogicManager -\u003e iFridgeParser : parseCommand(\"tlist template edit 1 i/1 a/2units\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate iFridgeParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "create TemplateListParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "iFridgeParser -\u003e TemplateListParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate TemplateListParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser --\u003e iFridgeParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate TemplateListParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "iFridgeParser -\u003e TemplateListParser : parseCommand(\"template edit 1 i/1 a/2units\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate TemplateListParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "create TemplateItemParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser -\u003e TemplateItemParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate TemplateItemParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser --\u003e TemplateListParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate TemplateItemParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser -\u003e TemplateItemParser : parse(\"edit 1 i/1 a/2units\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate TemplateItemParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "create EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser -\u003e EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommandParser --\u003e TemplateItemParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser -\u003e EditTemplateItemCommandParser : parse(\"1 i/1 a/2units\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "create EditTemplateItemCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommandParser -\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate EditTemplateItemCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand --\u003e EditTemplateItemCommandParser : e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate EditTemplateItemCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommandParser --\u003e TemplateItemParser : e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommandParser -[hidden]-\u003e TemplateItemParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser --\u003e TemplateListParser : e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate TemplateItemParser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser -[hidden]-\u003e TemplateListParser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy TemplateItemParser"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser --\u003e iFridgeParser : e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate TemplateListParser"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser -[hidden]-\u003e iFridgeParser"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy TemplateListParser"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "iFridgeParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate iFridgeParser"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "LogicManager -\u003e EditTemplateItemCommand : execute()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate EditTemplateItemCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e Model: setShownTemplate(templateToEdit)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "Model -\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "CommandResult --\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate EditTemplateItemCommand"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "teika97": 103
    }
  },
  {
    "path": "docs/diagrams/EditTemplateItemSequenceDiagram2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teika97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":iFridgeParser\" as iFridgeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":TemplateListParser\" as TemplateListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":TemplateItemParser\" as TemplateItemParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":EditTemplateItemCommandParser\" as EditTemplateItemCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \"e:EditTemplateItemCommand\" as EditTemplateItemCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "[-\u003e LogicManager : execute(args1)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "LogicManager -\u003e iFridgeParser : parseCommand(args1)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate iFridgeParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "create TemplateListParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "iFridgeParser -\u003e TemplateListParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate TemplateListParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser --\u003e iFridgeParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate TemplateListParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "iFridgeParser -\u003e TemplateListParser : parseCommand(args2)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate TemplateListParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "create TemplateItemParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser -\u003e TemplateItemParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate TemplateItemParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser --\u003e TemplateListParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate TemplateItemParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser -\u003e TemplateItemParser : parse(args3)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate TemplateItemParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "create EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser -\u003e EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommandParser --\u003e TemplateItemParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser -\u003e EditTemplateItemCommandParser : parse(args4)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "create EditTemplateItemCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommandParser -\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate EditTemplateItemCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand --\u003e EditTemplateItemCommandParser : e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate EditTemplateItemCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommandParser --\u003e TemplateItemParser : e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommandParser -[hidden]-\u003e TemplateItemParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy EditTemplateItemCommandParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser --\u003e TemplateListParser : e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate TemplateItemParser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateItemParser -[hidden]-\u003e TemplateListParser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy TemplateItemParser"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser --\u003e iFridgeParser : e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate TemplateListParser"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "TemplateListParser -[hidden]-\u003e iFridgeParser"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy TemplateListParser"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "iFridgeParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate iFridgeParser"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "LogicManager -\u003e EditTemplateItemCommand : execute()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate EditTemplateItemCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "ref over EditTemplateItemCommand, Model : Retrieve and edit specified template, template items and update templateList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e Model: setTemplate(templateToEdit, EditedTemplate)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "Model --\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e Model: setShownTemplate(editedTemplate)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "Model --\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "CommandResult --\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate EditTemplateItemCommand"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "teika97": 111
    }
  },
  {
    "path": "docs/diagrams/EditTemplateItemSequenceDiagram3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teika97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "group sd : Retrieve and edit specified template, template items and update templateList"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":EditTemplateItemCommand\" as EditTemplateItemCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \"tToEdit:UniqueTemplateItems\" as tToEdit MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \"editedT:UniqueTemplateItems\" as editedT MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \"itemToEdit:TemplateItem\" as itemToEdit MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "participant \"editedItem:TemplateItem\" as editedItem MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "[-\u003e EditTemplateItemCommand : execute()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate EditTemplateItemCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e Model : getFilteredTemplateList()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "Model -\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "create tToEdit"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e tToEdit : get(1)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate tToEdit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "tToEdit --\u003e EditTemplateItemCommand : tToEdit"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate tToEdit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "create editedT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e editedT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate editedT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "editedT --\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate editedT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "create itemToEdit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e itemToEdit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate itemToEdit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "itemToEdit --\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate itemToEdit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e tToEdit : get(1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate tToEdit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "tToEdit --\u003e EditTemplateItemCommand: itemToEdit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate tToEdit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "create editedItem"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e editedItem"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate editedItem"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "editedItem --\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate editedItem"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e editedT: setTemplateItem(itemToEdit, editedItem)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate editedT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "editedT --\u003e EditTemplateItemCommand: editedT"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate editedT"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e Model: setTemplate(tToEdit, editedT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "Model --\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "EditTemplateItemCommand -\u003e Model: setShownTemplate(t)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "Model --\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "[\u003c--EditTemplateItemCommand: result"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "deactivate EditTemplateItemCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "tToEdit -[hidden]-\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy tToEdit"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "editedT -[hidden]-\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy editedT"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "itemToEdit -[hidden]-\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy itemToEdit"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "editedItem -[hidden]-\u003e EditTemplateItemCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "destroy editedItem"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "end"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "teika97": 93
    }
  },
  {
    "path": "docs/diagrams/RemDefault.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "participant \":IFridgeParser\" as IFridgeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "participant \":GroceryListParser\" as GroceryListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "participant \":ReminderDefaultCommandParser\" as ReminderDefaultCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "participant \"d:ReminderDefaultCommand\" as ReminderDefaultCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "participant \":UserPrefs\" as UserPrefs MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "LogicManager -\u003e IFridgeParser : parseCommand(\"glist remDefault r/3\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate IFridgeParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "IFridgeParser -\u003e GroceryListParser : parseCommand(\"remDefault r/3\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate GroceryListParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "create ReminderDefaultCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "GroceryListParser -\u003e ReminderDefaultCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate ReminderDefaultCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "ReminderDefaultCommandParser --\u003e GroceryListParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate ReminderDefaultCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "GroceryListParser -\u003e ReminderDefaultCommandParser : parse(\"3\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate ReminderDefaultCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "create ReminderDefaultCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "ReminderDefaultCommandParser -\u003e ReminderDefaultCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate ReminderDefaultCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "ReminderDefaultCommand --\u003e ReminderDefaultCommandParser : d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate ReminderDefaultCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "ReminderDefaultCommandParser --\u003e GroceryListParser : d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate ReminderDefaultCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "ReminderDefaultCommandParser -[hidden]-\u003e GroceryListParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "destroy ReminderDefaultCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "GroceryListParser --\u003e IFridgeParser : d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate GroceryListParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "IFridgeParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate IFridgeParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "LogicManager -\u003e ReminderDefaultCommand : execute()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate ReminderDefaultCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "ReminderDefaultCommand -\u003e Model : setIFridgeSettings(iFridgeSettings)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Model -\u003e UserPrefs : setIFridgeSettings(iFridgeSettings)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate UserPrefs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "UserPrefs --\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate UserPrefs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "Model --\u003e ReminderDefaultCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "ReminderDefaultCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "CommandResult --\u003e ReminderDefaultCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "ReminderDefaultCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate ReminderDefaultCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 83
    }
  },
  {
    "path": "docs/diagrams/TemplateItemCommandUIActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teika97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "if () then ([command involves templateItem])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "    :Retrieve specified template from template list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "    if () then ([list command])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if () then ([edit command])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "            :Retrieve specified template"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "            item from template;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "            :Override template item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "        else([delete or add command])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "            :Add or delete template item"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "            into/from template respectively;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "        :Override template with updated version;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        :Update template list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    :Update template to be shown in the user interface;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "stop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "teika97": 27
    }
  },
  {
    "path": "docs/diagrams/UseGrocerySequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "participant \":IFridgeParser\" as IFridgeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "participant \":GroceryListParser\" as GroceryListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "participant \":UseGroceryCommandParser\" as UseGroceryCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "participant \"u:UseGroceryCommand\" as UseGroceryCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "[-\u003e LogicManager : execute(\"glist use 1 a/100g\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "LogicManager -\u003e IFridgeParser : parseCommand(\"glist use 1 a/100g\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "activate IFridgeParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "IFridgeParser -\u003e GroceryListParser : parseCommand(\"use 1 a/100g\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "activate GroceryListParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "create UseGroceryCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "IFridgeParser -\u003e UseGroceryCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "activate UseGroceryCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "UseGroceryCommandParser --\u003e GroceryListParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "deactivate UseGroceryCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "GroceryListParser -\u003e UseGroceryCommandParser: parse(\"1 a/100g\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "activate UseGroceryCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "create UseGroceryCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "UseGroceryCommandParser -\u003e UseGroceryCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "activate UseGroceryCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "UseGroceryCommand --\u003e UseGroceryCommandParser: u"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "deactivate UseGroceryCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "UseGroceryCommandParser --\u003e GroceryListParser: u"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "deactivate UseGroceryCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "UseGroceryCommandParser -[hidden]-\u003e GroceryListParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "destroy UseGroceryCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "GroceryListParser --\u003e IFridgeParser: u"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "deactivate GroceryListParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "GroceryListParser -[hidden]-\u003e IFridgeParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "destroy GroceryListParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "IFridgeParser --\u003e LogicManager: u"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "deactivate IFridgeParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "LogicManager -\u003e UseGroceryCommand: execute()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "activate UseGroceryCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "UseGroceryCommand -\u003e Model: setGroceryItem(toBeUsed, used)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Model --\u003e UseGroceryCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "UseGroceryCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "CommandResult --\u003e UseGroceryCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "UseGroceryCommand --\u003e LogicManager: result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "deactivate UseGroceryCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 77
    }
  },
  {
    "path": "docs/diagrams/WasteReportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "skinparam maxMessageSize 130"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \":iFridgeParser\" as iFridgeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \":WasteListParser\" as WasteListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \":ReportWasteCommandParser\" as ReportWasteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \"rwc:ReportWasteCommand\" as ReportWasteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \"wr:WasteReport\" as WasteReport MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "[-\u003e LogicManager : execute(\"wlist report sm/Jan 2019 em/Oct 2019\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "LogicManager -\u003e iFridgeParser : parseCommand(\"wlist report sm/Jan 2019 em/Oct 2019\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate iFridgeParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "create WasteListParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "iFridgeParser -\u003e WasteListParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate WasteListParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "WasteListParser --\u003e iFridgeParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate WasteListParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "iFridgeParser -\u003e WasteListParser : parseCommand(\"report sm/Jan 2019 em/Oct 2019\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate WasteListParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "create ReportWasteCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "WasteListParser -\u003e ReportWasteCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate ReportWasteCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ReportWasteCommandParser --\u003e WasteListParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate ReportWasteCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "WasteListParser -\u003e ReportWasteCommandParser: parse(\" sm/Jan 2019 em/Oct 2019\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate ReportWasteCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "create ReportWasteCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ReportWasteCommandParser -\u003e ReportWasteCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate ReportWasteCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ReportWasteCommand --\u003e ReportWasteCommandParser: rwc"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate ReportWasteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ReportWasteCommandParser --\u003e WasteListParser: rwc"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate ReportWasteCommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "WasteListParser --\u003e iFridgeParser: rwc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate WasteListParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "iFridgeParser --\u003e LogicManager: rwc"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate iFridgeParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "LogicManager -\u003e ReportWasteCommand: execute()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate ReportWasteCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ref over ReportWasteCommand: Generating Waste Report"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "create WasteReport"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ReportWasteCommand -\u003e WasteReport"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate WasteReport"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "WasteReport --\u003e ReportWasteCommand: wr"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate WasteReport"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ReportWasteCommand -\u003e Model: setWasteReport(wr)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "Model --\u003e ReportWasteCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ReportWasteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "CommandResult --\u003e ReportWasteCommand: result"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ReportWasteCommand --\u003e LogicManager: result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate ReportWasteCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 90
    }
  },
  {
    "path": "docs/diagrams/WasteReportSequenceDiagramRef.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "skinparam maxMessageSize 200"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "group sd"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \"rwc:ReportWasteCommand\" as ReportWasteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \"data:HashMap\" as HashMap MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \"wastelist:WasteList\" as WasteList MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "participant \"ws:WasteStatistic\" as WasteStatistic MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "create HashMap"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "ReportWasteCommand -\u003e HashMap"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "activate HashMap"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "HashMap --\u003e ReportWasteCommand: data"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "deactivate HashMap"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "loop month before ending month"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ReportWasteCommand -\u003e Model: getWasteListByMonth(month)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Model --\u003e ReportWasteCommand: wastelist"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ReportWasteCommand -\u003e WasteList: getWasteStatistic()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    activate WasteList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    create WasteStatistic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    WasteList -\u003e WasteStatistic"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    activate WasteStatistic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    WasteStatistic --\u003e WasteList: ws"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    deactivate WasteStatistic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    WasteList --\u003e ReportWasteCommand: ws"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    deactivate WasteList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ReportWasteCommand -\u003e HashMap: put(month, ws)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    activate HashMap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    HashMap --\u003e ReportWasteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    deactivate HashMap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "end"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 57
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CRoboto:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Roboto\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Roboto\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 404
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 422
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ShoppingList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.GroceryListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.JsonGroceryListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.JsonTemplateListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.TemplateListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.BoughtListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.JsonBoughtItemStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.JsonShoppingItemStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.ShoppingListStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.wastelist.JsonWasteListStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.wastelist.WasteListStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.ui.Ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.ui.UiManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing GroceryList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryListStorage groceryListStorage \u003d new JsonGroceryListStorage(userPrefs.getGroceryListFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateListStorage templateListStorage \u003d new JsonTemplateListStorage(userPrefs.getTemplateListFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteListStorage wasteListStorage \u003d new JsonWasteListStorage(userPrefs.getWasteArchiveFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingListStorage shoppingListStorage \u003d new JsonShoppingItemStorage(userPrefs.getShoppingListFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        BoughtListStorage boughtListStorage \u003d new JsonBoughtItemStorage(userPrefs.getBoughtListFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        storage \u003d new StorageManager(groceryListStorage, userPrefsStorage, templateListStorage, wasteListStorage,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                shoppingListStorage, boughtListStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Optional\u003cReadOnlyGroceryList\u003e groceryListOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Optional\u003cReadOnlyTemplateList\u003e templateListOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Optional\u003cReadOnlyShoppingList\u003e shoppingListOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Optional\u003cReadOnlyGroceryList\u003e boughtListOptional;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ReadOnlyGroceryList initialGroceryListData;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ReadOnlyTemplateList initialTemplateListData;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TreeMap\u003cWasteMonth, WasteList\u003e initialWasteArchiveData;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ReadOnlyShoppingList initialShoppingListData;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ReadOnlyGroceryList initialBoughtListData;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            groceryListOptional \u003d storage.readGroceryList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": "            templateListOptional \u003d storage.readTemplateList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            shoppingListOptional \u003d storage.readShoppingList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            boughtListOptional \u003d storage.readBoughtList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (!groceryListOptional.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample GroceryList\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "            if (!templateListOptional.isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TemplateList\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (!shoppingListOptional.isPresent()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ShoppingList\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (!boughtListOptional.isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Bought List.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            initialGroceryListData \u003d groceryListOptional.orElseGet(SampleDataUtil::getSampleGroceryList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": "            initialTemplateListData \u003d templateListOptional.orElseGet(SampleDataUtil::getSampleTemplateList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            initialShoppingListData \u003d shoppingListOptional.orElseGet(SampleDataUtil::getSampleShoppingList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            initialBoughtListData \u003d boughtListOptional.orElseGet(SampleDataUtil::getSampleBoughtList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty GroceryList\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            initialGroceryListData \u003d new GroceryList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": "            initialTemplateListData \u003d new TemplateList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            initialShoppingListData \u003d new ShoppingList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            initialBoughtListData \u003d new GroceryList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GroceryList\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            initialGroceryListData \u003d new GroceryList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "            initialTemplateListData \u003d new TemplateList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            initialShoppingListData \u003d new ShoppingList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            initialBoughtListData \u003d new GroceryList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        initialWasteArchiveData \u003d initModelManagerWaste(storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new ModelManager(initialGroceryListData, userPrefs, initialTemplateListData, initialWasteArchiveData,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                initialShoppingListData, initialBoughtListData);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns the initial waste list archive."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private TreeMap\u003cWasteMonth, WasteList\u003e initModelManagerWaste(Storage storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Optional\u003cTreeMap\u003cWasteMonth, WasteList\u003e\u003e wasteListOptional;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TreeMap\u003cWasteMonth, WasteList\u003e initialWasteArchiveData;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteList.initialiseWasteArchive();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            wasteListOptional \u003d storage.readWasteList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            if (!wasteListOptional.isPresent()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample WasteList\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            initialWasteArchiveData \u003d wasteListOptional.orElseGet(SampleDataUtil::getSampleWasteArchive);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty WasteList\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            initialWasteArchiveData \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WasteList\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            initialWasteArchiveData \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return initialWasteArchiveData;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GroceryList\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        logger.info(\"Starting GroceryList \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Grocery List ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 39,
      "teika97": 10,
      "zhangxuan97": 77,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/core/IFridgeSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * A Serializable class that contains the iFridge settings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class IFridgeSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static final String DEFAULT_NUMBER_OF_DAYS \u003d \"3\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static final String DEFAULT_SORT_METHOD \u003d \"alphabetical\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static final String DEFAULT_LIST_DISPLAY \u003d \"merge\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private final String numberOfDays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private final String sortMethod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private final String listDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public IFridgeSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        numberOfDays \u003d DEFAULT_NUMBER_OF_DAYS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        sortMethod \u003d DEFAULT_SORT_METHOD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        listDisplay \u003d DEFAULT_LIST_DISPLAY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public IFridgeSettings(String numberOfDays, String sortMethod, String listDisplay) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.numberOfDays \u003d numberOfDays;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.sortMethod \u003d sortMethod;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.listDisplay \u003d listDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public String getNumberOfDays() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return numberOfDays;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public String getSortMethod() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return sortMethod;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public String getListDisplay() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return listDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!(other instanceof IFridgeSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        IFridgeSettings o \u003d (IFridgeSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return Objects.equals(numberOfDays, o.numberOfDays)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u0026\u0026 Objects.equals(sortMethod, o.sortMethod)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u0026\u0026 Objects.equals(listDisplay, o.listDisplay);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return Objects.hash(numberOfDays, sortMethod, listDisplay);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        sb.append(\"numberOfDays : \" + numberOfDays + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        sb.append(\"sortMethod : \" + sortMethod + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        sb.append(\"listDisplay : \" + listDisplay);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 71,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            \"The grocery item index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX \u003d \"The template index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_INVALID_TEMPLATE_ITEM_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "            \"The templateItem index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_INVALID_SHOPPING_ITEM_DISPLAYED_INDEX \u003d \"The shopping item index provided is\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 2,
      "teika97": 3,
      "zhangxuan97": 1,
      "kelvinnharris": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyWasteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the GroceryList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @see seedu.ifridge.model.Model#getGroceryList()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ReadOnlyGroceryList getGroceryList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    ObservableList\u003cGroceryItem\u003e getFilteredGroceryItemList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getGroceryListFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns the TemplateList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @see seedu.ifridge.model.Model#getTemplateList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "    ReadOnlyTemplateList getTemplateList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of templates */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "    ObservableList\u003cUniqueTemplateItems\u003e getFilteredTemplateList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns the user prefs\u0027 template list file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Path getTemplateListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "    ObservableList\u003cTemplateItem\u003e getFilteredTemplateToBeShown();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Name getNameTemplateToBeShown();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ReadOnlyWasteList getWasteList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ObservableList\u003cGroceryItem\u003e getFilteredWasteList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    WasteReport getWasteReport();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Path getWasteListFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the ShoppingList."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see Model#getShoppingList()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ReadOnlyShoppingList getShoppingList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of shopping items */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ObservableList\u003cShoppingItem\u003e getFilteredShoppingList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the user prefs\u0027 shopping list file path."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getShoppingListFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ReadOnlyGroceryList getBoughtList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ObservableList\u003cGroceryItem\u003e getFilteredBoughtList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getBoughtListFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Returns the user prefs\u0027 iFridge settings."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    IFridgeSettings getIFridgeSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Set the user prefs\u0027 iFridge settings."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    void setIFridgeSettings(IFridgeSettings iFridgeSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 10,
      "ManasVegi": 23,
      "teika97": 18,
      "zhangxuan97": 26,
      "kelvinnharris": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.IFridgeParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyWasteList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private final IFridgeParser ifridgeParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ifridgeParser \u003d new IFridgeParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        Command command \u003d ifridgeParser.parseCommand(commandText, model.getIFridgeSettings());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            storage.saveGroceryList(model.getGroceryList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "            storage.saveTemplateList(model.getTemplateList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            storage.saveShoppingList(model.getShoppingList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            storage.saveWasteList(model.getWasteArchive());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            storage.saveBoughtList(model.getBoughtList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ReadOnlyGroceryList getGroceryList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return model.getGroceryList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e getFilteredGroceryItemList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return model.getFilteredGroceryItemList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Path getGroceryListFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return model.getGroceryListFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ReadOnlyTemplateList getTemplateList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return model.getTemplateList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ObservableList\u003cUniqueTemplateItems\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Path getTemplateListFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return model.getTemplateListFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ObservableList\u003cTemplateItem\u003e getFilteredTemplateToBeShown() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return model.getFilteredTemplateToBeShown();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Name getNameTemplateToBeShown() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return model.getNameTemplateToBeShown();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ReadOnlyWasteList getWasteList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return model.getWasteList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e getFilteredWasteList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return model.getFilteredWasteItemList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteReport getWasteReport() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return model.getWasteReport();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Path getWasteListFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return model.getWasteListFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ReadOnlyShoppingList getShoppingList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return model.getShoppingList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ObservableList\u003cShoppingItem\u003e getFilteredShoppingList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return model.getFilteredShoppingList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getShoppingListFilePath() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return model.getShoppingListFilePath();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ReadOnlyGroceryList getBoughtList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return model.getBoughtList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e getFilteredBoughtList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return model.getFilteredBoughtItemList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getBoughtListFilePath() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return model.getBoughtListFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public IFridgeSettings getIFridgeSettings() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return model.getIFridgeSettings();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void setIFridgeSettings(IFridgeSettings iFridgeSettings) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.setIFridgeSettings(iFridgeSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 13,
      "ManasVegi": 33,
      "teika97": 26,
      "zhangxuan97": 42,
      "kelvinnharris": 6,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food item to the grocery list. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"EXPIRY_DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_NAME + \"Apples \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_AMOUNT + \"300g\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"30.11.2019\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_TAG + \"healthy \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_TAG + \"fruit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food item added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This food item already exists in the grocery list\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final GroceryItem toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public AddCommand(GroceryItem food) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (model.hasGroceryItem(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.addGroceryItem(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 8,
      "kelvinnharris": 16,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.setGroceryList(new GroceryList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "kelvinnharris": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private boolean isTemplateListItemCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private boolean isTemplateListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private boolean isWasteListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private boolean isShoppingListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private boolean isWasteReportCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean isTemplateListItemCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return isTemplateListItemCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateListItemCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        isTemplateListItemCommand \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean isTemplateListCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return isTemplateListCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void setTemplateListCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        isTemplateListCommand \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean isWasteListCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return isWasteListCommand;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public boolean isWasteReportCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return isWasteReportCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void setWasteReportCommand() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.isWasteReportCommand \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void setWasteListCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        isWasteListCommand \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean isShoppingListCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return isShoppingListCommand;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void setShoppingListCommand() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        isShoppingListCommand \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 19,
      "teika97": 5,
      "zhangxuan97": 24,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        List\u003cGroceryItem\u003e lastShownList \u003d model.getFilteredGroceryItemList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem foodToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.deleteGroceryItem(foodToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 6,
      "kelvinnharris": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_GROCERY_ITEMS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the food item identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"by the index number used in the displayed grocery list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"[\" + PREFIX_EXPIRY_DATE + \"EXPIRY_DATE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited food item: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final EditFoodDescriptor editFoodDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditCommand(Index index, EditFoodDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.editFoodDescriptor \u003d new EditFoodDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        List\u003cGroceryItem\u003e lastShownList \u003d model.getFilteredGroceryItemList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem foodToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem editedFood \u003d createEditedFood(foodToEdit, editFoodDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.setGroceryItem(foodToEdit, editedFood);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.updateFilteredGroceryItemList(PREDICATE_SHOW_ALL_GROCERY_ITEMS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static GroceryItem createEditedFood(GroceryItem foodToEdit, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assert foodToEdit !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Name updatedName \u003d editFoodDescriptor.getName().orElse(foodToEdit.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Amount updatedAmount \u003d editFoodDescriptor.getAmount().orElse(foodToEdit.getAmount());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ExpiryDate updatedExpiryDate \u003d editFoodDescriptor.getExpiryDate().orElse(foodToEdit.getExpiryDate());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFoodDescriptor.getTags().orElse(foodToEdit.getTags());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new GroceryItem(updatedName, updatedAmount, updatedExpiryDate, updatedTags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static class EditFoodDescriptor {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public EditFoodDescriptor() {}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public EditFoodDescriptor(EditFoodDescriptor toCopy) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setExpiryDate(toCopy.expiryDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setExpiryDate(ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cExpiryDate\u003e getExpiryDate() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Optional.ofNullable(expiryDate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "zhangxuan97": 16,
      "kelvinnharris": 45,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.updateFilteredGroceryItemList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredGroceryItemList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 4,
      "kelvinnharris": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_GROCERY_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.updateFilteredGroceryItemList(PREDICATE_SHOW_ALL_GROCERY_ITEMS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "kelvinnharris": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/defaults/ListDefaultCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.defaults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Changes default list display settings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class ListDefaultCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listDefault\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            + \": Change default list display setting to merge or unmerge \" + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            + PREFIX_LIST + \"TYPE \\n\" + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_LIST + \"merge\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Default list display: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private String listDefault;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ListDefaultCommand(String listDefault) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.listDefault \u003d listDefault;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        IFridgeSettings prev \u003d model.getIFridgeSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        IFridgeSettings curr \u003d new IFridgeSettings(prev.getNumberOfDays(), prev.getSortMethod(), listDefault);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.setIFridgeSettings(curr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                String.format(MESSAGE_SUCCESS, listDefault));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 30,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/defaults/ReminderDefaultCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.defaults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Changes default reminder settings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class ReminderDefaultCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remDefault\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            + \": Change default reminder setting to food expiring within r days \" + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            + PREFIX_REMINDER + \"REMINDER \\n\" + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_REMINDER + \"3\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Default number of days for reminder: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private String remDefault;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReminderDefaultCommand(String remDefault) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.remDefault \u003d remDefault;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        IFridgeSettings prev \u003d model.getIFridgeSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        IFridgeSettings curr \u003d new IFridgeSettings(remDefault, prev.getSortMethod(), prev.getListDisplay());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.setIFridgeSettings(curr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                String.format(MESSAGE_SUCCESS, remDefault));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 31,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/defaults/SortDefaultCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.defaults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Changes default sort method settings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class SortDefaultCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortDefault\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change default sort setting \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            + \"Parameters: \" + PREFIX_SORT + \"TYPE \\n\" + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SORT + \"expiry\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Default sort method: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private String sortDefault;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public SortDefaultCommand(String sortDefault) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.sortDefault \u003d sortDefault;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        IFridgeSettings prev \u003d model.getIFridgeSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        IFridgeSettings curr \u003d new IFridgeSettings(prev.getNumberOfDays(), sortDefault, prev.getListDisplay());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.setIFridgeSettings(curr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                String.format(MESSAGE_SUCCESS, sortDefault));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 29,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/grocerylist/AddGroceryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class AddGroceryCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food item to the grocery list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"EXPIRY_DATE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Example: glist \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_NAME + \"Apples \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_AMOUNT + \"300g\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"30/11/2019\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_TAG + \"healthy \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + PREFIX_TAG + \"fruit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New grocery item added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROCERY_ITEM \u003d \"This food item already exists in the grocery list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final GroceryItem toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Creates an AddGroceryCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public AddGroceryCommand(GroceryItem food) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (model.hasGroceryItem(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROCERY_ITEM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.addGroceryItem(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.commitGroceryList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.commitWasteList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                || (other instanceof AddGroceryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddGroceryCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "zhangxuan97": 10,
      "kelvinnharris": 56
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/grocerylist/DeleteGroceryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class DeleteGroceryCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \": Deletes the grocery item identified by the index number used in the displayed grocery list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Example: glist \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_DELETE_GROCERY_ITEM_SUCCESS \u003d \"Deleted grocery item: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DeleteGroceryCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        List\u003cGroceryItem\u003e lastShownList \u003d model.getFilteredGroceryItemList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem groceryItemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean isFullyUsed \u003d groceryItemToDelete.isEmpty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (!isFullyUsed) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            model.addWasteItem(groceryItemToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            model.commitWasteList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.deleteGroceryItem(groceryItemToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.commitGroceryList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_DELETE_GROCERY_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                groceryItemToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        result.setWasteListCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                || (other instanceof DeleteGroceryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteGroceryCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 3,
      "zhangxuan97": 16,
      "kelvinnharris": 46
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/grocerylist/EditGroceryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_GROCERY_ITEMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class EditGroceryCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the grocery item identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"by the index number used in the displayed grocery list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"[\" + PREFIX_EXPIRY_DATE + \"EXPIRY_DATE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Example: glist \" + COMMAND_WORD + \" 1 n/Pisang Goreng t/fried\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited grocery item: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field (name, expiry date, or tag) must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final EditGroceryItemDescriptor editGroceryItemDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param editGroceryItemDescriptor details to edit the person with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditGroceryCommand(Index index, EditGroceryItemDescriptor editGroceryItemDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(editGroceryItemDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.editGroceryItemDescriptor \u003d new EditGroceryItemDescriptor(editGroceryItemDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        List\u003cGroceryItem\u003e lastShownList \u003d model.getFilteredGroceryItemList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem groceryItemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem editedGroceryItem \u003d createdEditedGroceryItem(groceryItemToEdit, editGroceryItemDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.setGroceryItem(groceryItemToEdit, editedGroceryItem);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.commitGroceryList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.commitWasteList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.updateFilteredGroceryItemList(PREDICATE_SHOW_ALL_GROCERY_ITEMS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedGroceryItem));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static GroceryItem createdEditedGroceryItem(GroceryItem groceryItemToEdit,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                                                        EditGroceryItemDescriptor editGroceryItemDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assert groceryItemToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Name updatedName \u003d editGroceryItemDescriptor.getName().orElse(groceryItemToEdit.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Amount updatedAmount \u003d editGroceryItemDescriptor.getAmount().orElse(groceryItemToEdit.getAmount());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ExpiryDate updatedExpiryDate \u003d editGroceryItemDescriptor.getExpiryDate()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .orElse(groceryItemToEdit.getExpiryDate());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editGroceryItemDescriptor.getTags().orElse(groceryItemToEdit.getTags());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new GroceryItem(updatedName, updatedAmount, updatedExpiryDate, updatedTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static class EditGroceryItemDescriptor {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public EditGroceryItemDescriptor() {}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public EditGroceryItemDescriptor(EditGroceryItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setExpiryDate(toCopy.expiryDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, expiryDate, tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setExpiryDate(ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cExpiryDate\u003e getExpiryDate() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Optional.ofNullable(expiryDate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "zhangxuan97": 17,
      "kelvinnharris": 150
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/grocerylist/ListGroceryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_GROCERY_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class ListGroceryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all grocery items\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.updateFilteredGroceryItemList(PREDICATE_SHOW_ALL_GROCERY_ITEMS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 5,
      "kelvinnharris": 21
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/grocerylist/RedoGroceryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "package seedu.ifridge.logic.commands.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.model.ReadOnlyWasteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Redo grocery list state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class RedoGroceryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo grocery list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!model.canRedoGroceryList()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new CommandException(\"Cannot redo.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ReadOnlyGroceryList curr \u003d model.redoGroceryList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.setGroceryList(curr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ReadOnlyWasteList currWasteList \u003d model.redoWasteList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.setWasteList(currWasteList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 35
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/grocerylist/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.NameContainsCloseExpiryDatePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Finds and lists all food in iFridge whose expiry dates is within r days."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rem\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Display list with all food expiring within r days \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            + PREFIX_REMINDER + \"REMINDER \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Example: glist \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            + PREFIX_REMINDER + \"3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private final NameContainsCloseExpiryDatePredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReminderCommand(NameContainsCloseExpiryDatePredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.updateFilteredGroceryItemList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredGroceryItemList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                || (other instanceof ReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u0026\u0026 predicate.equals(((ReminderCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 36,
      "zhangxuan97": 7,
      "kelvinnharris": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/grocerylist/UndoGroceryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "package seedu.ifridge.logic.commands.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.model.ReadOnlyWasteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Undo grocery list state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class UndoGroceryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo grocery list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!model.canUndoGroceryList()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new CommandException(\"Cannot undo.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ReadOnlyGroceryList currGroceryList \u003d model.undoGroceryList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.setGroceryList(currGroceryList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ReadOnlyWasteList currWasteList \u003d model.undoWasteList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.setWasteList(currWasteList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 35
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/grocerylist/UseGroceryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_GROCERY_ITEMS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class UseGroceryCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"use\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reduces the amount of the grocery item identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"by the index number used in the displayed grocery list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"Example: glist \" + COMMAND_WORD + \" 1 a/100g\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_USE_GROCERY_ITEM_SUCCESS \u003d \"Used grocery item: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_NOT_USED \u003d \"At least amount field must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final UseGroceryItemDescriptor useGroceryItemDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param useGroceryItemDescriptor details to edit the person with"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public UseGroceryCommand(Index index, UseGroceryItemDescriptor useGroceryItemDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(useGroceryItemDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.useGroceryItemDescriptor \u003d new UseGroceryItemDescriptor(useGroceryItemDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        List\u003cGroceryItem\u003e lastShownList \u003d model.getFilteredGroceryItemList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem groceryItemToUse \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem usedGroceryItem \u003d createdUsedGroceryItem(groceryItemToUse, useGroceryItemDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.setGroceryItem(groceryItemToUse, usedGroceryItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.commitGroceryList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        model.commitWasteList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.updateFilteredGroceryItemList(PREDICATE_SHOW_ALL_GROCERY_ITEMS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_USE_GROCERY_ITEM_SUCCESS, usedGroceryItem));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static GroceryItem createdUsedGroceryItem(GroceryItem groceryItemToUse,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                                                        UseGroceryItemDescriptor useGroceryItemDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assert groceryItemToUse !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Name name \u003d groceryItemToUse.getName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Amount updatedAmount \u003d groceryItemToUse.getAmount().reduceBy(useGroceryItemDescriptor.amount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ExpiryDate expiryDate \u003d groceryItemToUse.getExpiryDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Set\u003cTag\u003e tags \u003d groceryItemToUse.getTags();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new GroceryItem(name, updatedAmount, expiryDate, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static class UseGroceryItemDescriptor {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public UseGroceryItemDescriptor() {}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public UseGroceryItemDescriptor(UseGroceryItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setExpiryDate(toCopy.expiryDate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public boolean isAmountUsed() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return (Amount.getValue(amount) !\u003d 0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setExpiryDate(ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cExpiryDate\u003e getExpiryDate() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Optional.ofNullable(expiryDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "zhangxuan97": 14,
      "kelvinnharris": 146
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/shoppinglist/AddShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class AddShoppingCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food item to the shopping list. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + PREFIX_NAME + \"Apples \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + PREFIX_AMOUNT + \"300g\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New shopping item added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOPPING_ITEM \u003d \"This shopping item already exists in shopping list\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final ShoppingItem toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates an AddShoppingCommand to add the specified {@code ShoppingItem}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public AddShoppingCommand(ShoppingItem food) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (model.hasShoppingItem(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SHOPPING_ITEM);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model.addShoppingItem(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        commandResult.setShoppingListCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                || (other instanceof AddShoppingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddShoppingCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 3,
      "ManasVegi": 50,
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/shoppinglist/BoughtShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_SHOPPING_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Edits the details of an existing shopping Item in the shopping list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class BoughtShoppingCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bought\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks the ShoppingItem at the index as bought. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Also specifies the expiry date and amount of items bought. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"[\" + PREFIX_EXPIRY_DATE + \"EXPIRY_DATE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"30.04.2019\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + PREFIX_AMOUNT + \"2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_EDIT_SHOPPING_ITEM_SUCCESS \u003d \"Edited shopping item: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_NOT_PROPER \u003d \"At least one of the required fields (amount and expiry date) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"are not provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param index of the shopping item in the filtered shopping list to edit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param amount of the item to be marked as bought"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param expiryDate of the item to be marked as bought"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public BoughtShoppingCommand(Index index, Amount amount, ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        List\u003cShoppingItem\u003e lastShownList \u003d model.getFilteredShoppingList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOPPING_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingItem shoppingItemToMarkAsBought \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingItem boughtShoppingItem \u003d shoppingItemToMarkAsBought.setBought(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryItem boughtItem \u003d shoppingItemToMarkAsBought.getBoughtItem(amount, expiryDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model.setShoppingItem(shoppingItemToMarkAsBought, boughtShoppingItem);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model.updateFilteredShoppingList(PREDICATE_SHOW_ALL_SHOPPING_ITEMS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model.addBoughtItem(boughtItem);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_EDIT_SHOPPING_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                boughtShoppingItem));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        commandResult.setShoppingListCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 4,
      "ManasVegi": 65,
      "zhangxuan97": 14
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/shoppinglist/DeleteShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class DeleteShoppingCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \": Deletes the shopping item identified by the index number used in the displayed shopping list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_DELETE_SHOPPING_ITEM_SUCCESS \u003d \"Deleted ShoppingItem: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public DeleteShoppingCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        List\u003cShoppingItem\u003e lastShownList \u003d model.getFilteredShoppingList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOPPING_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingItem shoppingItemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model.deleteShoppingItem(shoppingItemToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                new CommandResult(String.format(MESSAGE_DELETE_SHOPPING_ITEM_SUCCESS, shoppingItemToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        commandResult.setShoppingListCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                || (other instanceof DeleteShoppingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteShoppingCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 4,
      "ManasVegi": 47,
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/shoppinglist/EditShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_SHOPPING_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "//For now edit shopping command will not be able to change the expiry date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class EditShoppingCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the shopping item identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"by the index number used in the displayed shopping list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + PREFIX_NAME + \"apple\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + PREFIX_AMOUNT + \"2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_EDIT_SHOPPING_ITEM_SUCCESS \u003d \"Edited shopping item: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final EditShoppingItemDescriptor editShoppingItemDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param editShoppingItemDescriptor details to edit the person with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public EditShoppingCommand(Index index, EditShoppingItemDescriptor editShoppingItemDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(editShoppingItemDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.editShoppingItemDescriptor \u003d new EditShoppingItemDescriptor(editShoppingItemDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        List\u003cShoppingItem\u003e lastShownList \u003d model.getFilteredShoppingList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SHOPPING_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingItem shoppingItemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingItem editedShoppingItem \u003d createEditedShoppingItem(shoppingItemToEdit, editShoppingItemDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!shoppingItemToEdit.isBought()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            model.setShoppingItem(shoppingItemToEdit, editedShoppingItem);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            model.updateFilteredShoppingList(PREDICATE_SHOW_ALL_SHOPPING_ITEMS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                new CommandResult(String.format(MESSAGE_EDIT_SHOPPING_ITEM_SUCCESS, editedShoppingItem));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        commandResult.setShoppingListCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates and returns a {@code ShoppingItem} with the details of {@code shoppingItemToEdit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static ShoppingItem createEditedShoppingItem(ShoppingItem shoppingItemToEdit,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                                                         EditShoppingItemDescriptor editShoppingItemDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assert shoppingItemToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Name updatedName \u003d editShoppingItemDescriptor.getName().orElse(shoppingItemToEdit.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Amount updatedAmount \u003d editShoppingItemDescriptor.getAmount().orElse(shoppingItemToEdit.getAmount());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new ShoppingItem(updatedName, updatedAmount);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static class EditShoppingItemDescriptor {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public EditShoppingItemDescriptor() {}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public EditShoppingItemDescriptor(EditShoppingItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //setExpiryDate(toCopy.expiryDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //setTags(toCopy.tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, amount);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 4,
      "ManasVegi": 121,
      "zhangxuan97": 14
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/shoppinglist/ListShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_SHOPPING_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ListShoppingCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all food items\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model.updateFilteredShoppingList(PREDICATE_SHOW_ALL_SHOPPING_ITEMS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        commandResult.setShoppingListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 3,
      "ManasVegi": 20,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/shoppinglist/MergeShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_GROCERY_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_SHOPPING_ITEMS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.food.Amount.getValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class MergeShoppingCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mergebought\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Merged all bought shopping items into grocery list.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates an updated grocery item with the sum of its amount and boughtItem\u0027s quantity as quantity"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param boughtItem with same name as the groceryItem"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param groceryItem whose quantity is to be updated"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return grocery item with updated amount"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private GroceryItem createUpdatedGroceryItem(GroceryItem boughtItem, GroceryItem groceryItem) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Name name \u003d boughtItem.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ExpiryDate expiryDate \u003d boughtItem.getExpiryDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Amount updatedAmount \u003d boughtItem.getAmount().increaseBy(groceryItem.getAmount());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Set\u003cTag\u003e tags \u003d groceryItem.getTags();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new GroceryItem(name, updatedAmount, expiryDate, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Deletes or reduces the amount of shopping item according to how much was bought"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param boughtItem according to which shoppingList will be modified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param model to be changed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private void modifyShoppingListAccordingToBoughtItem(GroceryItem boughtItem, Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Amount boughtAmount \u003d boughtItem.getAmount();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        List\u003cShoppingItem\u003e shoppingList \u003d model.getFilteredShoppingList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (int i \u003d 0; i \u003c shoppingList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            ShoppingItem shoppingItem \u003d shoppingList.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Amount shoppingAmount \u003d shoppingItem.getAmount();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (!shoppingItem.getName().equals(boughtItem.getName())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (getValue(shoppingAmount) \u003e getValue(boughtAmount)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Amount updatedShoppingAmount \u003d shoppingItem.getAmount().reduceBy(boughtAmount);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                ShoppingItem editShoppingItem \u003d new ShoppingItem(shoppingItem.getName(), updatedShoppingAmount,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        shoppingItem.isBought(), shoppingItem.isUrgent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                model.setShoppingItem(shoppingItem, editShoppingItem);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                model.deleteShoppingItem(shoppingItem);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                --i;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Adds a new Grocery item or increases the amount of existing grocery item."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * This is done according to the item that is bought."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param boughtItem according to which groceryList will change"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param model to be modified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private void modifyGroceryListAccordingToBoughtItem(GroceryItem boughtItem, Model model) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        boolean toAdd \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        List\u003cGroceryItem\u003e groceryList \u003d model.getFilteredGroceryItemList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (int j \u003d 0; j \u003c groceryList.size(); j++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            GroceryItem groceryItem \u003d groceryList.get(j);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (boughtItem.isSameFood(groceryItem)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                GroceryItem updatedGroceryItem \u003d createUpdatedGroceryItem(boughtItem, groceryItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                model.setGroceryItem(groceryItem, updatedGroceryItem);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                toAdd \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (toAdd) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            model.addGroceryItem(boughtItem);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        List\u003cGroceryItem\u003e lastShownBoughtList \u003d model.getFilteredBoughtItemList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownBoughtList.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            GroceryItem boughtItem \u003d lastShownBoughtList.get(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            modifyGroceryListAccordingToBoughtItem(boughtItem, model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            modifyShoppingListAccordingToBoughtItem(boughtItem, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model.setBoughtList(new GroceryList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model.updateFilteredShoppingList(PREDICATE_SHOW_ALL_SHOPPING_ITEMS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model.updateFilteredGroceryItemList(PREDICATE_SHOW_ALL_GROCERY_ITEMS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        commandResult.setShoppingListCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 3,
      "ManasVegi": 95,
      "zhangxuan97": 14
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/templatelist/AddTemplateListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Adds a template to the template list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class AddTemplateListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new template to the template list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + PREFIX_NAME + \"NAME\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + PREFIX_NAME + \"Weekly Necessities \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New template added into template: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEMPLATE \u003d \"This template already exists in the template list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final UniqueTemplateItems toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Creates an AddTemplateListCommand to add the specified {@code TemplateList List}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public AddTemplateListCommand(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(template);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        toAdd \u003d template;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (model.hasTemplate(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TEMPLATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.addTemplate(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.setTemplateListCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "                || (other instanceof AddTemplateListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTemplateListCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 53,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/templatelist/ClearTemplateListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Clears the template list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class ClearTemplateListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TemplateList has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.setTemplateList(new TemplateList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.setTemplateListCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "teika97": 22,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/templatelist/DeleteTemplateListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class DeleteTemplateListCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"tlist \" + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \": Deletes the template  identified by the index number used in the displayed template list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Example: tlist \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Template: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public DeleteTemplateListCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cUniqueTemplateItems\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems templateToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.deleteTemplate(templateToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, templateToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.setTemplateListCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "                || (other instanceof DeleteTemplateListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTemplateListCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 51,
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/templatelist/EditTemplateListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_TEMPLATES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Edits the details of an existing template item in the template list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class EditTemplateListCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"tlist \" + COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \": Edits the name of the template identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"by the index number used in the displayed template list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \" \" + PREFIX_NAME + \"NAME\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Example: tlist \" + COMMAND_WORD + \" 1 n/Meat \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Edited template: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Name field must be provided.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final EditTemplateListDescriptor editTemplateListDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param editTemplateListDescriptor details to edit the person with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateListCommand(Index index, EditTemplateListDescriptor editTemplateListDescriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(editTemplateListDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.editTemplateListDescriptor \u003d new EditTemplateListDescriptor(editTemplateListDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cUniqueTemplateItems\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems templateToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems editedTemplate \u003d createEditedTemplate(templateToEdit, editTemplateListDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.setTemplate(templateToEdit, editedTemplate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateList(PREDICATE_SHOW_ALL_TEMPLATES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, templateToEdit));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.setTemplateListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Creates and returns a {@code Template} with the details of {@code templateToEdit}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * edited with {@code editTemplateListDescriptor}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static UniqueTemplateItems createEditedTemplate(UniqueTemplateItems templateToEdit,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "                                                            EditTemplateListDescriptor editTemplateListDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assert templateToEdit !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems editedTemplate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Name updatedName \u003d editTemplateListDescriptor.getName().orElse(templateToEdit.getName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ObservableList\u003cTemplateItem\u003e templateItems \u003d templateToEdit.getTemplate();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "        editedTemplate \u003d new UniqueTemplateItems(updatedName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        editedTemplate.setTemplateItems(templateItems);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return editedTemplate;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Stores the details to edit the template with. Each non-empty field value will replace the corresponding field"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * value of the template."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static class EditTemplateListDescriptor {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "        private UniqueTemplateItems templateItems;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public EditTemplateListDescriptor() {}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public EditTemplateListDescriptor(EditTemplateListDescriptor toCopy) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "            templateItems \u003d new UniqueTemplateItems(toCopy.name);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "            setTemplateItems(toCopy.templateItems);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplateItems(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": "            if (template !\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": "                this.templateItems.setTemplateItems(template);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 122,
      "zhangxuan97": 13
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/templatelist/ListTemplateListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_TEMPLATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Lists all templates in the template list to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class ListTemplateListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all templates\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateList(PREDICATE_SHOW_ALL_TEMPLATES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.setTemplateListCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 23,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/templatelist/template/AddTemplateItemCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_TEMPLATES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Adds a template item to the specified template."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class AddTemplateItemCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"tlist template \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \": Adds a food item to the specified template list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Example: tlist template \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + PREFIX_NAME + \"Apples \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + PREFIX_AMOUNT + \"300g\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food item added into template: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food item already exists in the template list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final TemplateItem toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Creates an AddTemplateItemCommand to add the specified {@code templateItem}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public AddTemplateItemCommand(Index index, TemplateItem templateItem) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(templateItem);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.toAdd \u003d templateItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cUniqueTemplateItems\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // Check that the template index is valid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems templateToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems editedTemplate \u003d templateToEdit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (templateToEdit.contains(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        editedTemplate.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.setTemplate(templateToEdit, editedTemplate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateList(PREDICATE_SHOW_ALL_TEMPLATES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.setShownTemplate(editedTemplate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateToBeShown();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.setTemplateListItemCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "                || (other instanceof AddTemplateItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTemplateItemCommand) other).toAdd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 73,
      "zhangxuan97": 12
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/templatelist/template/DeleteTemplateItemCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_ITEM_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_TEMPLATES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class DeleteTemplateItemCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"tlist template \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \": Deletes the template item identified by the index number used in the displayed template list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + PREFIX_ITEM_INDEX + \"ITEMINDEX\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Example: tlist template \" + COMMAND_WORD + \" 1 \" + PREFIX_ITEM_INDEX + \" 1 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted TemplateList Item: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Index targetTemplateIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Index targetItemIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public DeleteTemplateItemCommand(Index targetTemplateIndex, Index targetItemIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.targetTemplateIndex \u003d targetTemplateIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.targetItemIndex \u003d targetItemIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cUniqueTemplateItems\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // Check that the template index is valid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (targetTemplateIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems templateToEdit \u003d lastShownList.get(targetTemplateIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems editedTemplate \u003d templateToEdit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (targetItemIndex.getZeroBased() \u003e\u003d templateToEdit.getSize()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem itemToDelete \u003d templateToEdit.get(targetItemIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        editedTemplate.remove(itemToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.setTemplate(templateToEdit, editedTemplate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateList(PREDICATE_SHOW_ALL_TEMPLATES);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.setShownTemplate(editedTemplate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateToBeShown();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, itemToDelete));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.setTemplateListItemCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "                || (other instanceof DeleteTemplateItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 targetTemplateIndex.equals(((DeleteTemplateItemCommand) other).targetTemplateIndex)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 targetItemIndex.equals(((DeleteTemplateItemCommand) other).targetItemIndex)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 64,
      "zhangxuan97": 11
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/templatelist/template/EditTemplateItemCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_ITEM_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.Model.PREDICATE_SHOW_ALL_TEMPLATES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Edits the details of an existing template item in the template list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class EditTemplateItemCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"tlist template \" + COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \": Edits the details of the food item identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"by the index number used in the displayed template list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + PREFIX_ITEM_INDEX + \"ITEMINDEX\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Example: tlist template\" + COMMAND_WORD + \" 1 \" + PREFIX_ITEM_INDEX + \" 1 \" + PREFIX_NAME + \"Whole Milk\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Food item %1$s edited to food item: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Index targetTemplateIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Index targetItemIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final EditTemplateItemDescriptor editTemplateItemDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param targetTemplate of the template in the filtered template list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param targetItem of the template item in the template to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param editTemplateItemDescriptor details to edit the person with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateItemCommand(Index targetTemplate, Index targetItem,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "                                   EditTemplateItemDescriptor editTemplateItemDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(targetItem);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(targetTemplate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(editTemplateItemDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.targetItemIndex \u003d targetItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.targetTemplateIndex \u003d targetTemplate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.editTemplateItemDescriptor \u003d new EditTemplateItemDescriptor(editTemplateItemDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cUniqueTemplateItems\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (targetTemplateIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems templateToEdit \u003d lastShownList.get(targetTemplateIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems editedTemplate \u003d templateToEdit;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (targetItemIndex.getZeroBased() \u003e\u003d templateToEdit.getSize()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem itemToEdit \u003d templateToEdit.get(targetItemIndex.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedItem \u003d createEditedItem(itemToEdit, editTemplateItemDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "        editedTemplate.setTemplateItem(itemToEdit, editedItem);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.setTemplate(templateToEdit, editedTemplate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateList(PREDICATE_SHOW_ALL_TEMPLATES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.setShownTemplate(editedTemplate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateToBeShown();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, itemToEdit, editedItem));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.setTemplateListItemCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Creates and returns a {@code TemplateItem} with the details of {@code itemToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * edited with {@code editTemplateItemDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static TemplateItem createEditedItem(TemplateItem itemToEdit,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "                                                 EditTemplateItemDescriptor editTemplateItemDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assert itemToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Name updatedName \u003d editTemplateItemDescriptor.getName().orElse(itemToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Amount updatedAmount \u003d editTemplateItemDescriptor.getAmount().orElse(itemToEdit.getAmount());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new TemplateItem(updatedName, updatedAmount);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Stores the details to edit the template item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * corresponding field value of the template item."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static class EditTemplateItemDescriptor {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public EditTemplateItemDescriptor() {}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public EditTemplateItemDescriptor(EditTemplateItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, amount);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 134,
      "zhangxuan97": 16
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/templatelist/template/ListTemplateItemCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Lists all template items in the template list to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class ListTemplateItemCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all template items in %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"tlist template \" + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \": Lists the template items in the specified template list\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"Example: tlist template \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Index targetTemplateIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param targetTemplateIndex of the target template to be listed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ListTemplateItemCommand(Index targetTemplateIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(targetTemplateIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.targetTemplateIndex \u003d targetTemplateIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cUniqueTemplateItems\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (targetTemplateIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems targetTemplate \u003d lastShownList.get(targetTemplateIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.setShownTemplate(targetTemplate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateToBeShown();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, targetTemplate.getName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.setTemplateListItemCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 47,
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/wastelist/FeedbackWasteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.food.Amount.UNIT_KILOGRAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.food.Amount.UNIT_LITRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.model.food.Amount.UNIT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteStatistic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Provides feedback to the user about user\u0027s current food waste"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class FeedbackWasteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"feedback\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"wlist \" + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \": Gives you feedback based on your current food waste performance for the month.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"Example: wlist \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully displayed feedback results\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteStatistic predictedWastage \u003d WasteList.getCurrentMonthPredictedWasteStatistic();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String feedbackMessage \u003d \"This month, your predicted food wastage will be \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + predictedWastage.getTotalWeight() + UNIT_KILOGRAM + \", \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + predictedWastage.getTotalVolume() + UNIT_LITRE + \", \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + predictedWastage.getTotalQuantity() + UNIT_QUANTITY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        //Give feedback based on current month\u0027s waste"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        model."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        1. Get the current waste list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        2. Compute current food waste, predicted food waste"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        3. Compare with last month\u0027s statistics, remark if there is an increase or decrease in food waste."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new CommandResult(feedbackMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 52
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/wastelist/FoodWasteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Displays which food items the user most commonly wastes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class FoodWasteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"food\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"wlist \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \": Shows you the food you tend to most commonly waste.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"Example: wlist \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        v1.3 or v1.4"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Not a very high priority. Use Frequency Analyser from Kumos library."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 34
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/wastelist/ListWasteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Lists Waste Command to list out all food waste in a given month."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class ListWasteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"wlist \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \": Lists out your current food waste for a given month. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"If no month is specified, the food waste for the current month is displayed.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"Optional Parameters: \" + PREFIX_MONTH + \"MONTH_OF_YEAR\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"Example: wlist \" + COMMAND_WORD + \" \" + PREFIX_MONTH + \"09.2019\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static final String MESSAGE_MONTH_RESTRICTION \u003d \"The given month must not\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \" be after the current month\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Listed all waste items for the month %1$s.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private WasteMonth wasteMonth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ListWasteCommand(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteMonth \u003d wasteMonth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth currentWasteMonth \u003d WasteMonth.getCurrentWasteMonth();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (this.wasteMonth.isAfter(currentWasteMonth)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new CommandException(MESSAGE_MONTH_RESTRICTION);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        model.updateFilteredWasteItemList(this.wasteMonth);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, this.wasteMonth));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        commandResult.setWasteListCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "zhangxuan97": 55
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/commands/wastelist/ReportWasteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_END_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_START_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteStatistic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Generates a report of user\u0027s food waste for a specified time frame."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class ReportWasteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"wlist \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \": Provides you with a report of your past food waste.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"[\" + PREFIX_START_MONTH + \"STARTING MONTH] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"[\" + PREFIX_END_MONTH + \"ENDING MONTH]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"Example: wlist \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + PREFIX_START_MONTH + \"May 2019 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + PREFIX_END_MONTH + \"Oct 2019\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Generated your food waste report from %1$s to %2$s.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_INVALID_START_END_ORDER \u003d \"The start month must be \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"before or equal to the end month.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_DIFFERENT_START_MONTH \u003d \"The earliest record found in your waste archive \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"is %1$s, which will be used as the starting month instead of %2$s.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_DIFFERENT_END_MONTH \u003d \"You have specified an end month later than this \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"current month. Our report will only show your waste statistics up to the current month.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_NO_EXISTING_RECORDS \u003d \"We have no records of your food waste from \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"%1$s to %2$s. The earliest record we can find is dated on %3$s.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_START_MONTH_AFTER_CURRENT_MONTH \u003d \"Please ensure the start month is before or \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"equal to the current month of %1$s.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private WasteMonth startWasteMonth;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private WasteMonth endWasteMonth;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private boolean startMonthGivenByUser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private boolean endMonthGivenByUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ReportWasteCommand(WasteMonth startWm, WasteMonth endWm,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                              boolean startMonthGivenByUser, boolean endMonthGivenByUser) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(startWm);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(endWm);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(startMonthGivenByUser);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(endMonthGivenByUser);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.startWasteMonth \u003d startWm;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.endWasteMonth \u003d endWm;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.startMonthGivenByUser \u003d startMonthGivenByUser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.endMonthGivenByUser \u003d endMonthGivenByUser;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (this.startWasteMonth.isAfter(this.endWasteMonth)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_START_END_ORDER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth earliestExistingWasteMonth \u003d model.getEarliestWasteMonth();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth latestExistingWasteMonth \u003d model.getLatestWasteMonth();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(earliestExistingWasteMonth);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(latestExistingWasteMonth);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean endingMonthBeforeEarliestRecord \u003d this.endWasteMonth.isBefore(earliestExistingWasteMonth);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (endingMonthBeforeEarliestRecord) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_EXISTING_RECORDS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    this.startWasteMonth, this.endWasteMonth, earliestExistingWasteMonth));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean startingMonthAfterLatestRecord \u003d this.startWasteMonth.isAfter(latestExistingWasteMonth);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (startingMonthAfterLatestRecord) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_START_MONTH_AFTER_CURRENT_MONTH,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    latestExistingWasteMonth));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth actualStartMonth \u003d WasteMonth.later(this.startWasteMonth, earliestExistingWasteMonth);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth actualEndMonth \u003d WasteMonth.earlier(this.endWasteMonth, latestExistingWasteMonth);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth endingMonth \u003d actualEndMonth.addWasteMonth(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth wasteMonth \u003d actualStartMonth;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Map\u003cWasteMonth, WasteStatistic\u003e historicalData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        while (wasteMonth.isBefore(endingMonth)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteStatistic statistic;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            if (model.hasWasteMonth(wasteMonth)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                statistic \u003d model.getWasteListByMonth(wasteMonth).getWasteStatistic();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                statistic \u003d new WasteStatistic(0, 0, 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            historicalData.put(wasteMonth, statistic);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            wasteMonth \u003d wasteMonth.nextWasteMonth();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteReport wasteReport \u003d new WasteReport(historicalData);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        model.setWasteReport(wasteReport);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean startMonthDifferentFromUserSpecified \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                !actualStartMonth.equals(this.startWasteMonth) \u0026\u0026 startMonthGivenByUser;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean endMonthDifferentFromUserSpecified \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                !actualEndMonth.equals(this.endWasteMonth) \u0026\u0026 endMonthGivenByUser;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String differentStartMonth \u003d startMonthDifferentFromUserSpecified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                ? String.format(MESSAGE_DIFFERENT_START_MONTH, actualStartMonth, this.startWasteMonth)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                : \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String differentEndMonth \u003d endMonthDifferentFromUserSpecified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                ? MESSAGE_DIFFERENT_END_MONTH"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                : \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                differentStartMonth + differentEndMonth"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + String.format(MESSAGE_SUCCESS, actualStartMonth, actualEndMonth));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        commandResult.setWasteReportCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 137
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ExpiryDate expiryDate \u003d ParserUtil.parseExpiryDate(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem food \u003d new GroceryItem(name, amount, expiryDate, tagList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new AddCommand(food);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "zhangxuan97": 11,
      "kelvinnharris": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final Prefix PREFIX_EXPIRY_DATE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final Prefix PREFIX_REMINDER \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final Prefix PREFIX_SORT \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public static final Prefix PREFIX_LIST \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final Prefix PREFIX_START_MONTH \u003d new Prefix(\"sm/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final Prefix PREFIX_END_MONTH \u003d new Prefix(\"em/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final Prefix PREFIX_ITEM_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 3,
      "teika97": 2,
      "zhangxuan97": 4,
      "kelvinnharris": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        EditFoodDescriptor editPersonDescriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "zhangxuan97": 9,
      "kelvinnharris": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/GroceryListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class GroceryListParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "zhangxuan97": 13,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/IFridgeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.grocerylist.GroceryListParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.templatelist.TemplateListParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.wastelist.WasteListParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class IFridgeParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003clistType\u003e\\\\S+)(?\u003clistCommand\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public Command parseCommand(String userInput, IFridgeSettings iFridgeSettings) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final String listType \u003d matcher.group(\"listType\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final String listCommand \u003d matcher.group(\"listCommand\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        switch (listType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case GroceryListParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return new GroceryListParser().parseCommand(listCommand, iFridgeSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case TemplateListParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return new TemplateListParser().parseCommand(listCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case WasteListParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return new WasteListParser().parseCommand(listCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case ShoppingListParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return new ShoppingListParser().parseShoppingCommand(listCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "ManasVegi": 3,
      "teika97": 3,
      "zhangxuan97": 17,
      "kelvinnharris": 42
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static ExpiryDate parseExpiryDate(String expiryDate) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String trimmedExpiryDate \u003d expiryDate.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!ExpiryDate.isValidExpiryDate(trimmedExpiryDate)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new ExpiryDate(trimmedExpiryDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Parses a String object into a WasteMonth object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteMonth parseWasteMonth(String date) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            Parser dateParser \u003d new Parser();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            DateGroup dateGroup \u003d dateParser.parse(date).get(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            Date dateInDateFormat \u003d dateGroup.getDates().get(0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            LocalDate dateInLocalDateFormat \u003d dateInDateFormat.toInstant()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    .atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return new WasteMonth(dateInLocalDateFormat);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new ParseException(WasteMonth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 32,
      "kelvinnharris": 16,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/ShoppingListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.AddShoppingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.BoughtShoppingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.DeleteShoppingCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.EditShoppingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.ListShoppingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.MergeShoppingCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.shoppinglist.AddShoppingCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.shoppinglist.BoughtShoppingCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.shoppinglist.DeleteShoppingCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.shoppinglist.EditShoppingCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ShoppingListParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String LIST_TYPE_WORD \u003d \"slist\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Command parseShoppingCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case AddShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return new AddShoppingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case EditShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return new EditShoppingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case DeleteShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return new DeleteShoppingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case BoughtShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return new BoughtShoppingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //    return new ClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //    return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case ListShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return new ListShoppingCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case MergeShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return new MergeShoppingCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //    return new ExitCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //    return new HelpCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 69,
      "zhangxuan97": 16
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/defaults/ListDefaultCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.defaults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.defaults.ListDefaultCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Parses input arguments and creates a new ListDefaultCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class ListDefaultCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListDefaultCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * and returns a ListDefaultCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ListDefaultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        String d;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_LIST)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListDefaultCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            d \u003d argMultimap.getValue(PREFIX_LIST).get().trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new ListDefaultCommand(d);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 36,
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/defaults/ReminderDefaultCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.defaults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.defaults.ReminderDefaultCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Parses input arguments and creates a new ReminderDefaultCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class ReminderDefaultCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReminderDefaultCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * and returns a ReminderDefaultCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReminderDefaultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        int r;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_REMINDER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_REMINDER)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    ReminderDefaultCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            r \u003d Integer.parseInt(argMultimap.getValue(PREFIX_REMINDER).get().trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new ReminderDefaultCommand(String.valueOf(r));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 37,
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/defaults/SortDefaultCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.defaults;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.defaults.SortDefaultCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Parses input arguments and creates a new SortDefaultCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class SortDefaultCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortDefaultCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * and returns a SortDefaultCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public SortDefaultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        String by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SORT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SORT)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortDefaultCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            by \u003d argMultimap.getValue(PREFIX_SORT).get().trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new SortDefaultCommand(by);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 36,
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/grocerylist/AddGroceryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.AddGroceryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class AddGroceryCommandParser implements Parser\u003cAddGroceryCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public AddGroceryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_EXPIRY_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroceryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ExpiryDate expiryDate \u003d ParserUtil.parseExpiryDate(argMultimap.getValue(PREFIX_EXPIRY_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem food \u003d new GroceryItem(name, amount, expiryDate, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new AddGroceryCommand(food);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 18,
      "kelvinnharris": 44
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/grocerylist/DeleteGroceryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.DeleteGroceryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class DeleteGroceryCommandParser implements Parser\u003cDeleteGroceryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DeleteGroceryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return new DeleteGroceryCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroceryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 7,
      "kelvinnharris": 24
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/grocerylist/EditGroceryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.EditGroceryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.EditGroceryCommand.EditGroceryItemDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class EditGroceryCommandParser implements Parser\u003cEditGroceryCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditGroceryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_EXPIRY_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    EditGroceryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        EditGroceryItemDescriptor editGroceryItemDescriptor \u003d new EditGroceryItemDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            editGroceryItemDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXPIRY_DATE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            editGroceryItemDescriptor.setExpiryDate("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    ParserUtil.parseExpiryDate(argMultimap.getValue(PREFIX_EXPIRY_DATE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editGroceryItemDescriptor::setTags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!editGroceryItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(EditGroceryCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new EditGroceryCommand(index, editGroceryItemDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 14,
      "kelvinnharris": 66
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/grocerylist/GroceryListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.defaults.ListDefaultCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.defaults.ReminderDefaultCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.defaults.SortDefaultCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.AddGroceryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.DeleteGroceryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.EditGroceryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.ListGroceryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.RedoGroceryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.ReminderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.UndoGroceryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.defaults.ListDefaultCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.defaults.ReminderDefaultCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.defaults.SortDefaultCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class GroceryListParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String LIST_TYPE_WORD \u003d \"glist\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public Command parseCommand(String userInput, IFridgeSettings iFridgeSettings) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case AddGroceryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return new AddGroceryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case ListGroceryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return new ListGroceryCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case EditGroceryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return new EditGroceryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case DeleteGroceryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return new DeleteGroceryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return new ReminderCommandParser().parse(arguments, iFridgeSettings.getNumberOfDays());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"use\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return new UseGroceryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        case ReminderDefaultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return new ReminderDefaultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        case SortDefaultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return new SortDefaultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        case ListDefaultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return new ListDefaultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        case UndoGroceryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return new UndoGroceryCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        case RedoGroceryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return new RedoGroceryCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 21,
      "teika97": 1,
      "zhangxuan97": 18,
      "kelvinnharris": 52
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/grocerylist/ReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.ReminderCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.NameContainsCloseExpiryDatePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Parses input arguments and creates a new ReminderCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class ReminderCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReminderCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * and returns a ReminderCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReminderCommand parse(String args, String def) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        int r;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_REMINDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            r \u003d Integer.valueOf(def);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        } else if (!arePrefixesPresent(argMultimap, PREFIX_REMINDER)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            r \u003d Integer.parseInt(argMultimap.getValue(PREFIX_REMINDER).get().trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return new ReminderCommand(new NameContainsCloseExpiryDatePredicate(r));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 39,
      "zhangxuan97": 9
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/grocerylist/UseGroceryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.grocerylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.UseGroceryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.grocerylist.UseGroceryCommand.UseGroceryItemDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class UseGroceryCommandParser implements Parser\u003cUseGroceryCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public UseGroceryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    UseGroceryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        UseGroceryItemDescriptor useGroceryItemDescriptor \u003d new UseGroceryItemDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            useGroceryItemDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!useGroceryItemDescriptor.isAmountUsed()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new ParseException(UseGroceryCommand.MESSAGE_NOT_USED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new UseGroceryCommand(index, useGroceryItemDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 11,
      "kelvinnharris": 40
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/shoppinglist/AddShoppingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.AddShoppingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class AddShoppingCommandParser implements Parser\u003cAddShoppingCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public AddShoppingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddShoppingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingItem food \u003d new ShoppingItem(name, amount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new AddShoppingCommand(food);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 41,
      "zhangxuan97": 14
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/shoppinglist/BoughtShoppingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.BoughtShoppingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Parses input arguments and creates a new EditShoppingCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class BoughtShoppingCommandParser implements Parser\u003cBoughtShoppingCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BoughtShoppingCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * and returns an BoughtShoppingCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public BoughtShoppingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_EXPIRY_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    BoughtShoppingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!(argMultimap.getValue(PREFIX_EXPIRY_DATE).isPresent()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_AMOUNT).isPresent())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new ParseException(BoughtShoppingCommand.MESSAGE_NOT_PROPER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ExpiryDate expiryDate \u003d ParserUtil.parseExpiryDate(argMultimap.getValue(PREFIX_EXPIRY_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new BoughtShoppingCommand(index, amount, expiryDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 38,
      "zhangxuan97": 13
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/shoppinglist/DeleteShoppingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.DeleteShoppingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Parses input arguments and creates a new DeleteShoppingCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class DeleteShoppingCommandParser implements Parser\u003cDeleteShoppingCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteShoppingCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * and returns a DeleteShoppingCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public DeleteShoppingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return new DeleteShoppingCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteShoppingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 25,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/shoppinglist/EditShoppingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.EditShoppingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.shoppinglist.EditShoppingCommand.EditShoppingItemDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "//to add expiry date functionality later"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Parses input arguments and creates a new EditShoppingCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class EditShoppingCommandParser implements Parser\u003cEditShoppingCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditShoppingCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * and returns an EditShoppingCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public EditShoppingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    EditShoppingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        EditShoppingItemDescriptor editShoppingItemDescriptor \u003d new EditShoppingItemDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            editShoppingItemDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            editShoppingItemDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!editShoppingItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new ParseException(EditShoppingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new EditShoppingCommand(index, editShoppingItemDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 44,
      "zhangxuan97": 12
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/templatelist/AddTemplateListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.AddTemplateListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Parses input arguments and creates a new AddTemplateItemCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class AddTemplateListCommandParser implements Parser\u003cAddTemplateListCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTemplateListCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * and returns an AddTemplateListCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public AddTemplateListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    AddTemplateListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems template \u003d new UniqueTemplateItems(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new AddTemplateListCommand(template);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 41,
      "zhangxuan97": 12
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/templatelist/DeleteTemplateListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.DeleteTemplateListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Parses input arguments and creates a new DeleteTemplateListCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class DeleteTemplateListCommandParser implements Parser\u003cDeleteTemplateListCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTemplateListCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * and returns a DeleteTemplateListCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public DeleteTemplateListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new DeleteTemplateListCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTemplateListCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 24,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/templatelist/EditTemplateListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.EditTemplateListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.EditTemplateListCommand.EditTemplateListDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Parses input arguments and creates a new EditTemplateListCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class EditTemplateListCommandParser implements Parser\u003cEditTemplateListCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTemplateListCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * and returns an EditTemplateListCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    EditTemplateListCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateListDescriptor editTemplateListDescriptor \u003d new EditTemplateListDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editTemplateListDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!editTemplateListDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(EditTemplateListCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new EditTemplateListCommand(index, editTemplateListDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 39,
      "zhangxuan97": 11
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/templatelist/TemplateListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.AddTemplateListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.ClearTemplateListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.DeleteTemplateListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.EditTemplateListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.ListTemplateListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.templatelist.template.TemplateItemParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateListParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String LIST_TYPE_WORD \u003d \"tlist\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case AddTemplateListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new AddTemplateListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case EditTemplateListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new EditTemplateListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case DeleteTemplateListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new DeleteTemplateListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case ClearTemplateListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new ClearTemplateListCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case ListTemplateListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new ListTemplateListCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case TemplateItemParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new TemplateItemParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 57,
      "zhangxuan97": 12
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/templatelist/template/AddTemplateItemCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.AddTemplateItemCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Parses input arguments and creates a new AddTemplateItemCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class AddTemplateItemCommandParser implements Parser\u003cAddTemplateItemCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTemplateItemCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * and returns an AddTemplateItemCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public AddTemplateItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    AddTemplateItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    AddTemplateItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem templateItem \u003d new TemplateItem(name, amount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new AddTemplateItemCommand(index, templateItem);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 52,
      "zhangxuan97": 15
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/templatelist/template/DeleteTemplateItemCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_ITEM_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.DeleteTemplateItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Parses input arguments and creates a new DeleteTemplateItemCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class DeleteTemplateItemCommandParser implements Parser\u003cDeleteTemplateItemCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTemplateItemCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * and returns a DeleteTemplateItemCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public DeleteTemplateItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ITEM_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ITEM_INDEX) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    DeleteTemplateItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index templateIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index itemIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_ITEM_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new DeleteTemplateItemCommand(templateIndex, itemIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 40,
      "zhangxuan97": 11
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/templatelist/template/EditTemplateItemCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_ITEM_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.EditTemplateItemCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.EditTemplateItemCommand.EditTemplateItemDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Parses input arguments and creates a new EditTemplateItemCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class EditTemplateItemCommandParser implements Parser\u003cEditTemplateItemCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTemplateItemCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * and returns an EditTemplateItemCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ITEM_INDEX, PREFIX_NAME, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index templateIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index itemIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "            templateIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    EditTemplateItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        itemIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_ITEM_INDEX).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor editTemplateItemDescriptor \u003d new EditTemplateItemDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editTemplateItemDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editTemplateItemDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!editTemplateItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(EditTemplateItemCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new EditTemplateItemCommand(templateIndex, itemIndex, editTemplateItemDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 56,
      "zhangxuan97": 14
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/templatelist/template/ListTemplateItemCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.ListTemplateItemCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Parses input arguments and creates a new EditTemplateItemCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class ListTemplateItemCommandParser implements Parser\u003cListTemplateItemCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTemplateItemCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * and returns an EditTemplateItemCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ListTemplateItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    ListTemplateItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new ListTemplateItemCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 43,
      "zhangxuan97": 10
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/templatelist/template/TemplateItemParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.AddTemplateItemCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.DeleteTemplateItemCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.EditTemplateItemCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.ListTemplateItemCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateItemParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String LIST_TYPE_WORD \u003d \"template\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case AddTemplateItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new AddTemplateItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case EditTemplateItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new EditTemplateItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case DeleteTemplateItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new DeleteTemplateItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case ListTemplateItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new ListTemplateItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 52,
      "zhangxuan97": 10
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/wastelist/ListWasteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.wastelist.ListWasteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * List command parser to parse the months specified by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class ListWasteCommandParser implements Parser\u003cListWasteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ListWasteCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String args \u003d userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteMonth.getCurrentWasteMonth();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return new ListWasteCommand(WasteMonth.getCurrentWasteMonth());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth wasteMonth;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            wasteMonth \u003d ParserUtil.parseWasteMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    ListWasteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new ListWasteCommand(wasteMonth);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 47
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/wastelist/ReportWasteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_END_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_START_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.wastelist.ReportWasteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Parser to parse the start and end dates of a report command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class ReportWasteCommandParser implements Parser\u003cReportWasteCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final int ONE_PERIOD \u003d 11;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ReportWasteCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_START_MONTH, PREFIX_END_MONTH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Optional\u003cString\u003e startWmString \u003d argMultimap.getValue(PREFIX_START_MONTH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Optional\u003cString\u003e endWmString \u003d argMultimap.getValue(PREFIX_END_MONTH);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean startMonthGiven \u003d startWmString.isPresent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean endMonthGiven \u003d endWmString.isPresent();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth startWasteMonth;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth endWasteMonth;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (startMonthGiven \u0026\u0026 endMonthGiven) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            startWasteMonth \u003d ParserUtil.parseWasteMonth(startWmString.get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            endWasteMonth \u003d ParserUtil.parseWasteMonth(endWmString.get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } else if (startMonthGiven \u0026\u0026 !endMonthGiven) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            startWasteMonth \u003d ParserUtil.parseWasteMonth(startWmString.get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            endWasteMonth \u003d startWasteMonth.addWasteMonth(ONE_PERIOD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } else if (!startMonthGiven \u0026\u0026 endMonthGiven) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            endWasteMonth \u003d ParserUtil.parseWasteMonth(endWmString.get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            startWasteMonth \u003d endWasteMonth.minusWasteMonth(ONE_PERIOD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            endWasteMonth \u003d WasteMonth.getCurrentWasteMonth();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            startWasteMonth \u003d endWasteMonth.minusWasteMonth(ONE_PERIOD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new ReportWasteCommand(startWasteMonth, endWasteMonth, startMonthGiven, endMonthGiven);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 60
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/logic/parser/wastelist/WasteListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.wastelist.FeedbackWasteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.wastelist.FoodWasteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.wastelist.ListWasteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.wastelist.ReportWasteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Waste List Parser to parse the commands that pertains to the waste list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class WasteListParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String LIST_TYPE_WORD \u003d \"wlist\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case FeedbackWasteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return new FeedbackWasteCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case FoodWasteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return new FoodWasteCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case ListWasteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return new ListWasteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case ReportWasteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return new ReportWasteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 62
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/GroceryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueGroceryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class GroceryList implements ReadOnlyGroceryList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final UniqueGroceryList groceryList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList \u003d new UniqueGroceryList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public GroceryList() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Creates a GroceryList using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public GroceryList(ReadOnlyGroceryList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setGroceryList(List\u003cGroceryItem\u003e groceryList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.groceryList.setGroceryList(groceryList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Resets the existing data of this {@code GroceryList} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void resetData(ReadOnlyGroceryList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        setGroceryList(newData.getGroceryList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public boolean hasGroceryItem(GroceryItem groceryItem) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(groceryItem);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return groceryList.contains(groceryItem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void addGroceryItem(GroceryItem p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setGroceryItem(GroceryItem target, GroceryItem editedGroceryItem) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(editedGroceryItem);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList.setGroceryItem(target, editedGroceryItem);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Removes {@code key} from this {@code GroceryList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void removeGroceryItem(Food key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return groceryList.asUnmodifiableObservableList().size() + \" grocery items\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e getGroceryList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return groceryList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                || (other instanceof GroceryList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \u0026\u0026 groceryList.equals(((GroceryList) other).groceryList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return groceryList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "ManasVegi": 8,
      "zhangxuan97": 4,
      "kelvinnharris": 19,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Predicate\u003cGroceryItem\u003e PREDICATE_SHOW_ALL_GROCERY_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Predicate\u003cUniqueTemplateItems\u003e PREDICATE_SHOW_ALL_TEMPLATES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Predicate\u003cUniqueTemplateItems\u003e PREDICATE_SHOW_ALL_TEMPLATES_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Predicate\u003cGroceryItem\u003e PREDICATE_SHOW_ALL_WASTE_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Predicate\u003cShoppingItem\u003e PREDICATE_SHOW_ALL_SHOPPING_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Returns the user prefs\u0027 iFridge settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    IFridgeSettings getIFridgeSettings();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    void setIFridgeSettings(IFridgeSettings iFridgeSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GroceryList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getGroceryListFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void setGroceryListFilePath(Path groceryListFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void setGroceryList(ReadOnlyGroceryList groceryList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /** Returns the GroceryList */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ReadOnlyGroceryList getGroceryList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    boolean hasGroceryItem(GroceryItem food);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void deleteGroceryItem(GroceryItem target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void addGroceryItem(GroceryItem food);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void setGroceryItem(GroceryItem target, GroceryItem editedFood);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    ObservableList\u003cGroceryItem\u003e getFilteredGroceryItemList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    void updateFilteredGroceryItemList(Predicate\u003cGroceryItem\u003e predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    void commitGroceryList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    ReadOnlyGroceryList undoGroceryList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    ReadOnlyGroceryList redoGroceryList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    boolean canUndoGroceryList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    boolean canRedoGroceryList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TemplateList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns the user prefs\u0027 template list file path."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Path getTemplateListFilePath();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Sets the user prefs\u0027 template list file path."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void setTemplateListFilePath(Path templateListFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Replaces template list data with the data in {@code templateList}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void setTemplateList(ReadOnlyTemplateList templateList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /** Returns the TemplateList */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": "    ReadOnlyTemplateList getTemplateList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if a UniqueTemplateItems with the same identity as {@code toAdd} exists in the template list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teika97"
        },
        "content": "    boolean hasTemplate(UniqueTemplateItems toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Deletes the given template."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template must exist in the template list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void deleteTemplate(UniqueTemplateItems target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Adds the given template."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code toAdd} must not already exist in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void addTemplate(UniqueTemplateItems toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Replaces the given template {@code target} with {@code editedTemplate}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code target} must exist in the template list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template identity of {@code editedTemplate} must not be the same as another existing template"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void setTemplate(UniqueTemplateItems target, UniqueTemplateItems editedTemplate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered template list */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teika97"
        },
        "content": "    ObservableList\u003cUniqueTemplateItems\u003e getFilteredTemplateList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Updates the filter of the filtered template list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void updateFilteredTemplateList(Predicate\u003cUniqueTemplateItems\u003e predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void setShownTemplate(UniqueTemplateItems templateToBeShown);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teika97"
        },
        "content": "    ObservableList\u003cTemplateItem\u003e updateFilteredTemplateToBeShown();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teika97"
        },
        "content": "    ObservableList\u003cTemplateItem\u003e getFilteredTemplateToBeShown();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Name getNameTemplateToBeShown();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WasteList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns the user prefs\u0027 waste list file path."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Path getWasteListFilePath();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Sets the user prefs\u0027 waste list file path."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    void setWasteListFilePath(Path wasteListFilePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Replaces waste list data with the data in {@code wasteList}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    void setWasteList(ReadOnlyWasteList wasteList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /** Returns the WasteList */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ReadOnlyWasteList getWasteList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    TreeMap\u003cWasteMonth, WasteList\u003e getWasteArchive();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /** Returns the WasteList for a given month */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ReadOnlyWasteList getWasteListByMonth(WasteMonth wasteMonth);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Adds the given waste item."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    void addWasteItem(GroceryItem toAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered waste list */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ObservableList\u003cGroceryItem\u003e getFilteredWasteItemList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /** Returns an unmodifiable view of a specific month\u0027s filtered waste list */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ObservableList\u003cGroceryItem\u003e getFilteredWasteItemListByMonth(WasteMonth wasteMonth);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Set\u003cWasteMonth\u003e getListOfWasteMonths();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    boolean hasWasteMonth(WasteMonth wasteMonth);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    WasteMonth getEarliestWasteMonth();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    WasteMonth getLatestWasteMonth();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    void updateFilteredWasteItemList(WasteMonth wasteMonth);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    void setWasteReport(WasteReport wasteReport);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    WasteReport getWasteReport();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    void commitWasteList();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    ReadOnlyWasteList undoWasteList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    ReadOnlyWasteList redoWasteList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ShoppingList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the user prefs\u0027 shopping list file path."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getShoppingListFilePath();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Sets the user prefs\u0027 shopping list file path."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void setShoppingListFilePath(Path shoppingListFilePath);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Replaces shopping list data with the data in {@code shoppingList}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void setShoppingList(ReadOnlyShoppingList shoppingList);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /** Returns the TemplateList */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ReadOnlyShoppingList getShoppingList();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns true if a Shopping with the same identity as {@code shoppingItem} exists in the shopping list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    boolean hasShoppingItem(ShoppingItem shoppingItem);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Deletes the given shoppingItem."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * The shoppingItem must exist in the shopping list."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void deleteShoppingItem(ShoppingItem target);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Adds the given shopping item."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * {@code toAdd} must not already exist in the shoppingItem."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void addShoppingItem(ShoppingItem toAdd);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Replaces the given shoppingItem {@code target} with {@code editedShoppingItem}."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * {@code target} must exist in the shopping list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * The template identity of {@code editedShoppingItem} must not be the same as another existing shopping item"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * in the shopping list."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void setShoppingItem(ShoppingItem target, ShoppingItem editedShoppingItem);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered shopping list */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ObservableList\u003cShoppingItem\u003e getFilteredShoppingList();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Updates the filter of the filtered shopping list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void updateFilteredShoppingList(Predicate\u003cShoppingItem\u003e predicate);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BoughtList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the user prefs\u0027 bought list file path."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getBoughtListFilePath();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Sets the user prefs\u0027 bought list file path."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void setBoughtListFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Replaces bought list data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void setBoughtList(ReadOnlyGroceryList boughtList);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /** Returns the BoughtList */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ReadOnlyGroceryList getBoughtList();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns true if a bought item with the same identity as {@code boughtItem} exists in the bought List."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    boolean hasBoughtItem(GroceryItem food);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Deletes the given Bought grocery item."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * The bought item must exist in the bought item."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void deleteBoughtItem(GroceryItem target);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Adds the given Bought grocery item."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * {@code person} must not already exist in the bought list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void addBoughtItem(GroceryItem food);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * {@code target} must exist in the bought list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * The person identity of {@code editedFood} must not be the same as another existing bought item in the boughtList."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void setBoughtItem(GroceryItem target, GroceryItem editedFood);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered bought list */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ObservableList\u003cGroceryItem\u003e getFilteredBoughtItemList();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Updates the filter of the filtered bought list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void updateFilteredBoughtItemList(Predicate\u003cGroceryItem\u003e predicate);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 27,
      "ManasVegi": 111,
      "teika97": 64,
      "zhangxuan97": 63,
      "kelvinnharris": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final GroceryList groceryList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final TemplateList templateList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private WasteList wasteList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final ShoppingList shoppingList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final GroceryList boughtList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final FilteredList\u003cGroceryItem\u003e filteredGroceryItems;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final FilteredList\u003cUniqueTemplateItems\u003e filteredTemplateList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private FilteredList\u003cTemplateItem\u003e filteredShownTemplate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private FilteredList\u003cGroceryItem\u003e filteredWasteItems;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private FilteredList\u003cShoppingItem\u003e filteredShoppingItems;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private FilteredList\u003cGroceryItem\u003e filteredBoughtItems;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private WasteReport wasteReport;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private UniqueTemplateItems shownTemplate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private VersionedGroceryList versionedGroceryList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private VersionedWasteList versionedWasteList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ModelManager(ReadOnlyGroceryList groceryList, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                        ReadOnlyTemplateList templateList, TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        ReadOnlyShoppingList shoppingList, ReadOnlyGroceryList boughtList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireAllNonNull(groceryList, userPrefs, templateList, shoppingList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        logger.fine(\"Initializing with grocery list: \" + groceryList + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \" and template list \" + templateList + \" and shopping list \" + shoppingList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteList.initialiseWasteArchive();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteList.addWasteArchive(wasteArchive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.groceryList \u003d new GroceryList(groceryList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.templateList \u003d new TemplateList(templateList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteList \u003d WasteList.getCurrentWasteList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.shoppingList \u003d new ShoppingList(shoppingList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.boughtList \u003d new GroceryList(boughtList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.shownTemplate \u003d new UniqueTemplateItems(new Name(\"Displayed Template\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        filteredGroceryItems \u003d new FilteredList\u003cGroceryItem\u003e(this.groceryList.getGroceryList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        filteredTemplateList \u003d new FilteredList\u003cUniqueTemplateItems\u003e(this.templateList.getTemplateList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        filteredWasteItems \u003d new FilteredList\u003cGroceryItem\u003e(this.wasteList.getWasteList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        filteredShoppingItems \u003d new FilteredList\u003cShoppingItem\u003e(this.shoppingList.getShoppingList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        filteredBoughtItems \u003d new FilteredList\u003cGroceryItem\u003e(this.boughtList.getGroceryList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        filteredShownTemplate \u003d new FilteredList\u003cTemplateItem\u003e(this.shownTemplate.getTemplate());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        versionedGroceryList \u003d new VersionedGroceryList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        versionedGroceryList.add(groceryList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        versionedWasteList \u003d new VersionedWasteList(wasteList.getWasteMonth());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        versionedWasteList.add(wasteList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this(new GroceryList(), new UserPrefs(), new TemplateList(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                new TreeMap\u003cWasteMonth, WasteList\u003e(), new ShoppingList(), new GroceryList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public IFridgeSettings getIFridgeSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return userPrefs.getIFridgeSettings();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void setIFridgeSettings(IFridgeSettings iFridgeSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        requireNonNull(iFridgeSettings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        userPrefs.setIFridgeSettings(iFridgeSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getGroceryListFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return userPrefs.getGroceryListFilePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setGroceryListFilePath(Path groceryListFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(groceryListFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        userPrefs.setGroceryListFilePath(groceryListFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Path getTemplateListFilePath() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return userPrefs.getTemplateListFilePath();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateListFilePath(Path templateListFilePath) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(templateListFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": "        userPrefs.setTemplateListFilePath(templateListFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Path getWasteListFilePath() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return userPrefs.getWasteArchiveFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void setWasteListFilePath(Path wasteListFilePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireAllNonNull(wasteListFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        userPrefs.setWasteArchiveFilePath(wasteListFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getShoppingListFilePath() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return userPrefs.getShoppingListFilePath();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setShoppingListFilePath(Path shoppingListFilePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireAllNonNull(shoppingListFilePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        userPrefs.setShoppingListFilePath(shoppingListFilePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getBoughtListFilePath() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return userPrefs.getBoughtListFilePath();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setBoughtListFilePath(Path boughtListFilePath) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireAllNonNull(boughtListFilePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        userPrefs.setBoughtListFilePath(boughtListFilePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GroceryList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setGroceryList(ReadOnlyGroceryList groceryList) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.groceryList.resetData(groceryList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ReadOnlyGroceryList getGroceryList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return groceryList;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Check if the in-memory model has the specified grocery item."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param food The grocery item"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns true if the model has the grocery item."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public boolean hasGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return groceryList.hasGroceryItem(food);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void deleteGroceryItem(GroceryItem target) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList.removeGroceryItem(target);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void addGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList.addGroceryItem(food);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        updateFilteredGroceryItemList(PREDICATE_SHOW_ALL_GROCERY_ITEMS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setGroceryItem(GroceryItem target, GroceryItem editedGroceryItem) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireAllNonNull(target, editedGroceryItem);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList.setGroceryItem(target, editedGroceryItem);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void commitGroceryList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        versionedGroceryList.commit(new GroceryList(groceryList));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReadOnlyGroceryList undoGroceryList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return versionedGroceryList.undo();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReadOnlyGroceryList redoGroceryList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return versionedGroceryList.redo();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean canUndoGroceryList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return versionedGroceryList.getCurrentStatePointer() \u003e 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean canRedoGroceryList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return versionedGroceryList.getCurrentStatePointer() \u003c versionedGroceryList.getListSize() - 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e getFilteredGroceryItemList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return filteredGroceryItems;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void updateFilteredGroceryItemList(Predicate\u003cGroceryItem\u003e predicate) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        filteredGroceryItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "teika97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TemplateList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateList(ReadOnlyTemplateList templateList) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.templateList.resetData(templateList);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ReadOnlyTemplateList getTemplateList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templateList;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Check if the in-memory model has the specified template."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param template Template"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @return Returns true if the model has the template."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean hasTemplate(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(template);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templateList.hasTemplate(template);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void deleteTemplate(UniqueTemplateItems target) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateList.removeTemplate(target);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void addTemplate(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateList.addTemplate(template);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "teika97"
        },
        "content": "        updateFilteredTemplateList(PREDICATE_SHOW_ALL_TEMPLATES);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplate(UniqueTemplateItems target, UniqueTemplateItems editedTemplate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireAllNonNull(target, editedTemplate);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateList.setTemplate(target, editedTemplate);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teika97"
        },
        "content": "    // Methods supporting the toBeShown and FilteredTemplateToBeShown"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setShownTemplate(UniqueTemplateItems templateToBeShown) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(templateToBeShown);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems editedTemplate \u003d new UniqueTemplateItems(templateToBeShown.getName());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "teika97"
        },
        "content": "        editedTemplate.setTemplateItems(templateToBeShown);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "teika97"
        },
        "content": "        shownTemplate \u003d editedTemplate;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "teika97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Template List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code UniqueTemplateItems} backed by the internal list of"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code versionedTemplateList}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ObservableList\u003cUniqueTemplateItems\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return filteredTemplateList;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void updateFilteredTemplateList(Predicate\u003cUniqueTemplateItems\u003e predicate) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teika97"
        },
        "content": "        filteredTemplateList.setPredicate(predicate);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ObservableList\u003cTemplateItem\u003e getFilteredTemplateToBeShown() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "teika97"
        },
        "content": "        filteredShownTemplate \u003d new FilteredList\u003cTemplateItem\u003e(this.shownTemplate.getTemplate());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return filteredShownTemplate;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ObservableList\u003cTemplateItem\u003e updateFilteredTemplateToBeShown() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teika97"
        },
        "content": "        filteredShownTemplate \u003d new FilteredList\u003cTemplateItem\u003e(this.shownTemplate.getTemplate());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return filteredShownTemplate;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Name getNameTemplateToBeShown() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return shownTemplate.getName();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WasteList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void setWasteList(ReadOnlyWasteList wasteList) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteList.resetData(wasteList);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ReadOnlyWasteList getWasteList() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth currentWasteMonth \u003d new WasteMonth(LocalDate.now());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (currentWasteMonth.equals(wasteList.getWasteMonth())) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return wasteList;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            // Creates a new waste list, updates"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteList newMonthWasteList \u003d new WasteList(currentWasteMonth);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            this.wasteList \u003d newMonthWasteList;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteList.addWastelistToArchive(currentWasteMonth, newMonthWasteList);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteList;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public TreeMap\u003cWasteMonth, WasteList\u003e getWasteArchive() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return WasteList.getWasteArchive();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ReadOnlyWasteList getWasteListByMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return WasteList.getWasteListByMonth(wasteMonth);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void addWasteItem(GroceryItem food) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteList.addWasteItem(food);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        updateFilteredWasteItemList(WasteMonth.getCurrentWasteMonth());"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void commitWasteList() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        versionedWasteList.commit(new WasteList(wasteList, wasteList.getWasteMonth()));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReadOnlyWasteList undoWasteList() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return versionedWasteList.undo();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReadOnlyWasteList redoWasteList() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return versionedWasteList.redo();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Waste List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e getFilteredWasteItemList() {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return filteredWasteItems;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void updateFilteredWasteItemList(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(wasteMonth);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteList wasteListForMonth \u003d WasteList.getWasteListByMonth(wasteMonth);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        filteredWasteItems \u003d new FilteredList\u003c\u003e(wasteListForMonth.getWasteList());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e getFilteredWasteItemListByMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        ReadOnlyWasteList wasteListForMonth \u003d WasteList.getWasteListByMonth(wasteMonth);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        FilteredList\u003cGroceryItem\u003e monthWasteItems \u003d new FilteredList\u003cGroceryItem\u003e(wasteListForMonth.getWasteList());"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return monthWasteItems;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Set\u003cWasteMonth\u003e getListOfWasteMonths() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return WasteList.getWasteArchive().keySet();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public boolean hasWasteMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return WasteList.getWasteArchive().containsKey(wasteMonth);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth getEarliestWasteMonth() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return WasteList.getWasteArchive().firstKey();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth getLatestWasteMonth() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return WasteList.getWasteArchive().lastKey();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Waste Report Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteReport getWasteReport() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(this.wasteReport);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return this.wasteReport;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void setWasteReport(WasteReport wasteReport) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(wasteReport);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteReport \u003d wasteReport;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ShoppingList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setShoppingList(ReadOnlyShoppingList shoppingList) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.shoppingList.resetData(shoppingList);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ReadOnlyShoppingList getShoppingList() {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingList;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Check if the in-memory model has the specified shopping item."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param shoppingItem The shopping item"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return Returns true if the model has the shopping item."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean hasShoppingItem(ShoppingItem shoppingItem) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(shoppingItem);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingList.hasShoppingItem(shoppingItem);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void deleteShoppingItem(ShoppingItem target) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingList.removeShoppingItem(target);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void addShoppingItem(ShoppingItem food) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingList.addShoppingItem(food);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        updateFilteredShoppingList(PREDICATE_SHOW_ALL_SHOPPING_ITEMS);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setShoppingItem(ShoppingItem target, ShoppingItem editedShoppingItem) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireAllNonNull(target, editedShoppingItem);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingList.setShoppingItem(target, editedShoppingItem);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Shopping List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ShoppingItem} backed by the internal list of"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * {@code versionedShoppingList}"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ObservableList\u003cShoppingItem\u003e getFilteredShoppingList() {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return filteredShoppingItems;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void updateFilteredShoppingList(Predicate\u003cShoppingItem\u003e predicate) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        filteredShoppingItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BoughtList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setBoughtList(ReadOnlyGroceryList boughtList) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.boughtList.resetData(boughtList);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ReadOnlyGroceryList getBoughtList() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return boughtList;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Check if the in-memory model has the specified bought grocery item."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param food The grocery item"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return Returns true if the model has the bought grocery item."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean hasBoughtItem(GroceryItem food) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return boughtList.hasGroceryItem(food);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void deleteBoughtItem(GroceryItem target) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        boughtList.removeGroceryItem(target);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void addBoughtItem(GroceryItem food) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        boughtList.addGroceryItem(food);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        updateFilteredBoughtItemList(PREDICATE_SHOW_ALL_GROCERY_ITEMS);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setBoughtItem(GroceryItem target, GroceryItem editedFood) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        boughtList.setGroceryItem(target, editedFood);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Grocery Item} backed by the internal list of"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e getFilteredBoughtItemList() {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return filteredBoughtItems;"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void updateFilteredBoughtItemList(Predicate\u003cGroceryItem\u003e predicate) {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        filteredBoughtItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "teika97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Common Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return groceryList.equals(other.groceryList)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 templateList.equals(other.templateList)"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 filteredGroceryItems.equals(other.filteredGroceryItems)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                \u0026\u0026 filteredTemplateList.equals(other.filteredTemplateList)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 filteredWasteItems.equals(other.filteredWasteItems)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 filteredShoppingItems.equals(other.filteredShoppingItems)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 filteredShownTemplate.equals(other.filteredShownTemplate);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 59,
      "ManasVegi": 160,
      "teika97": 108,
      "zhangxuan97": 133,
      "kelvinnharris": 26,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/ReadOnlyGroceryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public interface ReadOnlyGroceryList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    ObservableList\u003cGroceryItem\u003e getGroceryList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "kelvinnharris": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/ReadOnlyShoppingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public interface ReadOnlyShoppingList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns an unmodifiable view of the shopping list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * This list will not contain any duplicate shopping items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ObservableList\u003cShoppingItem\u003e getShoppingList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 15,
      "zhangxuan97": 2
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/ReadOnlyTemplateList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Unmodifiable view of an template"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "public interface ReadOnlyTemplateList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns an unmodifiable view of the template items list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * This list will not contain any duplicate template items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    ObservableList\u003cUniqueTemplateItems\u003e getTemplateList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 16,
      "zhangxuan97": 2
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    IFridgeSettings getIFridgeSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getGroceryListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Path getWasteArchiveFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getShoppingListFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getBoughtListFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "ManasVegi": 5,
      "zhangxuan97": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/ReadOnlyWasteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteStatistic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Unmodifiable view of a waste list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public interface ReadOnlyWasteList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns an unmodifiable view of the waste list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    ObservableList\u003cGroceryItem\u003e getWasteList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    WasteMonth getWasteMonth();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    WasteStatistic getWasteStatistic();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 22
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/ShoppingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueShoppingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ShoppingList implements ReadOnlyShoppingList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final UniqueShoppingList shoppingItems;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingItems \u003d new UniqueShoppingList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates an GroceryList using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingList(ReadOnlyShoppingList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setShoppingItems(List\u003cShoppingItem\u003e foods) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.shoppingItems.setShoppingItems(foods);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Resets the existing data of this {@code GroceryList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void resetData(ReadOnlyShoppingList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        setShoppingItems(newData.getShoppingList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean hasShoppingItem(ShoppingItem shoppingItem) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(shoppingItem);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingItems.contains(shoppingItem);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void addShoppingItem(ShoppingItem p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingItems.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setShoppingItem(ShoppingItem target, ShoppingItem editedShoppingItem) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(editedShoppingItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingItems.setShoppingItem(target, editedShoppingItem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Removes {@code key} from this {@code GroceryList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void removeShoppingItem(ShoppingItem key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingItems.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingItems.asUnmodifiableObservableList().size() + \" shoppingItems\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ObservableList\u003cShoppingItem\u003e getShoppingList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingItems.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                || (other instanceof ShoppingList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 shoppingItems.equals(((ShoppingList) other).shoppingItems));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingItems.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 28,
      "zhangxuan97": 3,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/TemplateList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Wraps all data at the template list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Duplicates are not allowed (by .isSameFood comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateList implements ReadOnlyTemplateList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final UniqueTemplateList templates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templates \u003d new UniqueTemplateList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Creates an TemplateList using the UniqueTemplateItems in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateList(ReadOnlyTemplateList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Replaces the contents of the template list with {@code foods}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code foods} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplates(List\u003cUniqueTemplateItems\u003e templates) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.templates.setTemplates(templates);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Resets the existing data of this {@code TemplateList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void resetData(ReadOnlyTemplateList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        setTemplates(newData.getTemplateList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    //// uniqueTemplateItems-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if a template with the same identity as {@code template} exists in the template list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean hasTemplate(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(template);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templates.contains(template);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Adds a template to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template must not already exist in the templateList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void addTemplate(UniqueTemplateItems t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templates.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Replaces the given template in {@code target} in the list with {@code editedTemplate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code target} must exist in the template list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template identity of {@code editedTemplate} must not be the same as another existing template in the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * template list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplate(UniqueTemplateItems target, UniqueTemplateItems editedTemplate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(editedTemplate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templates.setTemplate(target, editedTemplate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Removes {@code key} from this {@code TemplateList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code key} must exist in the template list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void removeTemplate(UniqueTemplateItems key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templates.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templates.asUnmodifiableObservableList().size() + \" templates\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ObservableList\u003cUniqueTemplateItems\u003e getTemplateList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templates.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": "                || (other instanceof TemplateList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 templates.equals(((TemplateList) other).templates));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templates.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 118,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Path groceryListFilePath \u003d Paths.get(\"data\" , \"grocerylist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Path templateListFilePath \u003d Paths.get(\"data\" , \"templateList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private Path wasteArchiveFilePath \u003d Paths.get(\"data\", \"wastearchive.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Path shoppingListFilePath \u003d Paths.get(\"data\", \"shoppingList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Path boughtListFilePath \u003d Paths.get(\"data\", \"boughtList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private IFridgeSettings iFridgeSettings \u003d new IFridgeSettings();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        setIFridgeSettings(newUserPrefs.getIFridgeSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        setGroceryListFilePath(newUserPrefs.getGroceryListFilePath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        setWasteArchiveFilePath(newUserPrefs.getWasteArchiveFilePath());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public IFridgeSettings getIFridgeSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return iFridgeSettings;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void setIFridgeSettings(IFridgeSettings iFridgeSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        requireNonNull(iFridgeSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.iFridgeSettings \u003d iFridgeSettings;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getGroceryListFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return groceryListFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setGroceryListFilePath(Path groceryListFilePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(groceryListFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.groceryListFilePath \u003d groceryListFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Path getTemplateListFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templateListFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateListFilePath(Path templateListFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(templateListFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.templateListFilePath \u003d templateListFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Path getWasteArchiveFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteArchiveFilePath;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void setWasteArchiveFilePath(Path wasteArchiveFilePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(wasteArchiveFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteArchiveFilePath \u003d wasteArchiveFilePath;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getShoppingListFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingListFilePath;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setShoppingListFilePath(Path shoppingListFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(shoppingListFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.shoppingListFilePath \u003d shoppingListFilePath;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getBoughtListFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return boughtListFilePath;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setBoughtListFilePath(Path boughtListFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(boughtListFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.boughtListFilePath \u003d boughtListFilePath;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 groceryListFilePath.equals(o.groceryListFilePath)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                \u0026\u0026 templateListFilePath.equals(o.templateListFilePath)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                \u0026\u0026 wasteArchiveFilePath.equals(o.wasteArchiveFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return Objects.hash(guiSettings, groceryListFilePath, templateListFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        sb.append(\"\\nIFridge settings : \" + iFridgeSettings);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        sb.append(\"\\nLocal data file location (GroceryList): \" + groceryListFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": "        sb.append(\"\\nLocal data file location (TemplateList): \" + templateListFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        sb.append(\"\\nLocal data file location (WasteList): \" + wasteArchiveFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 15,
      "ManasVegi": 30,
      "teika97": 11,
      "zhangxuan97": 17,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/VersionedGroceryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Facilitates undo and redo mechanism in grocery list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class VersionedGroceryList extends GroceryList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private List\u003cReadOnlyGroceryList\u003e groceryListStateList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private int currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public VersionedGroceryList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        groceryListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Saves the current grocery list state in its history."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void commit(ReadOnlyGroceryList groceryList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        int listSize \u003d groceryListStateList.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        for (int i \u003d currentStatePointer; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            groceryListStateList.remove(i);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        groceryListStateList.add(currentStatePointer, groceryList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Restores the previous grocery list state from its history."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReadOnlyGroceryList undo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return groceryListStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     *  Restores a previously undone grocery list state from its history."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReadOnlyGroceryList redo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return groceryListStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public int getCurrentStatePointer() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return currentStatePointer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return groceryListStateList.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void add(ReadOnlyGroceryList groceryList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        groceryListStateList.add(groceryList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 56
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/VersionedWasteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Facilitates undo and redo mechanism in waste list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class VersionedWasteList extends WasteList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private List\u003cReadOnlyWasteList\u003e wasteListStateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private int currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public VersionedWasteList(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        super(wasteMonth);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        wasteListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Saves the current waste list state in its history."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void commit(ReadOnlyWasteList wasteList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        int listSize \u003d wasteListStateList.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        for (int i \u003d currentStatePointer; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            wasteListStateList.remove(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        wasteListStateList.add(wasteList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Restores the previous waste list state from its history."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReadOnlyWasteList undo() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return wasteListStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     *  Restores a previously undone waste list state from its history."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ReadOnlyWasteList redo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return wasteListStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public void add(ReadOnlyWasteList wasteList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        wasteListStateList.add(wasteList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 51
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/WasteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueWasteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteStatistic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Wraps all data at the Waste List level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class WasteList implements ReadOnlyWasteList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static WasteMonth currentWasteMonth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private final UniqueWasteList wasteList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteList(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteList \u003d new UniqueWasteList(wasteMonth);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Creates a WasteList using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteList(ReadOnlyWasteList toBeCopied, WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this(wasteMonth);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    //// Waste List overwrite options"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Replaces the contents of the waste list with {@code foods}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void setWasteList(List\u003cGroceryItem\u003e foods) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.wasteList.setGroceryList(foods);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Resets the existing data of this {@code WasteList} with {@code newData}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void resetData(ReadOnlyWasteList newData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        setWasteList(newData.getWasteList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    //// Food-level operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public boolean hasWasteItem(GroceryItem food) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteList.contains(food);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Adds a grocery item to the waste list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void addWasteItem(GroceryItem p) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteList.add(p);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e getWasteList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteStatistic getWasteStatistic() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return WasteStatistic.getWasteStatistic(this.wasteList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth getWasteMonth() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteList.getWasteMonth();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    //// Waste List Archive operations"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * To initialize a waste list archive."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static void initialiseWasteArchive() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (wasteArchive !\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteArchive \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        /*******************************************************************"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "         * REMOVE THIS BOTTOM LINE LATER"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        currentWasteMonth \u003d new WasteMonth(LocalDate.now());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Getter method for waste archive."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return the waste archive."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static TreeMap\u003cWasteMonth, WasteList\u003e getWasteArchive() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteArchive;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Adds a food item to the waste list archive for a given waste month."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param item the food item to be added"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param wm the waste month in concern"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static void addFoodItemToArchive(GroceryItem item, WasteMonth wm) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (!wasteArchive.containsKey(wm)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            createNewWasteMonth(wm);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteList archivedWasteList \u003d wasteArchive.get(wm);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        archivedWasteList.addWasteItem(item);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Creates a new waste month, unique food list key-value pair in wasteArchive."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param wm the waste month to be created"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static void createNewWasteMonth(WasteMonth wm) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteArchive.put(wm, new WasteList(wm));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static void addWastelistToArchive(WasteMonth wm, WasteList wasteList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteArchive.put(wm, wasteList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static void addWasteArchive(TreeMap\u003cWasteMonth, WasteList\u003e existingWasteArchive) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteArchive.putAll(existingWasteArchive);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns the current waste list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return the current waste list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteList getCurrentWasteList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth currentWasteMonth \u003d new WasteMonth(LocalDate.now());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (wasteArchive.containsKey(currentWasteMonth)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return wasteArchive.get(currentWasteMonth);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteList wasteList \u003d new WasteList(currentWasteMonth);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            addWastelistToArchive(currentWasteMonth, wasteList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return wasteList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteList getWasteListByMonth(WasteMonth wm) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteArchive.get(wm);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteMonth getEarliestExistingWasteMonth() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteArchive.firstKey();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteMonth getLatestExistingWasteMonth() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteArchive.lastKey();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteStatistic getCurrentMonthPredictedWasteStatistic() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteStatistic currentMonthStatistic \u003d getCurrentWasteList().getWasteStatistic();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteStatistic previousOneMonth \u003d getWasteListByMonth(new WasteMonth(today.minusMonths(1)))"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                .getWasteStatistic();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteStatistic previousTwoMonth \u003d getWasteListByMonth(new WasteMonth(today.minusMonths(2)))"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                .getWasteStatistic();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteStatistic previousThreeMonth \u003d getWasteListByMonth(new WasteMonth(today.minusMonths(3)))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                .getWasteStatistic();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return WasteStatistic.getPredictedWasteStatistic(currentMonthStatistic,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                previousOneMonth, previousTwoMonth, previousThreeMonth);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 184,
      "kelvinnharris": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Represents a Food\u0027s amount in the grocery list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Amounts should be of the format value unit \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"1. The value part should only contain digits and can have be decimal point or not.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"2. This is followed by a unit that can have a space in between or not. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"The unit must be one of the following: \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "            + \"    - lbs, kgs, g, pounds, oz, L, ml, units.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String VALUE_BEFORE_DECIMAL \u003d \"(\\\\d*)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String VALUE_AFTER_DECIMAL \u003d \"(\\\\d+)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String UNIT_POUND \u003d \"lb\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String UNIT_KILOGRAM \u003d \"kg\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String UNIT_GRAM \u003d \"g\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String UNIT_OUNCE \u003d \"oz\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String UNIT_LITRE \u003d \"l\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String UNIT_MILLILITRE \u003d \"ml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String UNIT_QUANTITY \u003d \"units\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String UNIT \u003d \"(lbs?|g|kg|oz?|L|ml|units?)+\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d VALUE_BEFORE_DECIMAL + \"\\\\.?\" + VALUE_AFTER_DECIMAL + \"\\\\s*\" + UNIT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final float KG_FROM_GRAM \u003d 0.001f;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final float KG_FROM_POUND \u003d 0.453592f;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final float KG_FROM_OUNCE \u003d 0.0283495f;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final float LITRE_FROM_MILLILITRE \u003d 0.001f;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static Pattern p \u003d Pattern.compile(\"(\\\\d*\\\\.?\\\\d+)(\\\\s*)((lbs?|g|kg|oz?|L|ml|units?)+)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static Matcher m;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public final String fullAmt;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        fullAmt \u003d amount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Tests whether an input amount is valid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param test The input amount as a {@code String}/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return true if the input amount is valid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Retrieves the numerical value of an {@code Amount} object, without the units"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param amt The {@code Amount} object to get the value from."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return The numerical value of the given Amount object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static float getValue(Amount amt) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        m \u003d p.matcher(amt.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String valueAsString \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        m.find();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        valueAsString \u003d m.group(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return Float.valueOf(valueAsString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Retrieves the unit of an {@code Amount} object, without the numerical value"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param amt The {@code Amount} object to get the unit from."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return The unit of the Amount object in String format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static String getUnit(Amount amt) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "        m \u003d p.matcher(amt.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String unit \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        m.find();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "        unit \u003d m.group(3);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Retrieves the weight of the Amount object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param amt The Amount object to get the weight from."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return The weight of the given Amount object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static float getAmountInKg(Amount amt) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String unit \u003d getUnit(amt);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float value \u003d getValue(amt);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        switch (unit) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case UNIT_KILOGRAM:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case UNIT_GRAM:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return value * KG_FROM_GRAM;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case UNIT_POUND:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return value * KG_FROM_POUND;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case UNIT_OUNCE:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return value * KG_FROM_OUNCE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Retrieves the volume of the Amount object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param amt The Amount object to get the volume from."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return The volume of the given Amount object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static float getAmountInLitre(Amount amt) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String unit \u003d getUnit(amt);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float value \u003d getValue(amt);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        switch (unit) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case UNIT_LITRE:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        case UNIT_MILLILITRE:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return value * LITRE_FROM_MILLILITRE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Retrieves the number of units specified in the Amount object."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param amt The Amount object to get the number of units from."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return The number of units specified in the given Amount object."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static float getAmountInUnit(Amount amt) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String unit \u003d getUnit(amt);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float value \u003d getValue(amt);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return unit.equals(UNIT_QUANTITY) ? value : 0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Reduces the value of amount by the specified amount"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param amt the Amount class to be reduced by"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns Amount with its value deducted"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Amount reduceBy(Amount amt) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        float resultantAmount \u003d Amount.getValue(this) - Amount.getValue(amt);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String unit \u003d Amount.getUnit(this);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new Amount(resultantAmount + unit);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Increases the value of amount by the specified amount"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param amt the Amount to be increased by"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return Returns Amount with its value increased"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Amount increaseBy(Amount amt) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        float resultantAmount \u003d Amount.getValue(this) + Amount.getValue(amt);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String unit \u003d Amount.getUnit(this);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new Amount(resultantAmount + unit);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return fullAmt;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return fullAmt.hashCode();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 11,
      "teika97": 71,
      "zhangxuan97": 90,
      "kelvinnharris": 12
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/ExpiryDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Represents a Food\u0027s expiry date in the lists."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExpiryDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class ExpiryDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            \"Expiry date should be valid and follow the format dd/MM/yyyy, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Regex that works on all valid date with format dd/MM/yyyy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?:(?:31(\\\\/)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/)\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            + \"(\\\\/)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public final String expiryDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructs a {@code ExpiryDate}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param expiryDate A valid expiry date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        checkArgument(isValidExpiryDate(expiryDate), ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns true if a given string is a valid expiry date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static boolean isValidExpiryDate(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                || (other instanceof ExpiryDate // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \u0026\u0026 expiryDate.equals(((ExpiryDate) other).expiryDate)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return expiryDate.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "kelvinnharris": 57
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/Food.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Food(Name name, Amount amount) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //this.tags.addAll(tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // * if modification is attempted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //    return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public boolean isSameFood(Food otherFood) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \u0026\u0026 otherFood.getName().equals(getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return Objects.hash(name, amount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //        .append(\" Tags: \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 14,
      "zhangxuan97": 2,
      "kelvinnharris": 11,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/GroceryItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Represents a grocery item."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class GroceryItem extends Food {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItem(Name name, Amount amount, ExpiryDate expiryDate, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(name, amount);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ExpiryDate getExpiryDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return Amount.getValue(getAmount()) \u003d\u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return Objects.hash(this.getName(), this.getAmount(), this.getExpiryDate(), this.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean isSameFood(Food anotherFood) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!(anotherFood instanceof GroceryItem)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return this.getName().equals(anotherFood.getName())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    \u0026\u0026 this.expiryDate.equals(((GroceryItem) anotherFood).expiryDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        builder.append(\"Name:\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .append(\" Amount:\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .append(\" ExpiryDate:\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .append(getExpiryDate())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .append(\" Tags:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 23,
      "zhangxuan97": 6,
      "kelvinnharris": 40
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/NameContainsCloseExpiryDatePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class NameContainsCloseExpiryDatePredicate implements Predicate\u003cGroceryItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private final int numberOfDays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public NameContainsCloseExpiryDatePredicate(int numberOfDays) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.numberOfDays \u003d numberOfDays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean test(GroceryItem groceryItem) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        String temp \u003d groceryItem.getExpiryDate().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(temp);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return isExpiring(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Checks if an item has expired or is expiring.\\"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * @param date expiry date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean isExpiring(Date date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        Date current \u003d cal.getTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        int diffDays \u003d (int) ((date.getTime() - current.getTime()) / (24 * 60 * 60 * 1000));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return diffDays \u003c\u003d numberOfDays || date.before(current);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 45,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cGroceryItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean test(GroceryItem groceryItem) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(groceryItem.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 3,
      "zhangxuan97": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/ShoppingItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Represents a shopping item."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ShoppingItem extends Food {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final boolean bought;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final boolean urgent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //private final ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItem(Name name, Amount amount) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(name, amount);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        bought \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        urgent \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItem(Name name, Amount amount, boolean isBought, boolean isUrgent) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(name, amount);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.bought \u003d isBought;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.urgent \u003d isUrgent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //this.expiryDate \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean isBought() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return this.bought;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean isUrgent() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return this.urgent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItem setBought(boolean bought) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new ShoppingItem(this.getName(), this.getAmount(), bought, this.isUrgent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItem setUrgent(boolean urgent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new ShoppingItem(this.getName(), this.getAmount(), this.isBought(), urgent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public GroceryItem getBoughtItem(Amount amount, ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new GroceryItem(this.getName(), amount, expiryDate, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return Objects.hash(this.getName(), this.getAmount(), this.isBought(), this.isUrgent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                .append(\" isBought: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                .append(this.bought)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                .append(\" isUrgent: \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                .append(this.urgent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 64,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/TemplateItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Represents a TemplateList item in the template list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateItem implements Comparable\u003cTemplateItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItem(Name name, Amount amount) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if both food items are of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * This defines a weaker notion of equality between two food items."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean isSameFood(TemplateItem otherFood) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 otherFood.getName().equals(getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return Objects.hash(name, amount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        builder.append(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        builder.append(getAmount());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public int compareTo(TemplateItem other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String thisName \u003d this.getName().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String otherName \u003d this.getName().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return thisName.compareTo(otherName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 69,
      "zhangxuan97": 2
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/UniqueGroceryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class UniqueGroceryList implements Iterable\u003cGroceryItem\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final ObservableList\u003cGroceryItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final ObservableList\u003cGroceryItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public boolean contains(GroceryItem toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void add(GroceryItem toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setGroceryItem(GroceryItem target, GroceryItem editedGroceryItem) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireAllNonNull(target, editedGroceryItem);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        internalList.set(index, editedGroceryItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setGroceryList(UniqueGroceryList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setGroceryList(List\u003cGroceryItem\u003e foods) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ObservableList\u003cGroceryItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Iterator\u003cGroceryItem\u003e iterator() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                || (other instanceof UniqueGroceryList // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueGroceryList) other).internalList));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private boolean personsAreUnique(List\u003cGroceryItem\u003e foods) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "kelvinnharris": 25,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/UniqueShoppingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.exceptions.DuplicateShoppingItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class UniqueShoppingList implements Iterable\u003cShoppingItem\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final ObservableList\u003cShoppingItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final ObservableList\u003cShoppingItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean contains(ShoppingItem toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void add(ShoppingItem toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new DuplicateShoppingItemException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setShoppingItem(ShoppingItem target, ShoppingItem editedShoppingItem) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireAllNonNull(target, editedShoppingItem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!target.isSameFood(editedShoppingItem) \u0026\u0026 contains(editedShoppingItem)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new DuplicateShoppingItemException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        internalList.set(index, editedShoppingItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void remove(ShoppingItem toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setShoppingItems(UniqueShoppingList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setShoppingItems(List\u003cShoppingItem\u003e shoppingItems) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireAllNonNull(shoppingItems);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!shoppingItemsAreUnique(shoppingItems)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new DuplicateShoppingItemException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        internalList.setAll(shoppingItems);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ObservableList\u003cShoppingItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Iterator\u003cShoppingItem\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                || (other instanceof UniqueShoppingList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueShoppingList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private boolean shoppingItemsAreUnique(List\u003cShoppingItem\u003e shoppingItems) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (int i \u003d 0; i \u003c shoppingItems.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            for (int j \u003d i + 1; j \u003c shoppingItems.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                if (shoppingItems.get(i).isSameFood(shoppingItems.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 133,
      "zhangxuan97": 4
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/UniqueTemplateItems.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A list of template items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A template item is considered unique by comparing using {@code Food#isSameFood(Food)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": " * updating of template items uses Food#isSameFood(Food) for equality so as to ensure that the template item being"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueTemplateItems. However, the removal of a template item"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": " * uses Food#equals(Food) so as to ensure that the template item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class UniqueTemplateItems implements Iterable\u003cTemplateItem\u003e, Comparable\u003cUniqueTemplateItems\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final ObservableList\u003cTemplateItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final ObservableList\u003cTemplateItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Name field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public UniqueTemplateItems(Name name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean contains(TemplateItem toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Adds a template item to the template list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template item must not already exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void add(TemplateItem toAdd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Replaces the template item {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template item identity of {@code editedFood} must not be the same as another existing template item"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItem(TemplateItem target, TemplateItem editedFood) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Removes the equivalent template item from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template item must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void remove(TemplateItem toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItems(UniqueTemplateItems replacement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code foods} must not contain duplicate food items."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItems(List\u003cTemplateItem\u003e foods) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!foodItemsAreUnique(foods)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ObservableList\u003cTemplateItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Iterator\u003cTemplateItem\u003e iterator() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": "                || (other instanceof UniqueTemplateItems // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTemplateItems) other).internalList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if both templates of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * This defines a weaker notion of equality between two templates."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean isSameTemplate(UniqueTemplateItems otherTemplate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (otherTemplate \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return otherTemplate !\u003d null"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 otherTemplate.getName().equals(getName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if {@code foods} contains only unique food items."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private boolean foodItemsAreUnique(List\u003cTemplateItem\u003e foods) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teika97"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teika97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teika97"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teika97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teika97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItem get(int index) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ObservableList\u003cTemplateItem\u003e getTemplate() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teika97"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teika97"
        },
        "content": "        builder.append(\" with \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teika97"
        },
        "content": "        builder.append(getSize());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teika97"
        },
        "content": "        builder.append(\" items.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public int compareTo(UniqueTemplateItems other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String thisName \u003d this.getName().toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String otherName \u003d other.getName().toString();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return thisName.compareTo(otherName);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 195,
      "zhangxuan97": 4
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/UniqueTemplateList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.exceptions.DuplicateTemplateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.exceptions.TemplateNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A list of templates that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A template is considered unique by comparing using {@code UniqueTemplateItems#isSameTemplate(UniqueTemplateItems)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": " * As such, adding and updating of templates uses UniqueTemplateItems#isSameTemplate(UniqueTemplateItems) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": " * so as to ensure that the template being added or updated is unique in terms of identity in the UniqueTemplateList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": " * However, the removal of a template uses TemplateList#equals(Object) so as to ensure that the template with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": " * @see UniqueTemplateItems#isSameTemplate(UniqueTemplateItems)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class UniqueTemplateList implements Iterable\u003cUniqueTemplateItems\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final ObservableList\u003cUniqueTemplateItems\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final ObservableList\u003cUniqueTemplateItems\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if the list contains an equivalent template as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean contains(UniqueTemplateItems toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTemplate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Adds a template to the template list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void add(UniqueTemplateItems toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new DuplicateTemplateException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Replaces the template {@code target} in the list with {@code editedTemplate}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template identity of {@code editedTemplate} must not be the same as another existing template in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplate(UniqueTemplateItems target, UniqueTemplateItems editedTemplate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireAllNonNull(target, editedTemplate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new TemplateNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!target.isSameTemplate(editedTemplate) \u0026\u0026 contains(editedTemplate)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new DuplicateTemplateException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        internalList.set(index, editedTemplate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplates(UniqueTemplateList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Replaces the contents of this list with {@code templates}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code templates} must not contain duplicate food templates."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplates(List\u003cUniqueTemplateItems\u003e templates) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireAllNonNull(templates);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!templatesAreUnique(templates)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new DuplicateTemplateException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        internalList.setAll(templates);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Removes the equivalent template from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * The template must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void remove(UniqueTemplateItems toRemove) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new TemplateNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public ObservableList\u003cUniqueTemplateItems\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Iterator\u003cUniqueTemplateItems\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "                || (other instanceof UniqueTemplateList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTemplateList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns true if {@code templates} contains only unique templates."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private boolean templatesAreUnique(List\u003cUniqueTemplateItems\u003e templates) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": "        for (int i \u003d 0; i \u003c templates.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c templates.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "                if (templates.get(i).isSameTemplate(templates.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teika97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 137,
      "zhangxuan97": 4
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/UniqueWasteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * A waste list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class UniqueWasteList extends UniqueGroceryList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private final WasteMonth wasteMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public UniqueWasteList(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(wasteMonth);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteMonth \u003d wasteMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth getWasteMonth() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteMonth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 22,
      "kelvinnharris": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(\"Operation would result in duplicate food items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "kelvinnharris": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/exceptions/DuplicateShoppingItemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class DuplicateShoppingItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public DuplicateShoppingItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(\"Operation would result in duplicate food items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 10,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/exceptions/DuplicateTemplateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Signals that the operation will result in duplicate Templates (Templates are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class DuplicateTemplateException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public DuplicateTemplateException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "        super(\"Operation would result in duplicate templates\"); }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 9,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "kelvinnharris": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/exceptions/ShoppingItemNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ShoppingItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItemNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(\"Shopping item is not found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 9,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/food/exceptions/TemplateNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Signals that the operation is unable to find the specified template."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "teika97": 5,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        checkArgument(isValidTagName(tagName), Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "kelvinnharris": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ShoppingList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Contains utility methods for populating {@code GroceryList} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Grocery Item Sample List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static GroceryItem[] getSampleGroceryItems() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new GroceryItem[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Minced beef\"), new Amount(\"300g\"), new ExpiryDate(\"30/09/2019\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    getTagSet(\"meat\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Spaghetti\"), new Amount(\"1unit\"), new ExpiryDate(\"20/11/2019\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    getTagSet(\"dish\", \"dinner\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Apples\"), new Amount(\"6units\"), new ExpiryDate(\"15/10/2019\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    getTagSet(\"healthy\", \"fruit\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Orange juice\"), new Amount(\"500ml\"), new ExpiryDate(\"22/11/2019\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    getTagSet(\"juice\", \"diet\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Green tea latte\"), new Amount(\"10units\"), new ExpiryDate(\"30/10/2019\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    getTagSet(\"drink\", \"boba\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static ReadOnlyGroceryList getSampleGroceryList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryList sampleGl \u003d new GroceryList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (GroceryItem groceryItem : getSampleGroceryItems()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            sampleGl.addGroceryItem(groceryItem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return sampleGl;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Waste List Sample \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Generates sample of past 12 months"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return WasteMonth array of past 12 months"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteMonth[] getSampleWasteMonths() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth[] wasteMonths \u003d new WasteMonth[12];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteMonths[0] \u003d new WasteMonth(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 11; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            wasteMonths[i] \u003d new WasteMonth(date.minusMonths(i));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteMonths;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static GroceryItem[] getSampleWasteItems() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new GroceryItem[] {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Salmon\"), new Amount(\"300g\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/10/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Apples\"), new Amount(\"2units\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/10/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"100ml\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/10/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Potatoes\"), new Amount(\"1500g\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/09/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Oranges\"), new Amount(\"3units\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/09/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"200ml\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/09/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Chicken\"), new Amount(\"400g\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/08/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Pears\"), new Amount(\"3units\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/08/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"150ml\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/08/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Salmon\"), new Amount(\"800g\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/07/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Grapes\"), new Amount(\"10units\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/07/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"70ml\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/07/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Potatoes\"), new Amount(\"300g\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/06/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Lychee\"), new Amount(\"3units\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/06/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"280ml\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/06/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Chicken\"), new Amount(\"890g\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/05/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Lemon\"), new Amount(\"1units\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/05/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"100ml\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/05/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Salmon\"), new Amount(\"290g\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/04/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Kiwi\"), new Amount(\"2units\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/04/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"0ml\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/04/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Potatoes\"), new Amount(\"469g\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/03/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Eggs\"), new Amount(\"6units\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/03/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"60ml\"),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/03/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Chicken\"), new Amount(\"937g\"),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/02/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Strawberries\"), new Amount(\"8units\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/02/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"300ml\"),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/02/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Salmon\"), new Amount(\"700g\"),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/01/2019\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Pineapples\"), new Amount(\"2units\"),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/01/2019\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"200ml\"),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/01/2019\"), getTagSet()),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Potatoes\"), new Amount(\"1000g\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/12/2018\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Plums\"), new Amount(\"4units\"),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/12/2018\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"100ml\"),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/12/2018\"), getTagSet()),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Chicken\"), new Amount(\"396g\"),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"12/11/2018\"), getTagSet(\"staples\")),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Strawberries\"), new Amount(\"7units\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"15/11/2018\"), getTagSet(\"healthy\", \"fruits\")),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new GroceryItem(new Name(\"Milk\"), new Amount(\"100ml\"),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                    new ExpiryDate(\"18/11/2018\"), getTagSet())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static TreeMap\u003cWasteMonth, WasteList\u003e getSampleWasteArchive() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth[] wasteMonths \u003d getSampleWasteMonths();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        GroceryItem[] wasteItems \u003d getSampleWasteItems();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteMonth wm \u003d wasteMonths[i];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteList wl \u003d new WasteList(wm);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            for (int j \u003d i * 3; j \u003c i * 3 + 3; j++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                wl.addWasteItem(wasteItems[j]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            wasteArchive.put(wm, wl);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteArchive;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teika97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Template List Sample \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static TemplateItem[] getSampleTemplateItems() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new TemplateItem[] {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new TemplateItem(new Name(\"Minced Beef\"), new Amount(\"300g\")),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new TemplateItem(new Name(\"FullFat Milk\"), new Amount(\"1L\")),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new TemplateItem(new Name(\"Red Wine\"), new Amount(\"1L\")),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new TemplateItem(new Name(\"Minced Chicken\"), new Amount(\"300g\")),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new TemplateItem(new Name(\"Tomato\"), new Amount(\"2units\"))"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Generates sample of template list"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @return Template array"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static UniqueTemplateItems[] getSampleTemplates() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new UniqueTemplateItems[] {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new UniqueTemplateItems(new Name(\"Weekly Necessities\")),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new UniqueTemplateItems(new Name(\"Birthday Party\")),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new UniqueTemplateItems(new Name(\"Diet Plan\"))"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static ReadOnlyTemplateList getSampleTemplateList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateList sampleAc \u003d new TemplateList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teika97"
        },
        "content": "        for (UniqueTemplateItems sampleTemplates: getSampleTemplates()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teika97"
        },
        "content": "            for (TemplateItem sampleTemplateItem : getSampleTemplateItems()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teika97"
        },
        "content": "                sampleTemplates.add(sampleTemplateItem);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teika97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teika97"
        },
        "content": "            sampleAc.addTemplate(sampleTemplates);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return sampleAc;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Shopping List Sample \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static ShoppingItem[] getSampleShoppingItems() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new ShoppingItem[] {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            new ShoppingItem(new Name(\"Minced Beef\"), new Amount(\"400g\")),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            new ShoppingItem(new Name(\"FullFat Milk\"), new Amount(\"3L\")),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            new ShoppingItem(new Name(\"White Wine\"), new Amount(\"0.5L\")),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            new ShoppingItem(new Name(\"Minced Chicken\"), new Amount(\"1000g\")),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            new ShoppingItem(new Name(\"Applex\"), new Amount(\"2units\"))"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static ReadOnlyShoppingList getSampleShoppingList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingList sampleSl \u003d new ShoppingList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (ShoppingItem sampleShoppingItem : getSampleShoppingItems()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            sampleSl.addShoppingItem(sampleShoppingItem);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return sampleSl;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bought Item Sample List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static GroceryItem[] getSampleBoughtItems() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new GroceryItem[] {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Minced beef\"), new Amount(\"300g\"), new ExpiryDate(\"30/09/2019\"),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    getTagSet()),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Spaghetti\"), new Amount(\"1unit\"), new ExpiryDate(\"20/11/2019\"),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    getTagSet()),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Apples\"), new Amount(\"6units\"), new ExpiryDate(\"15/10/2019\"),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    getTagSet()),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Orange juice\"), new Amount(\"500ml\"), new ExpiryDate(\"22/11/2019\"),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    getTagSet()),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            new GroceryItem(new Name(\"Green tea latte\"), new Amount(\"10units\"), new ExpiryDate(\"30/10/2019\"),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    getTagSet())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static ReadOnlyGroceryList getSampleBoughtList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList sampleAb \u003d new GroceryList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (GroceryItem boughtItem : getSampleBoughtItems()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            sampleAb.addGroceryItem(boughtItem);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 47,
      "teika97": 35,
      "zhangxuan97": 139,
      "kelvinnharris": 18,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/waste/WasteMonth.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.waste;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.data.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.exceptions.WasteMonthException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * The Waste Month to index the list of waste lists."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class WasteMonth implements Comparable\u003cWasteMonth\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            \"Month of year can be in any format permissible by the Natty library.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final Pattern VALIDATION_REGEX \u003d Pattern.compile(\"^(0[1-9]|1[012])-((19|2[0-9])[0-9]{2})$\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth(int month, int year) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean isValidMonth \u003d month \u003e 0 \u0026\u0026 month \u003c 13;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean isValidYear \u003d year \u003e 1900 \u0026\u0026 year \u003c 3000;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (!isValidMonth || !isValidYear) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            String errorMessage \u003d isValidMonth ? \"Month is valid, \" : \"Month is not valid, \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            errorMessage +\u003d isValidYear ? \"Year is valid.\" : \"Year is not valid.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new WasteMonthException(errorMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth(LocalDate date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.year \u003d date.getYear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth(String wasteMonthString) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (!VALIDATION_REGEX.matcher(wasteMonthString).matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new WasteMonthException(\"Invalid Format.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MM-yyyy\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        YearMonth ym \u003d YearMonth.parse(wasteMonthString, formatter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.month \u003d ym.getMonthValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.year \u003d ym.getYear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public boolean isAfter(WasteMonth otherWasteMonth) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return this.compareTo(otherWasteMonth) \u003e 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public boolean isBefore(WasteMonth otherWasteMonth) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return this.compareTo(otherWasteMonth) \u003c 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth nextWasteMonth() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return addWasteMonth(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Adds the specified number of months from the current waste month and returns a new waste month object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth addWasteMonth(int numberOfMonths) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        LocalDate currentWasteMonthDate \u003d LocalDate.of(this.year, this.month, 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new WasteMonth(currentWasteMonthDate.plusMonths(numberOfMonths));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth previousWasteMonth() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return minusWasteMonth(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Subtracts the specified number of months from the current waste month and returns a new waste month object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonth minusWasteMonth(int numberOfMonths) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        LocalDate currentWasteMonthDate \u003d LocalDate.of(this.year, this.month, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new WasteMonth(currentWasteMonthDate.minusMonths(numberOfMonths));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns the format which the waste month will be stored in storage."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public String toStorageFormat() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String month \u003d (this.month \u003c 10) ? \"0\" + String.valueOf(this.month) : String.valueOf(this.month);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String year \u003d String.valueOf(this.year);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return month + \"-\" + year;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Month toJFreeMonth() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new Month(this.month, this.year);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteMonth getCurrentWasteMonth() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new WasteMonth(LocalDate.now());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteMonth earlier(WasteMonth wm1, WasteMonth wm2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return (wm1.isBefore(wm2)) ? wm1 : wm2;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteMonth later(WasteMonth wm1, WasteMonth wm2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return (wm1.isAfter(wm2)) ? wm1 : wm2;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public int compareTo(WasteMonth otherMonth) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        LocalDate otherDate \u003d LocalDate.of(otherMonth.getYear(), otherMonth.getMonth(), 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        LocalDate thisDate \u003d LocalDate.of(this.getYear(), this.getMonth(), 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return thisDate.compareTo(otherDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (!(other instanceof WasteMonth)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean isSameMonth \u003d ((WasteMonth) other).getMonth() \u003d\u003d this.getMonth();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        boolean isSameYear \u003d ((WasteMonth) other).getYear() \u003d\u003d this.getYear();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return isSameMonth \u0026\u0026 isSameYear;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM yyyy\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.of(this.year, this.month);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return formatter.format(yearMonth);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 139
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/waste/WasteReport.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.waste;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Creates a Waste Report"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class WasteReport implements Iterable\u003cMap.Entry\u003cWasteMonth, WasteStatistic\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private Map\u003cWasteMonth, WasteStatistic\u003e historicalData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteReport(Map\u003cWasteMonth, WasteStatistic\u003e historicalData) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.historicalData \u003d historicalData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns an iterator over elements of type {@code T}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return an Iterator."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Iterator\u003cMap.Entry\u003cWasteMonth, WasteStatistic\u003e\u003e iterator() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return historicalData.entrySet().iterator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 26
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/waste/WasteStatistic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.waste;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueWasteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * The WasteStatistic for given waste list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class WasteStatistic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final float WEIGHTS_CURRENT_MONTH \u003d 0.4f;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final float WEIGHTS_PREVIOUS_ONE_MONTH \u003d 0.3f;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final float WEIGHTS_PREVIOUS_TWO_MONTH \u003d 0.2f;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final float WEIGHTS_PREVIOUS_THREE_MONTH \u003d 0.1f;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private float totalWeight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private float totalVolume;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private float totalQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteStatistic(float totalWeight, float totalVolume, float totalQuantity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.totalWeight \u003d totalWeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.totalVolume \u003d totalVolume;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.totalQuantity \u003d totalQuantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteStatistic getWasteStatistic(UniqueWasteList wasteList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float weight \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float volume \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float quantity \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        for (GroceryItem wasteItem : wasteList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            Amount amount \u003d wasteItem.getAmount();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            weight +\u003d Amount.getAmountInKg(amount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            volume +\u003d Amount.getAmountInLitre(amount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            quantity +\u003d Amount.getAmountInUnit(amount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new WasteStatistic(weight, volume, quantity);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Predicts this month\u0027s current wastage statistic and returns a WasteStatistic object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param thisMonth WasteStatistic for the current month"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param previousOneMonth WasteStatistic for the previous month"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param previousTwoMonth WasteStatistic for the month which was two months before now"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param previousThreeMonth WasteStatistic for the month which was three months before now"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return The weighted waste statistics"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteStatistic getPredictedWasteStatistic(WasteStatistic thisMonth,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                                                            WasteStatistic previousOneMonth,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                                                            WasteStatistic previousTwoMonth,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                                                            WasteStatistic previousThreeMonth) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float weight \u003d thisMonth.getTotalWeight();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float volume \u003d thisMonth.getTotalVolume();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float quantity \u003d thisMonth.getTotalQuantity();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        int daysPassed \u003d today.getDayOfMonth();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        int daysInMonth \u003d today.lengthOfMonth();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float scalingFactor \u003d daysInMonth / daysPassed;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteStatistic currentMonth \u003d new WasteStatistic(weight * scalingFactor,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                volume * scalingFactor, quantity * scalingFactor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return getWeightedStatistics(currentMonth, previousOneMonth,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                previousTwoMonth, previousThreeMonth);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteStatistic getWeightedStatistics(WasteStatistic currentMonth, WasteStatistic previousOneMonth,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                                                 WasteStatistic previousTwoMonth, WasteStatistic previousThreeMonth) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float weightedWeight \u003d WEIGHTS_CURRENT_MONTH * currentMonth.getTotalWeight()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + WEIGHTS_PREVIOUS_ONE_MONTH * previousOneMonth.getTotalWeight()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + WEIGHTS_PREVIOUS_TWO_MONTH * previousTwoMonth.getTotalWeight()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + WEIGHTS_PREVIOUS_THREE_MONTH * previousThreeMonth.getTotalWeight();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float weightedVolume \u003d WEIGHTS_CURRENT_MONTH * currentMonth.getTotalVolume()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + WEIGHTS_PREVIOUS_ONE_MONTH * previousOneMonth.getTotalVolume()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + WEIGHTS_PREVIOUS_TWO_MONTH * previousTwoMonth.getTotalVolume()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + WEIGHTS_PREVIOUS_THREE_MONTH * previousThreeMonth.getTotalVolume();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        float weightedUnit \u003d WEIGHTS_CURRENT_MONTH * currentMonth.getTotalQuantity()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + WEIGHTS_PREVIOUS_ONE_MONTH * previousOneMonth.getTotalQuantity()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + WEIGHTS_PREVIOUS_TWO_MONTH * previousTwoMonth.getTotalQuantity()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + WEIGHTS_PREVIOUS_THREE_MONTH * previousThreeMonth.getTotalQuantity();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new WasteStatistic(weightedWeight, weightedVolume, weightedUnit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public float getTotalWeight() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return totalWeight;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public float getTotalVolume() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return totalVolume;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public float getTotalQuantity() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return totalQuantity;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return \"Weight \u003d \" + getTotalWeight()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + \", Volume \u003d \" + getTotalVolume()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + \", Quantity \u003d \" + getTotalQuantity();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 110
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/model/waste/exceptions/WasteMonthException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.waste.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Signals that the operation will result in an invalid waste month."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class WasteMonthException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteMonthException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        super(\"Waste Month is not valid. \" + message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 11
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/GroceryListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Represents a storage for {@link GroceryList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public interface GroceryListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getGroceryListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/java/seedu/address/storage/GroceryListStorage.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns GroceryList data as a {@link ReadOnlyGroceryList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyGroceryList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e master:src/main/java/seedu/address/storage/GroceryListStorage.java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Optional\u003cReadOnlyGroceryList\u003e readGroceryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see #getGroceryListFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Optional\u003cReadOnlyGroceryList\u003e readGroceryList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Saves the given {@link ReadOnlyGroceryList} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param groceryList cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void saveGroceryList(ReadOnlyGroceryList groceryList) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @see #saveGroceryList(ReadOnlyGroceryList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void saveGroceryList(ReadOnlyGroceryList groceryList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 12,
      "zhangxuan97": 4,
      "kelvinnharris": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonAdaptedGroceryItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class JsonAdaptedGroceryItem {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Grocery item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final String expiryDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public JsonAdaptedGroceryItem("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            @JsonProperty(\"expiryDate\") String expiryDate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public JsonAdaptedGroceryItem(GroceryItem source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        amount \u003d source.getAmount().fullAmt;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expiryDate \u003d source.getExpiryDate().expiryDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final List\u003cTag\u003e groceryListTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            groceryListTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final ExpiryDate modelExpiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(groceryListTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new GroceryItem(modelName, modelAmount, modelExpiryDate, modelTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 8,
      "kelvinnharris": 22,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonAdaptedTemplate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Jackson-friendly version of {@link UniqueTemplateItems}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "class JsonAdaptedTemplate {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"TemplateList Item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEMPLATE_ITEM \u003d \"Template contains duplicate template items(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final List\u003cJsonAdaptedTemplateItem\u003e templateItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Constructs a {@code JsonAdaptedTemplate} with the given template details and given template items."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public JsonAdaptedTemplate(@JsonProperty(\"name\") String name, @JsonProperty(\"templateItems\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "                                List\u003cJsonAdaptedTemplateItem\u003e templateItems) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.templateItems.addAll(templateItems);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Converts a given {@code UniqueTemplateItems} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public JsonAdaptedTemplate(UniqueTemplateItems source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateItems.addAll(source.getTemplate().stream().map(JsonAdaptedTemplateItem::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Converts this Jackson-friendly adapted uniqueTemplateItems object into the model\u0027s"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code UniqueTemplateItems} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted template item."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public UniqueTemplateItems toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new UniqueTemplateItems(modelName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 59,
      "zhangxuan97": 4
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonAdaptedTemplateItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Jackson-friendly version of {@link TemplateItem}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "class JsonAdaptedTemplateItem {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"TemplateItem\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Constructs a {@code JsonAdaptedTemplateItem} with the given template item details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public JsonAdaptedTemplateItem("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "            @JsonProperty(\"amount\") String amount) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Converts a given {@code TemplateItem} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public JsonAdaptedTemplateItem(TemplateItem source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        amount \u003d source.getAmount().fullAmt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Converts this Jackson-friendly adapted template item object into the model\u0027s {@code TemplateItem} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted template item."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new TemplateItem(modelName, modelAmount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 53,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonGroceryListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A class to access GroceryList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class JsonGroceryListStorage implements GroceryListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGroceryListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonGroceryListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getGroceryListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyGroceryList\u003e readGroceryList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return readGroceryList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Similar to {@link #readGroceryList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyGroceryList\u003e readGroceryList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Optional\u003cJsonSerializableGroceryList\u003e jsonGroceryList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                filePath, JsonSerializableGroceryList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!jsonGroceryList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return Optional.of(jsonGroceryList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveGroceryList(ReadOnlyGroceryList groceryList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        saveGroceryList(groceryList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/java/seedu/address/storage/JsonGroceryListStorage.java"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Similar to {@link #saveGroceryList(ReadOnlyGroceryList, Path)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Similar to {@link #saveGroceryList(ReadOnlyGroceryList)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e master:src/main/java/seedu/address/storage/JsonGroceryListStorage.java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveGroceryList(ReadOnlyGroceryList groceryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(groceryList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGroceryList(groceryList), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 22,
      "zhangxuan97": 7,
      "kelvinnharris": 1,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonSerializableGroceryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * An Immutable GroceryList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e master"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@JsonRootName(value \u003d \"grocerylist\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "class JsonSerializableGroceryList {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROCERY_ITEM \u003d \"Grocery list contains duplicate grocery item(s)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final List\u003cJsonAdaptedGroceryItem\u003e grocerylist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public JsonSerializableGroceryList(@JsonProperty(\"grocerylist\") List\u003cJsonAdaptedGroceryItem\u003e grocerylist) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.grocerylist.addAll(grocerylist);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonSerializableGroceryList(ReadOnlyGroceryList source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        grocerylist.addAll(source.getGroceryList().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .map(JsonAdaptedGroceryItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public GroceryList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList groceryList \u003d new GroceryList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        for (JsonAdaptedGroceryItem jsonAdaptedGroceryItem : this.grocerylist) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            GroceryItem groceryItem \u003d jsonAdaptedGroceryItem.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            if (groceryList.hasGroceryItem(groceryItem)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GROCERY_ITEM);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            groceryList.addGroceryItem(groceryItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return groceryList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 48,
      "zhangxuan97": 5,
      "kelvinnharris": 12
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonSerializableTemplate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * An Immutable GroceryList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "class JsonSerializableTemplate {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEMPLATE_ITEM \u003d \"Template contains duplicate template items(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Template\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final List\u003cJsonAdaptedTemplateItem\u003e template \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Constructs a {@code JsonSerializableTemplate} with the given template items."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public JsonSerializableTemplate(@JsonProperty(\"name\") String name, @JsonProperty(\"template\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "                                    List\u003cJsonAdaptedTemplateItem\u003e templateItems) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.template.addAll(templateItems);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Converts a given {@code UniqueTemplateItems} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTemplate}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public JsonSerializableTemplate(UniqueTemplateItems source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        template.addAll(source.getTemplate().stream().map(JsonAdaptedTemplateItem::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Converts this Jackson-friendly adapted uniqueTemplateItems object into the model\u0027s"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * {@code UniqueTemplateItems} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted template item."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public UniqueTemplateItems toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems templateInput \u003d new UniqueTemplateItems(modelName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        for (JsonAdaptedTemplateItem jsonAdaptedTemplateItem : template) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "            TemplateItem item \u003d jsonAdaptedTemplateItem.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "            if (templateInput.contains(item)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TEMPLATE_ITEM);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "            templateInput.add(item);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templateInput;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "teika97": 69,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonSerializableTemplateList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * An Immutable GroceryList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "@JsonRootName(value \u003d \"templateList\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "class JsonSerializableTemplateList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEMPLATE \u003d \"TemplateList contains duplicate template(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final List\u003cJsonSerializableTemplate\u003e templateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Constructs a {@code JsonSerializableTemplateList} with the given template items."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public JsonSerializableTemplateList(@JsonProperty(\"templateList\") List\u003cJsonSerializableTemplate\u003e templates) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.templateList.addAll(templates);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Converts a given {@code ReadOnlyTemplateList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTemplateList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public JsonSerializableTemplateList(ReadOnlyTemplateList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateList.addAll(source.getTemplateList().stream().map(JsonSerializableTemplate::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Converts this template list into the model\u0027s {@code TemplateList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateList templates \u003d new TemplateList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        for (JsonSerializableTemplate jsonSerializableTemplate : templateList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "            UniqueTemplateItems template \u003d jsonSerializableTemplate.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "            if (templates.hasTemplate(template)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TEMPLATE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "            templates.addTemplate(template);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templates;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "teika97": 55,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonTemplateListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A class to access GroceryList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class JsonTemplateListStorage implements TemplateListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTemplateListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public JsonTemplateListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Path getTemplateListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Optional\u003cReadOnlyTemplateList\u003e readTemplateList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return readTemplateList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Similar to {@link #readTemplateList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Optional\u003cReadOnlyTemplateList\u003e readTemplateList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Optional\u003cJsonSerializableTemplateList\u003e jsonTemplateList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "                filePath, JsonSerializableTemplateList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!jsonTemplateList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return Optional.of(jsonTemplateList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void saveTemplateList(ReadOnlyTemplateList templateList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        saveTemplateList(templateList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Similar to {@link #saveTemplateList(ReadOnlyTemplateList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void saveTemplateList(ReadOnlyTemplateList templateList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(templateList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTemplateList(templateList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "teika97": 72,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.BoughtListStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.ShoppingListStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.wastelist.WasteListStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public interface Storage extends GroceryListStorage, UserPrefsStorage, TemplateListStorage, WasteListStorage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingListStorage, BoughtListStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getGroceryListFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Optional\u003cReadOnlyGroceryList\u003e readGroceryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void saveGroceryList(ReadOnlyGroceryList groceryList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Path getTemplateListFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Optional\u003cReadOnlyTemplateList\u003e readTemplateList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void saveTemplateList(ReadOnlyTemplateList templateList) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Path getWasteListFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Optional\u003cTreeMap\u003cWasteMonth, WasteList\u003e\u003e readWasteList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    void saveWasteList(TreeMap\u003cWasteMonth, WasteList\u003e wasteList) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getShoppingListFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Optional\u003cReadOnlyShoppingList\u003e readShoppingList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void saveShoppingList(ReadOnlyShoppingList shoppingList) throws IOException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getBoughtListFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Optional\u003cReadOnlyGroceryList\u003e readBoughtList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void saveBoughtList(ReadOnlyGroceryList boughtList) throws IOException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 21,
      "teika97": 9,
      "zhangxuan97": 22,
      "kelvinnharris": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.BoughtListStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.ShoppingListStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.wastelist.WasteListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Manages storage of GroceryList data in local storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private GroceryListStorage groceryListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private TemplateListStorage templateListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private WasteListStorage wasteListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private ShoppingListStorage shoppingListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private BoughtListStorage boughtListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public StorageManager(GroceryListStorage groceryListStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                          TemplateListStorage templateListStorage, WasteListStorage wasteListStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                          ShoppingListStorage shoppingListStorage, BoughtListStorage boughtListStorage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.groceryListStorage \u003d groceryListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.templateListStorage \u003d templateListStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteListStorage \u003d wasteListStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.shoppingListStorage \u003d shoppingListStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.boughtListStorage \u003d boughtListStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GroceryList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getGroceryListFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return groceryListStorage.getGroceryListFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyGroceryList\u003e readGroceryList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return readGroceryList(groceryListStorage.getGroceryListFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyGroceryList\u003e readGroceryList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return groceryListStorage.readGroceryList(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveGroceryList(ReadOnlyGroceryList groceryList) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        saveGroceryList(groceryList, groceryListStorage.getGroceryListFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveGroceryList(ReadOnlyGroceryList groceryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        groceryListStorage.saveGroceryList(groceryList, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TemplateList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Path getTemplateListFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templateListStorage.getTemplateListFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Optional\u003cReadOnlyTemplateList\u003e readTemplateList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return readTemplateList(templateListStorage.getTemplateListFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Optional\u003cReadOnlyTemplateList\u003e readTemplateList(Path filePath)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templateListStorage.readTemplateList(filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void saveTemplateList(ReadOnlyTemplateList templateList) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "        saveTemplateList(templateList, templateListStorage.getTemplateListFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void saveTemplateList(ReadOnlyTemplateList templateList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateListStorage.saveTemplateList(templateList, filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WasteList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Path getWasteListFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteListStorage.getWasteListFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Optional\u003cTreeMap\u003cWasteMonth, WasteList\u003e\u003e readWasteList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return readWasteList(wasteListStorage.getWasteListFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Optional\u003cTreeMap\u003cWasteMonth, WasteList\u003e\u003e readWasteList(Path filePath)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteListStorage.readWasteList(filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void saveWasteList(TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive) throws IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        saveWasteList(wasteArchive, wasteListStorage.getWasteListFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void saveWasteList(TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteListStorage.saveWasteList(wasteArchive, filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ShoppingList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getShoppingListFilePath() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingListStorage.getShoppingListFilePath();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyShoppingList\u003e readShoppingList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return readShoppingList(shoppingListStorage.getShoppingListFilePath());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyShoppingList\u003e readShoppingList(Path filePath)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingListStorage.readShoppingList(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveShoppingList(ReadOnlyShoppingList shoppingList) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        saveShoppingList(shoppingList, shoppingListStorage.getShoppingListFilePath());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveShoppingList(ReadOnlyShoppingList shoppingList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingListStorage.saveShoppingList(shoppingList, filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BoughtList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getBoughtListFilePath() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return boughtListStorage.getBoughtListFilePath();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyGroceryList\u003e readBoughtList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return readBoughtList(boughtListStorage.getBoughtListFilePath());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyGroceryList\u003e readBoughtList(Path filePath)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return boughtListStorage.readBoughtList(filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveBoughtList(ReadOnlyGroceryList boughtList) throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        saveBoughtList(boughtList, boughtListStorage.getBoughtListFilePath());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveBoughtList(ReadOnlyGroceryList boughtList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        boughtListStorage.saveBoughtList(boughtList, filePath);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 82,
      "teika97": 32,
      "zhangxuan97": 47,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/TemplateListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Represents a storage for {@link TemplateList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "public interface TemplateListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Path getTemplateListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns TemplateList data as a {@link ReadOnlyTemplateList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Optional\u003cReadOnlyTemplateList\u003e readTemplateList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @see #getTemplateListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    Optional\u003cReadOnlyTemplateList\u003e readTemplateList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Saves the given {@link ReadOnlyTemplateList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @param templateList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void saveTemplateList(ReadOnlyTemplateList templateList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * @see #saveTemplateList(ReadOnlyTemplateList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    void saveTemplateList(ReadOnlyTemplateList templateList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 42,
      "zhangxuan97": 4
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Represents a storage for {@link seedu.ifridge.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Saves the given {@link seedu.ifridge.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/shoppinglist/BoughtListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Represents a storage for {@link seedu.ifridge.model.GroceryList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public interface BoughtListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getBoughtListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns ShoppingList data as a {@link ReadOnlyGroceryList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Optional\u003cReadOnlyGroceryList\u003e readBoughtList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see #getShoppingListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Optional\u003cReadOnlyGroceryList\u003e readBoughtList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Saves the given {@link ReadOnlyGroceryList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param boughtList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void saveBoughtList(ReadOnlyGroceryList boughtList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see #saveShoppingList(ReadOnlyShoppingList, Path)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void saveBoughtList(ReadOnlyGroceryList boughtList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 41,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/shoppinglist/JsonAdaptedShoppingItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "//import seedu.address.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Jackson-friendly version of {@link ShoppingItem}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class JsonAdaptedShoppingItem {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //private final String expiryDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final boolean urgent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final boolean bought;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonAdaptedShoppingItem("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            //@JsonProperty(\"expiryDate\") String expiryDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            @JsonProperty(\"bought\") boolean bought,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            @JsonProperty(\"urgent\") boolean urgent) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.bought \u003d bought;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.urgent \u003d urgent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Converts a given {@code ShoppingItem} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonAdaptedShoppingItem(ShoppingItem source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        amount \u003d source.getAmount().fullAmt;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //expiryDate \u003d source.getExpiryDate().expiryDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        bought \u003d source.isBought();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        urgent \u003d source.isUrgent();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code ShoppingItem} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //if (bought) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //    final ExpiryDate modelExpiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //    return new ShoppingItem(modelName, modelAmount, modelExpiryDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingItem result \u003d new ShoppingItem(modelName, modelAmount);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result \u003d result.setBought(bought);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result \u003d result.setUrgent(urgent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 73,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/shoppinglist/JsonBoughtItemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A class to access GroceryList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class JsonBoughtItemStorage implements BoughtListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonShoppingItemStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonBoughtItemStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getBoughtListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyGroceryList\u003e readBoughtList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return readBoughtList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Similar to {@link #readShoppingList(Path)}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyGroceryList\u003e readBoughtList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Optional\u003cJsonSerializableBoughtList\u003e jsonBoughtList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                filePath, JsonSerializableBoughtList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!jsonBoughtList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return Optional.of(jsonBoughtList.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveBoughtList(ReadOnlyGroceryList boughtList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        saveBoughtList(boughtList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Similar to {@link #saveShoppingList(ReadOnlyShoppingList, Path)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveBoughtList(ReadOnlyGroceryList boughtList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(boughtList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBoughtList(boughtList), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 73,
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/shoppinglist/JsonSerializableBoughtList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.JsonAdaptedGroceryItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * An Immutable GroceryList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@JsonRootName(value \u003d \"boughtlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "class JsonSerializableBoughtList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOUGHT_ITEMS \u003d \"Bought list contains duplicate grocery_items(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final List\u003cJsonAdaptedGroceryItem\u003e boughtItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonSerializableBoughtList(@JsonProperty(\"boughtItems\") List\u003cJsonAdaptedGroceryItem\u003e boughtItems) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.boughtItems.addAll(boughtItems);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Converts a given {@code ReadOnlyShoppingList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableShoppingList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonSerializableBoughtList(ReadOnlyGroceryList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        boughtItems.addAll(source.getGroceryList().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                .map(JsonAdaptedGroceryItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Converts this shopping list into the model\u0027s {@code ShoppingList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public GroceryList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList groceryList \u003d new GroceryList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (JsonAdaptedGroceryItem jsonAdaptedFood : boughtItems) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            GroceryItem groceryItem \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (groceryList.hasGroceryItem(groceryItem)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOUGHT_ITEMS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            groceryList.addGroceryItem(groceryItem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return groceryList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 56,
      "zhangxuan97": 6
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/shoppinglist/JsonSerializableShoppingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ShoppingList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * An Immutable GroceryList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@JsonRootName(value \u003d \"shoppinglist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "class JsonSerializableShoppingList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOPPING_ITEMS \u003d \"Shopping list contains duplicate shopping_items(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final List\u003cJsonAdaptedShoppingItem\u003e shoppingItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonSerializableShoppingList(@JsonProperty(\"shoppingItems\") List\u003cJsonAdaptedShoppingItem\u003e shoppingItems) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.shoppingItems.addAll(shoppingItems);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Converts a given {@code ReadOnlyShoppingList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableShoppingList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonSerializableShoppingList(ReadOnlyShoppingList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingItems.addAll(source.getShoppingList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                .map(JsonAdaptedShoppingItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Converts this shopping list into the model\u0027s {@code ShoppingList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingList shoppingList \u003d new ShoppingList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (JsonAdaptedShoppingItem jsonAdaptedShoppingItem : shoppingItems) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            ShoppingItem shoppingItem \u003d jsonAdaptedShoppingItem.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (shoppingList.hasShoppingItem(shoppingItem)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SHOPPING_ITEMS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            shoppingList.addShoppingItem(shoppingItem);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 56,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/shoppinglist/JsonShoppingItemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A class to access GroceryList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class JsonShoppingItemStorage implements ShoppingListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonShoppingItemStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public JsonShoppingItemStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Path getShoppingListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyShoppingList\u003e readShoppingList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return readShoppingList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Similar to {@link #readShoppingList(Path)}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Optional\u003cReadOnlyShoppingList\u003e readShoppingList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Optional\u003cJsonSerializableShoppingList\u003e jsonShoppingList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                filePath, JsonSerializableShoppingList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!jsonShoppingList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return Optional.of(jsonShoppingList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveShoppingList(ReadOnlyShoppingList shoppingList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        saveShoppingList(shoppingList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Similar to {@link #saveShoppingList(ReadOnlyShoppingList, Path)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void saveShoppingList(ReadOnlyShoppingList shoppingList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(shoppingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableShoppingList(shoppingList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 73,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/shoppinglist/ShoppingListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.shoppinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Represents a storage for {@link seedu.ifridge.model.GroceryList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Represents a storage for {@link GroceryList}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public interface ShoppingListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Path getShoppingListFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns ShoppingList data as a {@link ReadOnlyShoppingList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Optional\u003cReadOnlyShoppingList\u003e readShoppingList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see #getShoppingListFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    Optional\u003cReadOnlyShoppingList\u003e readShoppingList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Saves the given {@link ReadOnlyShoppingList} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param shoppingList cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void saveShoppingList(ReadOnlyShoppingList shoppingList) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see #saveShoppingList(ReadOnlyShoppingList, Path)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void saveShoppingList(ReadOnlyShoppingList shoppingList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 44,
      "zhangxuan97": 5,
      "kelvinnharris": 1
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/wastelist/JsonSerializableWasteArchive.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * An Immutable waste archive that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "@JsonRootName(value \u003d \"wastearchive\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class JsonSerializableWasteArchive {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEMPLATE \u003d \"Waste list storage contains duplicate waste list(s) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            + \"for the month of %s.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private final List\u003cJsonSerializableWasteList\u003e wastearchive \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public JsonSerializableWasteArchive(@JsonProperty(\"wastearchive\") List\u003cJsonSerializableWasteList\u003e wastearchive) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wastearchive.addAll(wastearchive);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public JsonSerializableWasteArchive(TreeMap\u003cWasteMonth, WasteList\u003e source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Set\u003cWasteMonth\u003e wasteMonths \u003d source.keySet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        for (WasteMonth wm : wasteMonths) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            JsonSerializableWasteList wasteList \u003d new JsonSerializableWasteList(source.get(wm));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            wastearchive.add(wasteList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Converts this waste archive into the model\u0027s waste archive."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws IllegalValueException if there are any data constraints violated"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public TreeMap\u003cWasteMonth, WasteList\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TreeMap\u003cWasteMonth, WasteList\u003e modelWasteArchive \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        for (JsonSerializableWasteList jsonSerializableWasteList : wastearchive) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteList wasteList \u003d jsonSerializableWasteList.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteMonth wasteMonth \u003d wasteList.getWasteMonth();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            modelWasteArchive.put(wasteMonth, wasteList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return modelWasteArchive;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 54
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/wastelist/JsonSerializableWasteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyWasteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.JsonAdaptedGroceryItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * A WasteList that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "@JsonRootName(value \u003d \"wastelist\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class JsonSerializableWasteList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final List\u003cJsonAdaptedGroceryItem\u003e wastelist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private final String wastemonth;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public JsonSerializableWasteList(@JsonProperty(\"wastemonth\") String wasteMonth,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                                     @JsonProperty(\"wastelist\") List\u003cJsonAdaptedGroceryItem\u003e wasteitems) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wastemonth \u003d wasteMonth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wastelist.addAll(wasteitems);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Converts a given {@code ReadOnlyWasteList} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableWasteList}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public JsonSerializableWasteList(ReadOnlyWasteList source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wastemonth \u003d source.getWasteMonth().toStorageFormat();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        wastelist.addAll(source.getWasteList().stream().map(JsonAdaptedGroceryItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Converts this waste list into the model\u0027s {@code WasteList} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth wasteMonth \u003d new WasteMonth(this.wastemonth);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteList wasteList \u003d new WasteList(wasteMonth);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        for (JsonAdaptedGroceryItem jsonAdaptedGroceryItem : this.wastelist) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            GroceryItem food \u003d jsonAdaptedGroceryItem.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            wasteList.addWasteItem(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 56,
      "kelvinnharris": 5
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/wastelist/JsonWasteListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * A storage for waste lists"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class JsonWasteListStorage implements WasteListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWasteListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public JsonWasteListStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Path getWasteListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Optional\u003cTreeMap\u003cWasteMonth, WasteList\u003e\u003e readWasteList() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return readWasteList(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Similar to {@link #readWasteList()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public Optional\u003cTreeMap\u003cWasteMonth, WasteList\u003e\u003e readWasteList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Optional\u003cJsonSerializableWasteArchive\u003e jsonWasteArchive \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                filePath, JsonSerializableWasteArchive.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (!jsonWasteArchive.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            return Optional.of(jsonWasteArchive.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void saveWasteList(TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        saveWasteList(wasteArchive, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Similar to {@link #saveWasteList}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void saveWasteList(TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(wasteArchive);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableWasteArchive(wasteArchive), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 86
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/storage/wastelist/WasteListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage.wastelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyWasteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * A storage for waste lists"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public interface WasteListStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Path getWasteListFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Returns WasteList data as a {@link ReadOnlyWasteList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Optional\u003cTreeMap\u003cWasteMonth, WasteList\u003e\u003e readWasteList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @see #getWasteListFilePath()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    Optional\u003cTreeMap\u003cWasteMonth, WasteList\u003e\u003e readWasteList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Saves the given {@link ReadOnlyWasteList} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param wasteArchive cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    void saveWasteList(TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @see #saveWasteList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    void saveWasteList(TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 47
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "         * @see seedu.ifridge.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/ExpiredGroceryCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class ExpiredGroceryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static final String FXML \u003d \"ExpiredGroceryCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GroceryList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label expiryDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public ExpiredGroceryCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        expiryDate.setText(((GroceryItem) food).getExpiryDate().expiryDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        amount.setText(food.getAmount().fullAmt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        GroceryItem groceryItem \u003d (GroceryItem) food;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        groceryItem.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!(other instanceof ExpiredGroceryCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        ExpiredGroceryCard card \u003d (ExpiredGroceryCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 15,
      "ManasVegi": 1,
      "zhangxuan97": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/GroceryItemCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class GroceryItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static final String FXML \u003d \"GroceryItemCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GroceryList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Label expiryDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItemCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expiryDate.setText(((GroceryItem) food).getExpiryDate().expiryDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        amount.setText(food.getAmount().fullAmt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem groceryItem \u003d (GroceryItem) food;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryItem.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "              .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "               .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!(other instanceof GroceryItemCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItemCard card \u003d (GroceryItemCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "zhangxuan97": 3,
      "kelvinnharris": 21,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/GroceryListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * Panel containing the list of grocery items."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class GroceryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static final String FXML \u003d \"GroceryListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GroceryListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private int n;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private ListView\u003cGroceryItem\u003e personListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public GroceryListPanel(ObservableList\u003cGroceryItem\u003e foodList, String n) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        personListView.setItems(foodList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.n \u003d Integer.valueOf(n);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cGroceryItem\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        protected void updateItem(GroceryItem food, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                Date date \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(food.getExpiryDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                if (hasExpired(date)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    setGraphic(new ExpiredGroceryCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                } else if (isExpiring(date)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    setGraphic(new IsExpiringGroceryCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    setGraphic(new NotExpiringGroceryCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "         * Checks if the grocery item is expired."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public boolean hasExpired(Date date) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            Date current \u003d cal.getTime();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return date.before(current);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "         * Checks if the grocery item is expiring within default number of days."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public boolean isExpiring(Date date) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            Date current \u003d cal.getTime();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            int diffDays \u003d (int) ((date.getTime() - current.getTime()) / (24 * 60 * 60 * 1000));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return diffDays \u003c\u003d n;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 41,
      "zhangxuan97": 3,
      "kelvinnharris": 9,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/IsExpiringGroceryCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class IsExpiringGroceryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static final String FXML \u003d \"IsExpiringGroceryCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GroceryList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label expiryDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public IsExpiringGroceryCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        expiryDate.setText(((GroceryItem) food).getExpiryDate().expiryDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        amount.setText(food.getAmount().fullAmt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        GroceryItem groceryItem \u003d (GroceryItem) food;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        groceryItem.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!(other instanceof IsExpiringGroceryCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        IsExpiringGroceryCard card \u003d (IsExpiringGroceryCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 68,
      "ManasVegi": 1,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private GroceryListPanel groceryListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private TemplateListPanel templateListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private TemplateItemPanel templateItemPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private WasteListPanel wasteListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private ShoppingListPanel shoppingListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Tab templateListPage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Tab wasteListPage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Tab shoppingListPage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private StackPane templateListPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private StackPane templateItemPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private StackPane wasteListPanelPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private StackPane shoppingListPanelPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        groceryListPanel \u003d new GroceryListPanel(logic.getFilteredGroceryItemList(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                logic.getIFridgeSettings().getNumberOfDays());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(groceryListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getGroceryListFilePath());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Displays the waste list panel"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private void displayWasteListPanel() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteListPanel \u003d new WasteListPanel(logic.getFilteredWasteList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteListPanelPlaceholder.getChildren().add(wasteListPanel.getRoot());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        tabPane.getSelectionModel().select(wasteListPage);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        logger.info(\"Showing waste list panel.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Displays the template list panel"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private void displayTemplateListPanel() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        templateListPanel \u003d new TemplateListPanel(logic.getFilteredTemplateList());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        templateListPanelPlaceholder.getChildren().add(templateListPanel.getRoot());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        tabPane.getSelectionModel().select(templateListPage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Displays the shopping list panel"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private void displayShoppingListPanel() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        shoppingListPanel \u003d new ShoppingListPanel(logic.getFilteredShoppingList());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        shoppingListPanelPlaceholder.getChildren().add(shoppingListPanel.getRoot());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        tabPane.getSelectionModel().select(shoppingListPage);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryListPanel getGroceryListPanel() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return groceryListPanel;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateListPanel getTemplateListPanel() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templateListPanel;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItemPanel getTemplateItemPanel() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templateItemPanel;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteListPanel getWasteListPanel() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteListPanel;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingListPanel getShoppingListPanel() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingListPanel;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @see seedu.ifridge.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            if (commandResult.isWasteListCommand()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                displayWasteListPanel();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "teika97"
        },
        "content": "            } else if (commandResult.isTemplateListItemCommand()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "teika97"
        },
        "content": "                displayTemplateItemPanel();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            } else if (commandResult.isTemplateListCommand()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                displayTemplateListPanel();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            } else if (commandResult.isShoppingListCommand()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                displayShoppingListPanel();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            } else if (commandResult.isWasteReportCommand()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                displayWasteReport(logic.getWasteReport());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private void displayWasteReport(WasteReport wasteReport) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        ReportWasteWindow wasteWindow \u003d new ReportWasteWindow(wasteReport);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteWindow.showWasteReport();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Resets the templateListPanel to show the templateItemPanel whenever a templateItem command is executed"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private void displayTemplateItemPanel() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Name templateName \u003d logic.getNameTemplateToBeShown();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateItemPanel \u003d new TemplateItemPanel(logic.getFilteredTemplateToBeShown(), templateName.toString());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        templateItemPanelPlaceholder.getChildren().add(templateItemPanel.getRoot());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        logger.info(\"Showing template panel instead of templateList.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 43,
      "ManasVegi": 6,
      "teika97": 26,
      "zhangxuan97": 40,
      "kelvinnharris": 5,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/NotExpiringGroceryCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "public class NotExpiringGroceryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private static final String FXML \u003d \"NotExpiringGroceryCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GroceryList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private Label expiryDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public NotExpiringGroceryCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        expiryDate.setText(((GroceryItem) food).getExpiryDate().expiryDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        amount.setText(food.getAmount().fullAmt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        GroceryItem groceryItem \u003d (GroceryItem) food;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        groceryItem.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        if (!(other instanceof NotExpiringGroceryCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        NotExpiringGroceryCard card \u003d (NotExpiringGroceryCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 68,
      "ManasVegi": 1,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/ReportWasteWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.awt.BasicStroke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.awt.Font;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.chart.ChartFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.chart.JFreeChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.chart.block.BlockBorder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.chart.fx.ChartViewer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.chart.plot.XYPlot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.chart.renderer.xy.XYItemRenderer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.chart.title.TextTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.chart.ui.HorizontalAlignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.data.time.Month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.data.time.TimeSeries;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.data.time.TimeSeriesCollection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import org.jfree.data.xy.XYDataset;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteStatistic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Displays the waste report window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class ReportWasteWindow {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String WEIGHT_TITLE \u003d \"Wastage in Kilograms\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String WEIGHT_UNIT \u003d \"Kilograms\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String VOLUME_TITLE \u003d \"Wastage in Litres\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String VOLUME_UNIT \u003d \"Litres\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String QUANTITY_TITLE \u003d \"Wastage in Units\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final String QUANTITY_UNIT \u003d \"Units\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private WasteReport wasteReport;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public ReportWasteWindow(WasteReport wasteReport) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        requireNonNull(wasteReport);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteReport \u003d wasteReport;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        stage \u003d new Stage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        stage.setTitle(\"Waste Report\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        stage.setWidth(700);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        stage.setHeight(400);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Sets the stage and shows the report"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public void showWasteReport() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TimeSeries historicalWeightData \u003d new TimeSeries(\"Waste in kilograms\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TimeSeries historicalVolumeData \u003d new TimeSeries(\"Volume in litres\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TimeSeries historicalQuantityData \u003d new TimeSeries(\"Quantity in units\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        for (Map.Entry\u003cWasteMonth, WasteStatistic\u003e entry : wasteReport) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            Month wasteMonthInJFree \u003d entry.getKey().toJFreeMonth();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            WasteStatistic statistic \u003d entry.getValue();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            float totalWeight \u003d statistic.getTotalWeight();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            float totalVolume \u003d statistic.getTotalVolume();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            float totalQuantity \u003d statistic.getTotalQuantity();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            historicalWeightData.add(wasteMonthInJFree, totalWeight);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            historicalVolumeData.add(wasteMonthInJFree, totalVolume);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            historicalQuantityData.add(wasteMonthInJFree, totalQuantity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        ChartViewer weightViewer \u003d getChartViewer(historicalWeightData, WEIGHT_TITLE, WEIGHT_UNIT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        ChartViewer volumeViewer \u003d getChartViewer(historicalVolumeData, VOLUME_TITLE, VOLUME_UNIT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        ChartViewer quantityViewer \u003d getChartViewer(historicalQuantityData, QUANTITY_TITLE, QUANTITY_UNIT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TabPane tabPane \u003d new TabPane();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Tab weightTab \u003d new Tab(\"Weight\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        weightTab.setContent(weightViewer);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        tabPane.getTabs().add(weightTab);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Tab volumeTab \u003d new Tab(\"Volume\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        volumeTab.setContent(volumeViewer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        tabPane.getTabs().add(volumeTab);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Tab quantityTab \u003d new Tab(\"Quantity\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        quantityTab.setContent(quantityViewer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        tabPane.getTabs().add(quantityTab);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        stage.setScene(new Scene(tabPane));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private ChartViewer getChartViewer(TimeSeries data, String title, String xAxisLabel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TimeSeriesCollection dataset \u003d new TimeSeriesCollection();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        dataset.addSeries(data);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        JFreeChart chart \u003d createChart(dataset, title, xAxisLabel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        ChartViewer viewer \u003d new ChartViewer(chart);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return viewer;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Creates a JFreeChart using the given dataset."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param dataset the dataset used to generate the chart"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param title the title of the chart"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param valueAxisLabel the y axis label."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static JFreeChart createChart(XYDataset dataset, String title, String valueAxisLabel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        JFreeChart chart \u003d ChartFactory.createTimeSeriesChart(title, null, valueAxisLabel, dataset);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        String fontName \u003d \"Roboto\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        chart.getTitle().setFont(new Font(fontName, Font.BOLD, 18));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        chart.addSubtitle(new TextTitle(\"For more details on reducing food waste, \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + \"visit https://www.thinkeatsave.org/top-tips-on-reducing-food-waste/\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                new Font(fontName, Font.PLAIN, 14)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        XYPlot plot \u003d (XYPlot) chart.getPlot();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.setDomainPannable(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.setRangePannable(true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.setDomainCrosshairVisible(true);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.setRangeCrosshairVisible(true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.getDomainAxis().setLowerMargin(0.0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.getDomainAxis().setLabelFont(new Font(fontName, Font.BOLD, 14));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.getDomainAxis().setTickLabelFont(new Font(fontName, Font.PLAIN, 12));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.getRangeAxis().setLabelFont(new Font(fontName, Font.BOLD, 14));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.getRangeAxis().setTickLabelFont(new Font(fontName, Font.PLAIN, 12));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        chart.getLegend().setItemFont(new Font(fontName, Font.PLAIN, 14));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        chart.getLegend().setFrame(BlockBorder.NONE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        chart.getLegend().setHorizontalAlignment(HorizontalAlignment.CENTER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        XYItemRenderer r \u003d plot.getRenderer();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        if (r instanceof XYLineAndShapeRenderer) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            XYLineAndShapeRenderer renderer \u003d (XYLineAndShapeRenderer) r;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setDefaultShapesVisible(true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setDrawSeriesLineAsPath(true);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            // set the default stroke for all series"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setAutoPopulateSeriesStroke(false);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setDefaultStroke(new BasicStroke(3.0f));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setSeriesPaint(0, Color.BLACK);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setSeriesPaint(1, new Color(24, 123, 58));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setSeriesPaint(2, new Color(149, 201, 136));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setSeriesPaint(3, new Color(1, 62, 29));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setSeriesPaint(4, new Color(81, 176, 86));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setSeriesPaint(5, new Color(0, 55, 122));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            renderer.setSeriesPaint(6, new Color(0, 92, 165));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        plot.setBackgroundPaint(new Color(202, 229, 230));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return chart;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 155
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/ShoppingItemCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ShoppingItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static final String FXML \u003d \"ShoppingListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GroceryList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public final ShoppingItem shoppingItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItemCard(ShoppingItem shoppingItem, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.shoppingItem \u003d shoppingItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        name.setText(shoppingItem.getName().fullName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        amount.setText(shoppingItem.getAmount().fullAmt);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!(other instanceof ShoppingItemCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingItemCard card \u003d (ShoppingItemCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 shoppingItem.equals(card.shoppingItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 58,
      "zhangxuan97": 2
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/ShoppingListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Panel for shopping list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ShoppingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static final String FXML \u003d \"ShoppingListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ShoppingListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private ListView\u003cShoppingItem\u003e shoppingListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingListPanel(ObservableList\u003cShoppingItem\u003e shoppingItems) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingListView.setItems(shoppingItems);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingListView.setCellFactory(listView -\u003e new ShoppingListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ShoppingItem} using a {@code ShoppingItemCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    class ShoppingListViewCell extends ListCell\u003cShoppingItem\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        protected void updateItem(ShoppingItem shoppingItem, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            super.updateItem(shoppingItem, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (empty || shoppingItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                setGraphic(new ShoppingItemCard(shoppingItem, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 44,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/TemplateItemCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final String FXML \u003d \"TemplateItemCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GroceryList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public final TemplateItem templateItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItemCard(TemplateItem templateItem, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.templateItem \u003d templateItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        name.setText(templateItem.getName().fullName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        amount.setText(templateItem.getAmount().fullAmt);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!(other instanceof TemplateItemCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItemCard card \u003d (TemplateItemCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 templateItem.equals(card.templateItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "teika97": 57,
      "zhangxuan97": 2
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/TemplateItemPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Panel containing the list of template items."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateItemPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final String FXML \u003d \"TemplateItemPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TemplateItemPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private ListView\u003cTemplateItem\u003e templateItemView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItemPanel(ObservableList\u003cTemplateItem\u003e templateItemList, String templateName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateItemView.setItems(templateItemList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateItemView.setCellFactory(listView -\u003e new TemplateItemViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        name.setText(templateName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code TemplateItem} using a {@code TemplateItemCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    class TemplateItemViewCell extends ListCell\u003cTemplateItem\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        protected void updateItem(TemplateItem templateItem, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "            super.updateItem(templateItem, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "            if (empty || templateItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "                setGraphic(new TemplateItemCard(templateItem, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "teika97": 48,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/TemplateListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": " * An UI component that displays information of a {@code Template}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final String FXML \u003d \"TemplateListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GroceryList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public final UniqueTemplateItems template;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateListCard(UniqueTemplateItems template, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.template \u003d template;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        name.setText(template.getName().fullName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        if (!(other instanceof TemplateListCard)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateListCard card \u003d (TemplateListCard) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "                \u0026\u0026 template.equals(card.template);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "teika97": 54,
      "zhangxuan97": 2
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/TemplateListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Panel containing the list of template items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final String FXML \u003d \"TemplateListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TemplateListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private ListView\u003cUniqueTemplateItems\u003e templateListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateListPanel(ObservableList\u003cUniqueTemplateItems\u003e templateList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateListView.setItems(templateList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateListView.setCellFactory(listView -\u003e new TemplateListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Template} using a {@code TemplateListCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "    class TemplateListViewCell extends ListCell\u003cUniqueTemplateItems\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        protected void updateItem(UniqueTemplateItems template, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "            super.updateItem(template, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "            if (empty || template \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "                setGraphic(new TemplateListCard(template, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 45,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 5,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/ifridge/ui/WasteListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * Panel for waste list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class WasteListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private static final String FXML \u003d \"WasteListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WasteListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private ListView\u003cGroceryItem\u003e wasteListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteListPanel(ObservableList\u003cGroceryItem\u003e foodList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteListView.setItems(foodList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteListView.setCellFactory(listView -\u003e new WasteListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    class WasteListViewCell extends ListCell\u003cGroceryItem\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        protected void updateItem(GroceryItem food, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                setGraphic(new ExpiredGroceryCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "zhangxuan97": 46
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ".has-expired {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-background-color: #e88080;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-border-color: #d67676;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ".is-expiring {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-background-color: #eba77a;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-border-color: #cf9a74;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ".not-expiring {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-background-color: #7db5bd;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-border-color: #76acb3;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-background-color: #7db5bd;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-background-color: #76acb3;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-border-color: #4f556b;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "     -fx-background-color: derive(#4f556b, 20%);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ".template-item-display {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-min-width: 1000;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-background-color: transparent, #4e5766, transparent, #4e5766;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    -fx-background-color: #33768a;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 32,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/ExpiredGroceryCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"has-expired\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cLabel fx:id\u003d\"expiryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expiryDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 35
    }
  },
  {
    "path": "src/main/resources/view/GroceryItemCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"not-expiring\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "      \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "      \u003cLabel fx:id\u003d\"expiryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expiryDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "zhangxuan97": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/IsExpiringGroceryCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"is-expiring\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cLabel fx:id\u003d\"expiryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expiryDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 35
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1200.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"iFridge\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003cSplitPane dividerPositions\u003d\"0.3492462311557789\" focusTraversable\u003d\"true\" prefWidth\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "          \u003cVBox fx:id\u003d\"foodList\" minWidth\u003d\"200.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cLabel text\u003d\"Grocery List\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "          \u003cTabPane fx:id\u003d\"tabPane\" minWidth\u003d\"500.0\" prefWidth\u003d\"500.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003ctabs\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "              \u003cTab fx:id\u003d\"templateListPage\" style\u003d\"-fx-background-color: #7db5bd;\" text\u003d\"Template List\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cSplitPane dividerPositions\u003d\"0.3492462311557789\" focusTraversable\u003d\"true\" prefWidth\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                  \u003cVBox fx:id\u003d\"templateList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                      \u003cLabel text\u003d\"Template List\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"templateListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                  \u003cVBox fx:id\u003d\"templateItem\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                      \u003cLabel text\u003d\"Template Item\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"templateItemPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "              \u003cTab fx:id\u003d\"wasteListPage\" style\u003d\"-fx-background-color: #7db5bd;\" text\u003d\"Waste List\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cVBox fx:id\u003d\"wasteList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cLabel text\u003d\"Waste List\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"wasteListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "              \u003cTab fx:id\u003d\"shoppingListPage\" style\u003d\"-fx-background-color: #7db5bd;\" text\u003d\"Shopping List\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cVBox fx:id\u003d\"shoppingList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cLabel text\u003d\"Shopping List\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"shoppingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003c/tabs\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "          \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 43,
      "ManasVegi": 6,
      "teika97": 10,
      "zhangxuan97": 6,
      "-": 51
    }
  },
  {
    "path": "src/main/resources/view/NotExpiringGroceryCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"not-expiring\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cLabel fx:id\u003d\"expiryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expiryDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 36
    }
  },
  {
    "path": "src/main/resources/view/ShoppingListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 32
    }
  },
  {
    "path": "src/main/resources/view/ShoppingListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    \u003cListView fx:id\u003d\"shoppingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 8
    }
  },
  {
    "path": "src/main/resources/view/TemplateItemCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teika97": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/TemplateItemPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "  \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"template-item-display\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "  \u003cListView fx:id\u003d\"templateItemView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "teika97": 8
    }
  },
  {
    "path": "src/main/resources/view/TemplateListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 2,
      "teika97": 29
    }
  },
  {
    "path": "src/main/resources/view/TemplateListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "  \u003cListView fx:id\u003d\"templateListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teika97": 8
    }
  },
  {
    "path": "src/main/resources/view/WasteListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    \u003cListView fx:id\u003d\"wasteListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.JsonGroceryListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.JsonTemplateListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.JsonBoughtItemStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.JsonShoppingItemStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.wastelist.JsonWasteListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonGroceryListStorage groceryListStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                new JsonGroceryListStorage(temporaryFolder.resolve(\"grocerylist.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        JsonTemplateListStorage templateListStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "                new JsonTemplateListStorage(temporaryFolder.resolve(\"templateList.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        JsonWasteListStorage wasteListStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                new JsonWasteListStorage(temporaryFolder.resolve(\"wastelist.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonShoppingItemStorage shoppingListStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                new JsonShoppingItemStorage(temporaryFolder.resolve(\"shoppingList.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonBoughtItemStorage boughtListStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                new JsonBoughtItemStorage(temporaryFolder.resolve(\"boughtList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        StorageManager storage \u003d new StorageManager(groceryListStorage, userPrefsStorage, templateListStorage,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                wasteListStorage, shoppingListStorage, boughtListStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // Setup LogicManager with JsonGroceryListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonGroceryListStorage groceryListStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                new JsonGroceryListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionGroceryList.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem expectedFood \u003d new GroceryItemBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expectedModel.addGroceryItem(expectedFood);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredGroceryItemList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGroceryList(), new UserPrefs(), model.getTemplateList(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                model.getWasteArchive(), model.getShoppingList(), model.getBoughtList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static class JsonGroceryListIoExceptionThrowingStub extends JsonGroceryListStorage {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        private JsonGroceryListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void saveGroceryList(ReadOnlyGroceryList groceryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "ManasVegi": 14,
      "teika97": 2,
      "zhangxuan97": 20,
      "kelvinnharris": 8,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalBoughtList.getTypicalBoughtList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalGroceryItems.getTypicalGroceryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalShoppingList.getTypicalShoppingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateList.getTypicalTemplateList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteArchive.getTypicalWasteArchive;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model \u003d new ModelManager(getTypicalGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                getTypicalWasteArchive(), getTypicalShoppingList(), getTypicalBoughtList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food foodInList \u003d model.getGroceryList().getPersonList().get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertCommandFailure(new AddCommand(foodInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 2,
      "zhangxuan97": 9,
      "kelvinnharris": 4,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyWasteList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void constructor_nullGroceryItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void execute_groceryItemAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem validFood \u003d new GroceryItemBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFood).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFood), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(Arrays.asList(validFood), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem alice \u003d new GroceryItemBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem bob \u003d new GroceryItemBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public IFridgeSettings getIFridgeSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void setIFridgeSettings(IFridgeSettings iFridgeSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public Path getGroceryListFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setGroceryListFilePath(Path groceryListFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void addGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setGroceryList(ReadOnlyGroceryList newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ReadOnlyGroceryList getGroceryList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public boolean hasGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void deleteGroceryItem(GroceryItem target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setGroceryItem(GroceryItem target, GroceryItem editedFood) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredGroceryItemList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void updateFilteredGroceryItemList(Predicate\u003cGroceryItem\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void commitGroceryList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyGroceryList undoGroceryList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyGroceryList redoGroceryList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public boolean canUndoGroceryList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public boolean canRedoGroceryList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public Path getTemplateListFilePath() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplateListFilePath(Path templateListFilePath) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplateList(ReadOnlyTemplateList templateList) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ReadOnlyTemplateList getTemplateList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean hasTemplate(UniqueTemplateItems toAdd) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void deleteTemplate(UniqueTemplateItems target) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void addTemplate(UniqueTemplateItems toAdd) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplate(UniqueTemplateItems target, UniqueTemplateItems editedTemplate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setShownTemplate(UniqueTemplateItems templateToBeShown) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cUniqueTemplateItems\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void updateFilteredTemplateList(Predicate\u003cUniqueTemplateItems\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cTemplateItem\u003e getFilteredTemplateToBeShown() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cTemplateItem\u003e updateFilteredTemplateToBeShown() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public Name getNameTemplateToBeShown() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public Path getWasteListFilePath() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void setWasteListFilePath(Path wasteListFilePath) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void setWasteList(ReadOnlyWasteList wasteList) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ReadOnlyWasteList getWasteList() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ReadOnlyWasteList getWasteListByMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void addWasteItem(GroceryItem toAdd) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredWasteItemList() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredWasteItemListByMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public Set\u003cWasteMonth\u003e getListOfWasteMonths() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public boolean hasWasteMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public WasteMonth getEarliestWasteMonth() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public WasteMonth getLatestWasteMonth() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public TreeMap\u003cWasteMonth, WasteList\u003e getWasteArchive() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void updateFilteredWasteItemList(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void setWasteReport(WasteReport wasteReport) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public WasteReport getWasteReport() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void commitWasteList() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyWasteList undoWasteList() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyWasteList redoWasteList() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public Path getShoppingListFilePath() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setShoppingListFilePath(Path shoppingListFilePath) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void addShoppingItem(ShoppingItem food) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setShoppingList(ReadOnlyShoppingList newData) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ReadOnlyShoppingList getShoppingList() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public boolean hasShoppingItem(ShoppingItem food) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void deleteShoppingItem(ShoppingItem target) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setShoppingItem(ShoppingItem target, ShoppingItem editedFood) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ObservableList\u003cShoppingItem\u003e getFilteredShoppingList() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void updateFilteredShoppingList(Predicate\u003cShoppingItem\u003e predicate) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public Path getBoughtListFilePath() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setBoughtListFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void addBoughtItem(GroceryItem food) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setBoughtList(ReadOnlyGroceryList newData) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ReadOnlyGroceryList getBoughtList() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public boolean hasBoughtItem(GroceryItem food) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void deleteBoughtItem(GroceryItem target) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setBoughtItem(GroceryItem target, GroceryItem editedFood) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredBoughtItemList() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void updateFilteredBoughtItemList(Predicate\u003cGroceryItem\u003e predicate) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private final Food food;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ModelStubWithPerson(Food food) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public boolean hasGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return this.food.isSameFood(food);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final ArrayList\u003cFood\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public boolean hasGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return personsAdded.stream().anyMatch(food::isSameFood);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void addGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            personsAdded.add(food);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ReadOnlyGroceryList getGroceryList() {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return new GroceryList();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 51,
      "ManasVegi": 106,
      "teika97": 69,
      "zhangxuan97": 102,
      "kelvinnharris": 32,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                getTypicalWasteArchive(), getTypicalShoppingList(), getTypicalBoughtList());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                getTypicalWasteArchive(), getTypicalShoppingList(), getTypicalBoughtList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        expectedModel.setGroceryList(new GroceryList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 5,
      "zhangxuan97": 1,
      "kelvinnharris": 4,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.EditTemplateItemCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.testutil.EditTemplateItemDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String VALID_NAME_CHEESE \u003d \"Cheddar Cheese\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String VALID_NAME_TOMATO_JUICE \u003d \"Tomato Juice\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String VALID_AMOUNT_AMY \u003d \"300g\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String VALID_AMOUNT_BOB \u003d \"300g\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String VALID_AMOUNT_CHEESE \u003d \"300g\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String VALID_AMOUNT_TOMATO_JUICE \u003d \"300ml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_AMY \u003d \"10.08.2019\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_BOB \u003d \"10.08.2019\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String NAME_DESC_CHEESE \u003d \" \" + PREFIX_NAME + VALID_NAME_CHEESE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String NAME_DESC_TOMATO_JUICE \u003d \" \" + PREFIX_NAME + VALID_NAME_TOMATO_JUICE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String AMOUNT_DESC_AMY \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String AMOUNT_DESC_BOB \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String AMOUNT_DESC_CHEESE \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_CHEESE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String AMOUNT_DESC_TOMATO_JUICE \u003d \" \" + PREFIX_AMOUNT + VALID_NAME_TOMATO_JUICE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"300D\"; // \u0027D\u0027 is not a valid unit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final EditTemplateItemCommand.EditTemplateItemDescriptor DESC_TEMP_MINCED_MEAT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final EditTemplateItemCommand.EditTemplateItemDescriptor DESC_TEMP_TOMATO_JUICE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        DESC_AMY \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_AMY).withAmount(VALID_AMOUNT_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        DESC_BOB \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_BOB).withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DESC_TEMP_MINCED_MEAT \u003d new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_CHEESE)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withAmount(VALID_AMOUNT_CHEESE).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DESC_TEMP_TOMATO_JUICE \u003d new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_TOMATO_JUICE)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withAmount(VALID_AMOUNT_TOMATO_JUICE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryList expectedGroceryList \u003d new GroceryList(actualModel.getGroceryList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredGroceryItemList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(expectedGroceryList, actualModel.getGroceryList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredGroceryItemList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static void showItemAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // For grocery list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredGroceryItemList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food food \u003d model.getFilteredGroceryItemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        final String[] splitName \u003d food.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.updateFilteredGroceryItemList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(1, model.getFilteredGroceryItemList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // For template list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTemplateList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems template \u003d model.getFilteredTemplateList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(1, model.getFilteredTemplateList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 25,
      "zhangxuan97": 15,
      "kelvinnharris": 19,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalBoughtList.getTypicalBoughtList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalGroceryItems.getTypicalGroceryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalShoppingList.getTypicalShoppingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateList.getTypicalTemplateList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteArchive.getTypicalWasteArchive;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            getTypicalWasteArchive(), getTypicalShoppingList(), getTypicalBoughtList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem foodToDelete \u003d model.getFilteredGroceryItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGroceryList(), new UserPrefs(), model.getTemplateList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                model.getWasteArchive(), model.getShoppingList(), model.getBoughtList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expectedModel.deleteGroceryItem(foodToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGroceryItemList().size() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem foodToDelete \u003d model.getFilteredGroceryItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGroceryList(), new UserPrefs(), model.getTemplateList(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                model.getWasteArchive(), model.getShoppingList(), model.getBoughtList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expectedModel.deleteGroceryItem(foodToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getGroceryList().getGroceryList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        model.updateFilteredGroceryItemList(p -\u003e false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(model.getFilteredGroceryItemList().isEmpty());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 5,
      "zhangxuan97": 11,
      "kelvinnharris": 21,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalBoughtList.getTypicalBoughtList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalGroceryItems.getTypicalGroceryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalShoppingList.getTypicalShoppingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateList.getTypicalTemplateList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteArchive.getTypicalWasteArchive;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            getTypicalWasteArchive(), getTypicalShoppingList(), getTypicalBoughtList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem editedFood \u003d new GroceryItemBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder(editedFood).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GroceryList(model.getGroceryList()), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expectedModel.setGroceryItem(model.getFilteredGroceryItemList().get(0), editedFood);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredGroceryItemList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem lastFood \u003d model.getFilteredGroceryItemList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItemBuilder personInList \u003d new GroceryItemBuilder(lastFood);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem editedFood \u003d personInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GroceryList(model.getGroceryList()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expectedModel.setGroceryItem(lastFood, editedFood);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditTemplateItemDescriptor());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food editedFood \u003d model.getFilteredGroceryItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GroceryList(model.getGroceryList()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem foodInFilteredList \u003d model.getFilteredGroceryItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem editedFood \u003d new GroceryItemBuilder(foodInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                new EditFoodDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GroceryList(model.getGroceryList()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expectedModel.setGroceryItem(model.getFilteredGroceryItemList().get(0), editedFood);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food firstFood \u003d model.getFilteredGroceryItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder(firstFood).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food foodInList \u003d model.getGroceryList().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                new EditFoodDescriptorBuilder(foodInList).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGroceryItemList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getGroceryList().getGroceryList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                new EditFoodDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_GROCERY_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor copyDescriptor \u003d new EditTemplateItemDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 1,
      "ManasVegi": 7,
      "teika97": 5,
      "zhangxuan97": 9,
      "kelvinnharris": 36,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/EditFoodDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class EditFoodDescriptorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "   /* @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptorWithSameValues \u003d new EditTemplateItemDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor editedAmy \u003d new EditFoodDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        editedAmy \u003d new EditFoodDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 2,
      "zhangxuan97": 1,
      "kelvinnharris": 28
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "kelvinnharris": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalBoughtList.getTypicalBoughtList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalGroceryItems.getTypicalGroceryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalShoppingList.getTypicalShoppingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateList.getTypicalTemplateList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteArchive.getTypicalWasteArchive;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            getTypicalWasteArchive(), getTypicalShoppingList(), getTypicalBoughtList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            getTypicalWasteArchive(), getTypicalShoppingList(), getTypicalBoughtList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expectedModel.updateFilteredGroceryItemList(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredGroceryItemList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expectedModel.updateFilteredGroceryItemList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredGroceryItemList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 4,
      "zhangxuan97": 10,
      "kelvinnharris": 10,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "kelvinnharris": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalBoughtList.getTypicalBoughtList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalGroceryItems.getTypicalGroceryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalShoppingList.getTypicalShoppingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateList.getTypicalTemplateList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteArchive.getTypicalWasteArchive;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        model \u003d new ModelManager(getTypicalGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                getTypicalWasteArchive(), getTypicalShoppingList(), getTypicalBoughtList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                model.getWasteArchive(), getTypicalShoppingList(), getTypicalBoughtList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 3,
      "zhangxuan97": 10,
      "kelvinnharris": 4,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/templatelist/AddTemplateListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.AddTemplateItemCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyWasteList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.testutil.TemplateItemBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.testutil.UniqueTemplateItemsBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class AddTemplateListCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void constructor_nullTemplate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTemplateListCommand(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_templateAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ModelStubAcceptingTemplateAdded modelStub \u003d new ModelStubAcceptingTemplateAdded();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems validTemplate \u003d new UniqueTemplateItemsBuilder(new Name(\"Weekly Necessities\")).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new AddTemplateListCommand(validTemplate).execute(modelStub);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(String.format(AddTemplateListCommand.MESSAGE_SUCCESS, validTemplate),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(Arrays.asList(validTemplate), modelStub.templatesAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem mincedMeat \u003d new TemplateItemBuilder().withName(\"Ground Pork\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem freshVeg \u003d new TemplateItemBuilder().withName(\"Tomato\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        AddTemplateItemCommand addMincedMeatCommand \u003d new AddTemplateItemCommand(INDEX_FIRST_PERSON, mincedMeat);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        AddTemplateItemCommand addFreshVegCommand \u003d new AddTemplateItemCommand(INDEX_FIRST_PERSON, freshVeg);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(addMincedMeatCommand.equals(addMincedMeatCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        AddTemplateItemCommand addMincedMeatCommandCopy \u003d new AddTemplateItemCommand(INDEX_FIRST_PERSON, mincedMeat);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(addMincedMeatCommand.equals(addMincedMeatCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(addMincedMeatCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(addMincedMeatCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(addMincedMeatCommand.equals(addFreshVegCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public IFridgeSettings getIFridgeSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void setIFridgeSettings(IFridgeSettings iFridgeSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Path getGroceryListFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setGroceryListFilePath(Path groceryListFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void addGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setGroceryList(ReadOnlyGroceryList newData) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public ReadOnlyGroceryList getGroceryList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean hasGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void deleteGroceryItem(GroceryItem target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setGroceryItem(GroceryItem target, GroceryItem editedFood) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredGroceryItemList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void updateFilteredGroceryItemList(Predicate\u003cGroceryItem\u003e predicate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void commitGroceryList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyGroceryList undoGroceryList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyGroceryList redoGroceryList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public boolean canUndoGroceryList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public boolean canRedoGroceryList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public Path getTemplateListFilePath() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplateListFilePath(Path templateListFilePath) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplateList(ReadOnlyTemplateList templateList) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ReadOnlyTemplateList getTemplateList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean hasTemplate(UniqueTemplateItems toAdd) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void deleteTemplate(UniqueTemplateItems target) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void addTemplate(UniqueTemplateItems toAdd) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplate(UniqueTemplateItems target, UniqueTemplateItems editedTemplate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setShownTemplate(UniqueTemplateItems templateToBeShown) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cUniqueTemplateItems\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void updateFilteredTemplateList(Predicate\u003cUniqueTemplateItems\u003e predicate) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cTemplateItem\u003e getFilteredTemplateToBeShown() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cTemplateItem\u003e updateFilteredTemplateToBeShown() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public Name getNameTemplateToBeShown() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public Path getWasteListFilePath() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void setWasteListFilePath(Path wasteListFilePath) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void setWasteList(ReadOnlyWasteList wasteList) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ReadOnlyWasteList getWasteList() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ReadOnlyWasteList getWasteListByMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void addWasteItem(GroceryItem toAdd) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredWasteItemList() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredWasteItemListByMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public Set\u003cWasteMonth\u003e getListOfWasteMonths() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public boolean hasWasteMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public WasteMonth getEarliestWasteMonth() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public WasteMonth getLatestWasteMonth() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public TreeMap\u003cWasteMonth, WasteList\u003e getWasteArchive() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void updateFilteredWasteItemList(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void setWasteReport(WasteReport wasteReport) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public WasteReport getWasteReport() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void commitWasteList() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyWasteList undoWasteList() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyWasteList redoWasteList() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public Path getShoppingListFilePath() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setShoppingListFilePath(Path shoppingListFilePath) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void addShoppingItem(ShoppingItem food) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setShoppingList(ReadOnlyShoppingList newData) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ReadOnlyShoppingList getShoppingList() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public boolean hasShoppingItem(ShoppingItem food) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void deleteShoppingItem(ShoppingItem target) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setShoppingItem(ShoppingItem target, ShoppingItem editedFood) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ObservableList\u003cShoppingItem\u003e getFilteredShoppingList() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void updateFilteredShoppingList(Predicate\u003cShoppingItem\u003e predicate) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public Path getBoughtListFilePath() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setBoughtListFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void addBoughtItem(GroceryItem food) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setBoughtList(ReadOnlyGroceryList newData) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ReadOnlyGroceryList getBoughtList() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public boolean hasBoughtItem(GroceryItem food) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void deleteBoughtItem(GroceryItem target) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setBoughtItem(GroceryItem target, GroceryItem editedFood) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredBoughtItemList() {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void updateFilteredBoughtItemList(Predicate\u003cGroceryItem\u003e predicate) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * A Model stub that contains a single template."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private class ModelStubWithTemplate extends ModelStub {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "teika97"
        },
        "content": "        private final UniqueTemplateItems template;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ModelStubWithTemplate(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "teika97"
        },
        "content": "            requireNonNull(template);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "teika97"
        },
        "content": "            this.template \u003d template;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean hasTemplate(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "teika97"
        },
        "content": "            requireNonNull(template);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return this.template.isSameTemplate(template);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private class ModelStubAcceptingTemplateAdded extends ModelStub {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final ArrayList\u003cUniqueTemplateItems\u003e templatesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean hasTemplate(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "teika97"
        },
        "content": "            requireNonNull(template);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return templatesAdded.stream().anyMatch(template::isSameTemplate);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void addTemplate(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "teika97"
        },
        "content": "            requireNonNull(template);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "teika97"
        },
        "content": "            templatesAdded.add(template);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ReadOnlyTemplateList getTemplateList() {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new TemplateList();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 50,
      "ManasVegi": 102,
      "teika97": 239,
      "zhangxuan97": 106,
      "kelvinnharris": 4
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/templatelist/ClearTemplateListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class ClearTemplateListCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_emptyTemplateList_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(new ClearTemplateItemCommand(), model, ClearTemplateItemCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "         expectedModel);**/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_nonEmptyTemplateList_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // Unable to implement this check yet as ModelManager does not contain TemplateList methods"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**Model model \u003d new ModelManager(getTypicalTemplateList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTemplateList()), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.setTemplateList(new TemplateList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(new ClearTemplateItemCommand(), model, ClearTemplateItemCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "         expectedModel);**/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 27,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/templatelist/DeleteTemplateListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.DeleteTemplateItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class DeleteTemplateListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**private Model model \u003d new ModelManager(getTypicalTemplateList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem itemToDelete \u003d model.getFilteredTemplateItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteTemplateCommand \u003d new DeleteTemplateItemCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTemplateItemCommand.MESSAGE_DELETE_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "            itemToDelete);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTemplate(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.deleteTemplateItem(itemToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTemplateItemList().size() + 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteTemplateCommand \u003d new DeleteTemplateItemCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(deleteTemplateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem itemToDelete \u003d model.getFilteredTemplateItemList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteTemplateCommand \u003d new DeleteTemplateItemCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTemplateItemCommand.MESSAGE_DELETE_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "            itemToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGroceryList(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.deleteTemplateItem(itemToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showNoTemplateItem(expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(deleteTemplateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTemplate().getTemplate().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteTemplateCommand \u003d new DeleteTemplateItemCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(deleteTemplateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteFirstCommand \u003d new DeleteTemplateItemCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "                INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteSecondCommand \u003d new DeleteTemplateItemCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "                INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteFirstCommandCopy \u003d new DeleteTemplateItemCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "                INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private void showNoTemplateItem(Model model) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateItemList(p -\u003e false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(model.getFilteredTemplateItemList().isEmpty());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 103,
      "zhangxuan97": 4
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/templatelist/EditTemplateListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class EditTemplateListCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedTemplateItem \u003d new TemplateItemBuilder().build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder(editedTemplateItem).build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(EditTemplateItemCommand.MESSAGE_EDIT_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editedTemplateItem);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TemplateList(model.getTemplate()), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.setGroceryItem(model.getFilteredTemplateList().get(0), editedTemplateItem);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index indexLastTemplateItem \u003d Index.fromOneBased(model.getFilteredTemplateList().size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem lastTemplateItem \u003d model.getFilteredTemplateList().get(indexLastTemplateItem.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItemBuilder templateItemInList \u003d new TemplateItemBuilder(lastTemplateItem);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedTemplateItem \u003d templateItemInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(indexLastTemplateItem, descriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(EditTemplateItemCommand.MESSAGE_EDIT_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editedTemplateItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TemplateList(model.getTemplate()), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.setTemplateItem(lastTemplateItem, editedTemplateItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new EditTemplateItemDescriptor());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedTemplateItem \u003d model.getFilteredTemplateList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(EditTemplateItemCommand.MESSAGE_EDIT_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editedTemplateItem);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TemplateList(model.getTemplate()), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem templateItemsInFilteredList \u003d model.getFilteredTemplateList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedTemplateItem \u003d new TemplateItemBuilder(templateItemsInFilteredList)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withName(VALID_NAME_BOB).withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_BOB).withAmount(VALID_AMOUNT_BOB).build());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(EditTemplateItemCommand.MESSAGE_EDIT_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editedTemplateItem);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TemplateList(model.getTemplate()), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.setTemplateItem(model.getFilteredTemplateList().get(0), editedTemplateItem);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_duplicateTemplateItemUnfilteredList_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem firstTemplateItem \u003d model.getFilteredTemplateList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder(firstTemplateItem).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(editCommand, model, EditTemplateItemCommand.MESSAGE_DUPLICATE_TEMPLATE_ITEM);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_duplicateTemplateItemFilteredList_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem templateItemInList \u003d model.getTemplate().getTemplate().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "                new EditTemplateItemDescriptorBuilder(templateItemInList).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(editCommand, model, EditTemplateItemCommand.MESSAGE_DUPLICATE_TEMPLATE_ITEM);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_invalidTemplateItemIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTemplateList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_BOB)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "                withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TEMPLATE_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * but smaller than size of template list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_invalidTemplateItemIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTemplate().getTemplate().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "                new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_BOB).withAmount(VALID_AMOUNT_BOB).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TEMPLATE_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // Need to set a new DESC_AMY for CommandTestUtil with a TemplateItemDescriptor"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final EditTemplateItemCommand standardCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor copyDescriptor \u003d new EditTemplateItemDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand commandWithSameValues \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearTemplateItemCommand()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTemplateItemCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTemplateItemCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teika97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 158,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/templatelist/ListTemplateListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class ListTemplateListCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**@BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model \u003d new ModelManager(getTypicalTemplateList(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTemplate(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(new ListTemplateItemCommand(), model,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "            ListTemplateItemCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateListAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(new ListTemplateItemCommand(), model,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "            ListTemplateItemCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 30,
      "zhangxuan97": 2
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/templatelist/template/AddTemplateItemCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.IFridgeSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyShoppingList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyWasteList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteReport;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.testutil.TemplateItemBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class AddTemplateItemCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void constructor_nullTemplateItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTemplateItemCommand(null, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**@Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_templateItemAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ModelStubAcceptingTemplateItemAdded modelStub \u003d new ModelStubAcceptingTemplateItemAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem validTemplateItem \u003d new TemplateItemBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        CommandResult commandResult \u003d new AddTemplateItemCommand(INDEX_FIRST, validTemplateItem).execute(modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(String.format(AddTemplateItemCommand.MESSAGE_SUCCESS, validTemplateItem),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(Arrays.asList(validTemplateItem), modelStub.templateItemsAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }**/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem mincedMeat \u003d new TemplateItemBuilder().withName(\"Ground Pork\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem freshVeg \u003d new TemplateItemBuilder().withName(\"Tomato\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        AddTemplateItemCommand addMincedMeatCommand \u003d new AddTemplateItemCommand(INDEX_FIRST, mincedMeat);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "        AddTemplateItemCommand addFreshVegCommand \u003d new AddTemplateItemCommand(INDEX_FIRST, freshVeg);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(addMincedMeatCommand.equals(addMincedMeatCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        AddTemplateItemCommand addMincedMeatCommandCopy \u003d new AddTemplateItemCommand(INDEX_FIRST, mincedMeat);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(addMincedMeatCommand.equals(addMincedMeatCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(addMincedMeatCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(addMincedMeatCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(addMincedMeatCommand.equals(addFreshVegCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public IFridgeSettings getIFridgeSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void setIFridgeSettings(IFridgeSettings iFridgeSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public Path getGroceryListFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setGroceryListFilePath(Path groceryListFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void addGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public void setGroceryList(ReadOnlyGroceryList newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public ReadOnlyGroceryList getGroceryList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean hasGroceryItem(GroceryItem food) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void deleteGroceryItem(GroceryItem target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setGroceryItem(GroceryItem target, GroceryItem editedFood) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredGroceryItemList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void updateFilteredGroceryItemList(Predicate\u003cGroceryItem\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void commitGroceryList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyGroceryList undoGroceryList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyGroceryList redoGroceryList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public boolean canUndoGroceryList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public boolean canRedoGroceryList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public Path getTemplateListFilePath() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplateListFilePath(Path templateListFilePath) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplateList(ReadOnlyTemplateList templateList) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ReadOnlyTemplateList getTemplateList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean hasTemplate(UniqueTemplateItems toAdd) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void deleteTemplate(UniqueTemplateItems target) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void addTemplate(UniqueTemplateItems toAdd) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setTemplate(UniqueTemplateItems target, UniqueTemplateItems editedTemplate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cUniqueTemplateItems\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void updateFilteredTemplateList(Predicate\u003cUniqueTemplateItems\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teika97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void setShownTemplate(UniqueTemplateItems templateToBeShown) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cTemplateItem\u003e getFilteredTemplateToBeShown() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cTemplateItem\u003e updateFilteredTemplateToBeShown() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public Name getNameTemplateToBeShown() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public Path getWasteListFilePath() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void setWasteListFilePath(Path wasteListFilePath) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void setWasteList(ReadOnlyWasteList wasteList) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ReadOnlyWasteList getWasteList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ReadOnlyWasteList getWasteListByMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void addWasteItem(GroceryItem toAdd) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredWasteItemList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredWasteItemListByMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public Set\u003cWasteMonth\u003e getListOfWasteMonths() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public boolean hasWasteMonth(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public WasteMonth getEarliestWasteMonth() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public WasteMonth getLatestWasteMonth() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public TreeMap\u003cWasteMonth, WasteList\u003e getWasteArchive() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void updateFilteredWasteItemList(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public void setWasteReport(WasteReport wasteReport) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        public WasteReport getWasteReport() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public void commitWasteList() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyWasteList undoWasteList() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        public ReadOnlyWasteList redoWasteList() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public Path getShoppingListFilePath() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setShoppingListFilePath(Path shoppingListFilePath) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void addShoppingItem(ShoppingItem food) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setShoppingList(ReadOnlyShoppingList newData) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ReadOnlyShoppingList getShoppingList() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public boolean hasShoppingItem(ShoppingItem food) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void deleteShoppingItem(ShoppingItem target) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setShoppingItem(ShoppingItem target, ShoppingItem editedFood) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ObservableList\u003cShoppingItem\u003e getFilteredShoppingList() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void updateFilteredShoppingList(Predicate\u003cShoppingItem\u003e predicate) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public Path getBoughtListFilePath() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setBoughtListFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void addBoughtItem(GroceryItem food) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setBoughtList(ReadOnlyGroceryList newData) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ReadOnlyGroceryList getBoughtList() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public boolean hasBoughtItem(GroceryItem food) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void deleteBoughtItem(GroceryItem target) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void setBoughtItem(GroceryItem target, GroceryItem editedFood) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getFilteredBoughtItemList() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public void updateFilteredBoughtItemList(Predicate\u003cGroceryItem\u003e predicate) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private class ModelStubWithTemplateItem extends ModelStub {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "teika97"
        },
        "content": "        private final TemplateItem templateItem;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ModelStubWithTemplateItem(TemplateItem templateItem) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "teika97"
        },
        "content": "            requireNonNull(templateItem);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "teika97"
        },
        "content": "            this.templateItem \u003d templateItem;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean hasTemplateItem(TemplateItem templateItem) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "teika97"
        },
        "content": "            requireNonNull(templateItem);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return this.templateItem.isSameFood(templateItem);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private class ModelStubAcceptingTemplateItemAdded extends ModelStub {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final ArrayList\u003cTemplateItem\u003e templateItemsAdded \u003d new ArrayList\u003cTemplateItem\u003e();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final ArrayList\u003cUniqueTemplateItems\u003e templatesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cUniqueTemplateItems\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return (ObservableList\u003cUniqueTemplateItems\u003e) templatesAdded;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public boolean hasTemplateItem(TemplateItem templateItem) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "teika97"
        },
        "content": "            requireNonNull(templateItem);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return templateItemsAdded.stream().anyMatch(templateItem::isSameFood);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public void addTemplateItem(TemplateItem templateItem) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "teika97"
        },
        "content": "            requireNonNull(templateItem);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "teika97"
        },
        "content": "            templateItemsAdded.add(templateItem);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ReadOnlyTemplateList getTemplateList() {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return new TemplateList();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 50,
      "ManasVegi": 102,
      "teika97": 243,
      "zhangxuan97": 103,
      "kelvinnharris": 4
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/templatelist/template/DeleteTemplateItemCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static seedu.address.testutil.TypicalGroceryItems.getTypicalGroceryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static seedu.address.testutil.TypicalGroceryItems.getTypicalGroceryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static seedu.address.testutil.TypicalShoppingList.getTypicalShoppingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static seedu.address.testutil.TypicalTemplateList.getTypicalTemplateList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static seedu.address.testutil.TypicalWasteArchive.getTypicalWasteArchive;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "import seedu.address.model.food.TemplateItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "import seedu.address.model.food.UniqueTemplateItems;**/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class DeleteTemplateItemCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**private Model model \u003d new ModelManager(getTypicalGroceryList(), new UserPrefs(), getTypicalTemplateList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "                                           getTypicalWasteArchive(), getTypicalShoppingList() );**/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**@Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems templateToEdit \u003d model.getFilteredTemplateList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem itemToDelete \u003d templateToEdit.get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteCommand \u003d new DeleteTemplateItemCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTemplateItemCommand.MESSAGE_SUCCESS, itemToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGroceryList(), new UserPrefs(), model.getTemplateList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "                                                      model.getWasteArchive(), model.getShoppingList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateToEdit.remove(itemToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTemplateList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand withInvalidTempIndex \u003d new DeleteTemplateItemCommand(outOfBoundIndex, INDEX_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(withInvalidTempIndex, model, Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand withInvalidItemIndex \u003d new DeleteTemplateItemCommand(INDEX_FIRST, outOfBoundIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(withInvalidItemIndex, model, Messages.MESSAGE_INVALID_TEMPLATE_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem itemToDelete \u003d model.getFilteredTemplateItemList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteTemplateCommand \u003d new DeleteTemplateItemCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTemplateItemCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "            itemToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGroceryList(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.deleteTemplateItem(itemToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showNoTemplateItem(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(deleteTemplateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTemplate().getTemplate().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteTemplateCommand \u003d new DeleteTemplateItemCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(deleteTemplateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteFirstCommand \u003d new DeleteTemplateItemCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "                INDEX_FIRST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteSecondCommand \u003d new DeleteTemplateItemCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "                INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteTemplateItemCommand deleteFirstCommandCopy \u003d new DeleteTemplateItemCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "                INDEX_FIRST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private void showNoTemplateItem(Model model) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model.updateFilteredTemplateItemList(p -\u003e false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(model.getFilteredTemplateItemList().isEmpty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 121,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/templatelist/template/EditTemplateItemCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class EditTemplateItemCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedTemplateItem \u003d new TemplateItemBuilder().build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder(editedTemplateItem).build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(EditTemplateItemCommand.MESSAGE_EDIT_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editedTemplateItem);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TemplateList(model.getTemplate()), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.setGroceryItem(model.getFilteredTemplateList().get(0), editedTemplateItem);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index indexLastTemplateItem \u003d Index.fromOneBased(model.getFilteredTemplateList().size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem lastTemplateItem \u003d model.getFilteredTemplateList().get(indexLastTemplateItem.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItemBuilder templateItemInList \u003d new TemplateItemBuilder(lastTemplateItem);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedTemplateItem \u003d templateItemInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(indexLastTemplateItem, descriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(EditTemplateItemCommand.MESSAGE_EDIT_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editedTemplateItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TemplateList(model.getTemplate()), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.setTemplateItem(lastTemplateItem, editedTemplateItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new EditTemplateItemDescriptor());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedTemplateItem \u003d model.getFilteredTemplateList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(EditTemplateItemCommand.MESSAGE_EDIT_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editedTemplateItem);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TemplateList(model.getTemplate()), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem templateItemsInFilteredList \u003d model.getFilteredTemplateList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedTemplateItem \u003d new TemplateItemBuilder(templateItemsInFilteredList).withName(VALID_NAME_BOB)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "                withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "                new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_BOB).withAmount(VALID_AMOUNT_BOB).build());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(EditTemplateItemCommand.MESSAGE_EDIT_TEMPLATE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "            editedTemplateItem);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TemplateList(model.getTemplate()), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel.setTemplateItem(model.getFilteredTemplateList().get(0), editedTemplateItem);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_duplicateTemplateItemUnfilteredList_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem firstTemplateItem \u003d model.getFilteredTemplateList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder(firstTemplateItem).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(editCommand, model, EditTemplateItemCommand.MESSAGE_DUPLICATE_TEMPLATE_ITEM);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_duplicateTemplateItemFilteredList_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem templateItemInList \u003d model.getTemplate().getTemplate().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "                new EditTemplateItemDescriptorBuilder(templateItemInList).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(editCommand, model, EditTemplateItemCommand.MESSAGE_DUPLICATE_TEMPLATE_ITEM);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_invalidTemplateItemIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTemplateList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_BOB)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "                withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TEMPLATE_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * but smaller than size of template list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_invalidTemplateItemIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateItemAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTemplate().getTemplate().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand editCommand \u003d new EditTemplateItemCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "                new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_BOB).withAmount(VALID_AMOUNT_BOB).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TEMPLATE_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // Need to set a new DESC_AMY for CommandTestUtil with a TemplateItemDescriptor"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teika97"
        },
        "content": "        final EditTemplateItemCommand standardCommand \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor copyDescriptor \u003d new EditTemplateItemDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand commandWithSameValues \u003d new EditTemplateItemCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearTemplateItemCommand()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTemplateItemCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTemplateItemCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teika97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 158,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/commands/templatelist/template/ListTemplateItemCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.commands.templatelist.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class ListTemplateItemCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**@BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "        model \u003d new ModelManager(getTypicalTemplateList(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTemplate(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(new ListTemplateItemCommand(), model,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "            ListTemplateItemCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        showTemplateListAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertCommandSuccess(new ListTemplateItemCommand(), model,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "            ListTemplateItemCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 30,
      "zhangxuan97": 2
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem expectedFood \u003d new GroceryItemBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem expectedFoodMultipleTags \u003d new GroceryItemBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedFoodMultipleTags));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem expectedFood \u003d new GroceryItemBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 10,
      "ManasVegi": 2,
      "zhangxuan97": 6,
      "kelvinnharris": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // But bcuz of conflicts, we do only one INVALID ONE IN THIS CASE."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "evelynejuliet"
        },
        "content": "                + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "evelynejuliet": 8,
      "ManasVegi": 4,
      "teika97": 6,
      "zhangxuan97": 7,
      "kelvinnharris": 8,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/GroceryListParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class GroceryListParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final GroceryListParser parser \u003d new GroceryListParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem food \u003d new GroceryItemBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(food));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(new AddCommand(food), command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food food \u003d new GroceryItemBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder(food).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditFoodDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 2,
      "teika97": 1,
      "zhangxuan97": 13,
      "kelvinnharris": 9,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 7,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/templatelist/AddTemplateItemCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.AddTemplateItemCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class AddTemplateItemCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private AddTemplateListCommandParser parser \u003d new AddTemplateListCommandParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem expectedTemplateItem \u003d new TemplateItemBuilder(BOB).withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "                + AMOUNT_DESC_BOB, new AddTemplateItemCommand(expectedTemplateItem));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "                + AMOUNT_DESC_BOB, new AddTemplateItemCommand(expectedTemplateItem));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }**/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTemplateItemCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // name missing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // amount missing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, AMOUNT_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + AMOUNT_DESC_BOB,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + \" \" + VALID_AMOUNT_BOB,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + \" \" + VALID_AMOUNT_BOB,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "                expectedMessage);**/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "                + AMOUNT_DESC_BOB , Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "                + INVALID_AMOUNT_DESC , Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_AMOUNT_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "                + AMOUNT_DESC_BOB,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTemplateItemCommand.MESSAGE_USAGE));**/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 66,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/templatelist/DeleteTemplateItemCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": " * outside of the DeleteTemplateItemCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": " * same path through the DeleteTemplateItemCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class DeleteTemplateItemCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private DeleteTemplateListCommandParser parser \u003d new DeleteTemplateListCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_validArgs_returnsDeleteTemplateCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseSuccess(parser, \"1\", new DeleteTemplateItemCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //DeleteTemplateItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 25,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/templatelist/EditTemplateItemCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.EditTemplateItemCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.templatelist.template.EditTemplateItemCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class EditTemplateItemCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTemplateItemCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private EditTemplateItemCommandParser parser \u003d new EditTemplateItemCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseFailure(parser, NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseFailure(parser, \"1\", EditTemplateItemCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertParseFailure(parser, \"1 t/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // But bcuz of conflicts, we do only one INVALID ONE IN THIS CASE."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_AMOUNT_DESC,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index targetTemplateIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index targetItemIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String userInput \u003d targetTemplateIndex.getOneBased() + targetItemIndex.getOneBased() + AMOUNT_DESC_AMY"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "                + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withAmount(VALID_AMOUNT_AMY).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand expectedCommand \u003d new EditTemplateItemCommand(targetTemplateIndex,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "                targetItemIndex, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index targetTemplateIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index targetItemIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String userInput \u003d targetTemplateIndex.getOneBased() + targetItemIndex.getOneBased() + AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withAmount(VALID_AMOUNT_AMY).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemCommand expectedCommand \u003d new EditTemplateItemCommand(targetTemplateIndex,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "                targetItemIndex, descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //EditTemplateItemCommand expectedCommand \u003d new EditTemplateItemCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "        descriptor \u003d new EditTemplateItemDescriptorBuilder().withAmount(VALID_AMOUNT_AMY).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //expectedCommand \u003d new EditTemplateItemCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "                + AMOUNT_DESC_AMY + AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //EditTemplateItemCommand expectedCommand \u003d new EditTemplateItemCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditTemplateItemDescriptorBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //EditTemplateItemCommand expectedCommand \u003d new EditTemplateItemCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "                + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": "        descriptor \u003d new EditTemplateItemDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //expectedCommand \u003d new EditTemplateItemCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 117,
      "zhangxuan97": 5,
      "kelvinnharris": 12
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/logic/parser/templatelist/TemplateListParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.logic.parser.templatelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.GroceryListParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateListParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final GroceryListParser parser \u003d new GroceryListParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        GroceryItem food \u003d new GroceryItemBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(food));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(new AddCommand(food), command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Food food \u003d new GroceryItemBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditTemplateItemDescriptor descriptor \u003d new EditFoodDescriptorBuilder(food).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditFoodDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "teika97": 80,
      "zhangxuan97": 14
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/GroceryListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class GroceryListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private final GroceryList groceryList \u003d new GroceryList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertEquals(Collections.emptyList(), groceryList.getGroceryList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e groceryList.resetData(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList newData \u003d getTypicalGroceryList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        groceryList.resetData(newData);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertEquals(newData, groceryList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem editedAlice \u003d new GroceryItemBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        List\u003cGroceryItem\u003e newFoods \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryListStub newData \u003d new GroceryListStub(newFoods);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e groceryList.resetData(newData));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e groceryList.hasGroceryItem(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(groceryList.hasGroceryItem(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList.addGroceryItem(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(groceryList.hasGroceryItem(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList.addGroceryItem(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem editedAlice \u003d new GroceryItemBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(groceryList.hasGroceryItem(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e groceryList.getGroceryList().remove(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * A stub ReadOnlyGroceryList whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static class GroceryListStub implements ReadOnlyGroceryList {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        private final ObservableList\u003cGroceryItem\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryListStub(Collection\u003cGroceryItem\u003e foods) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.foods.setAll(foods);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        public ObservableList\u003cGroceryItem\u003e getGroceryList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 14,
      "zhangxuan97": 6,
      "kelvinnharris": 20,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertEquals(new GroceryList(), new GroceryList(modelManager.getGroceryList()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        userPrefs.setGroceryListFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        userPrefs.setGroceryListFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGroceryListFilePath(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        modelManager.setGroceryListFilePath(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertEquals(path, modelManager.getGroceryListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasGroceryItem(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(modelManager.hasGroceryItem(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        modelManager.addGroceryItem(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(modelManager.hasGroceryItem(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredGroceryItemList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList groceryList \u003d new GroceryListBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList differentGroceryList \u003d new GroceryList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateList templateList \u003d new TemplateListBuilder().withTemplateItem(DIET_PLAN)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withTemplateItem(BIRTHDAY_PARTY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateList differentTemplateList \u003d new TemplateList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive \u003d new WasteArchiveBuilder()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                .withWasteList(CURRENT_WASTE_LIST)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                .withWasteList(LAST_MONTH_WASTE_LIST).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TreeMap\u003cWasteMonth, WasteList\u003e differentWasteArchive \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingList shoppingList \u003d new ShoppingListBuilder().withShoppingItem(CAKE).withShoppingItem(DATES).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingList differentShoppingList \u003d new ShoppingList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList boughtList \u003d new GroceryListBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList differentBoughtList \u003d new GroceryList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        modelManager \u003d new ModelManager(groceryList, userPrefs, templateList, wasteArchive, shoppingList, boughtList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(groceryList, userPrefs, templateList,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                wasteArchive, shoppingList, boughtList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // different groceryList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentGroceryList, userPrefs, templateList, wasteArchive,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                shoppingList, boughtList)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // different templateList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(groceryList, userPrefs, differentTemplateList,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                differentWasteArchive, shoppingList, boughtList)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // different shoppingList -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(groceryList, userPrefs, templateList,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                wasteArchive, differentShoppingList, boughtList)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        modelManager.updateFilteredGroceryItemList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(groceryList, userPrefs, templateList, wasteArchive,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                shoppingList, boughtList)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        modelManager.updateFilteredGroceryItemList(PREDICATE_SHOW_ALL_GROCERY_ITEMS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        differentUserPrefs.setGroceryListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(groceryList, differentUserPrefs, templateList, wasteArchive,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                shoppingList, boughtList)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 30,
      "teika97": 6,
      "zhangxuan97": 7,
      "kelvinnharris": 12,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/TemplateListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.MINCEDBEEF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.MINCEDPORK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateList.DIET_PLAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateList.getTypicalTemplateList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.testutil.UniqueTemplateItemsBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final TemplateList templateList \u003d new TemplateList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(Collections.emptyList(), templateList.getTemplateList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e templateList.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void resetData_withValidReadOnlyTemplateList_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateList newData \u003d getTypicalTemplateList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateList.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(newData, templateList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void resetData_withDuplicateTemplates_throwsDuplicateTemplateException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems editedDietPlan \u003d new UniqueTemplateItemsBuilder(new Name(\"Diet Plan\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withTemplateItem(MINCEDBEEF).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cUniqueTemplateItems\u003e newTemplate \u003d Arrays.asList(DIET_PLAN, editedDietPlan);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateStub newData \u003d new TemplateStub(newTemplate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertThrows(DuplicateFoodException.class, () -\u003e templateList.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void hasTemplateList_nullTemplate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e templateList.hasTemplate(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void hasTemplate_templateNotInTemplateList_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(templateList.hasTemplate(DIET_PLAN));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void hasTemplateItem_personInTemplateList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateList.addTemplate(DIET_PLAN);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(templateList.hasTemplate(DIET_PLAN));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void hasTemplate_templateWithSameIdentityFieldsInTemplateList_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateList.addTemplate(DIET_PLAN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems editedDietPlan \u003d new UniqueTemplateItemsBuilder(new Name(\"Diet Plan\"))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .withTemplateItem(MINCEDPORK).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(templateList.hasTemplate(editedDietPlan));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void getTemplateItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e templateList.getTemplateList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * A stub ReadOnlyTemplateList whose template items list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static class TemplateStub implements ReadOnlyTemplateList {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "        private final ObservableList\u003cUniqueTemplateItems\u003e templates \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateStub(Collection\u003cUniqueTemplateItems\u003e templates) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "            this.templates.setAll(templates);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "        public ObservableList\u003cUniqueTemplateItems\u003e getTemplateList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return templates;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 94,
      "zhangxuan97": 9
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setGroceryListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "kelvinnharris": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/food/AmountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"^\")); // invalid format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1000\")); // numbers only, missing unit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"kg\")); // unit only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"abcde\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1000 KG\")); // invalid unit in capital letter"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1000 mole\")); // invalid unit in capital letter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //   \"(lbs?|g|kgs?|oz?|L|ml?|units)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1 lbs\")); // valid value and unit with spacing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1 g\")); // valid value and unit with spacing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1 kg\")); // valid value and unit with spacing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1 oz\")); // valid value and unit with spacing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1 L\")); // valid value and unit with spacing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1 ml\")); // valid value and unit with spacing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1 units\")); // valid value and unit with spacing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32 lbs\")); // valid value with decimal and unit with spacing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32 g\")); // valid value with decimal and unit with spacing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32 kg\")); // valid value with decimal and unit with spacing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32 oz\")); // valid value with decimal and unit with spacing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32 L\")); // valid value with decimal and unit with spacing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32 ml\")); // valid value with decimal and unit with spacing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32 units\")); // valid value with decimal and unit with spacing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32lbs\")); // valid value with decimal and unit with no spacing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32g\")); // valid value with decimal and unit with no spacing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32kg\")); // valid value with decimal and unit with no spacing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32oz\")); // valid value with decimal and unit with no spacing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32L\")); // valid value with decimal and unit with no spacing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32ml\")); // valid value with decimal and unit with no spacing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.32units\")); // valid value with decimal and unit with no spacing"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(Float.valueOf(\"1.32\"), Amount.getValue(new Amount(\"1.32ml\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(Float.valueOf(\"1.32\"), Amount.getValue(new Amount(\"1.32 ml\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void getUnit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(\"ml\", Amount.getUnit(new Amount(\"1.32ml\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(\"ml\", Amount.getUnit(new Amount(\"1.32 ml\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 71,
      "zhangxuan97": 2,
      "kelvinnharris": 3
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/food/ExpiryDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class ExpiryDateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpiryDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void constructor_invalidExpiryDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String invalidExpiryDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExpiryDate(invalidExpiryDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void isValidExpiryDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // null expiry date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExpiryDate.isValidExpiryDate(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // blank expiry date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"03/2019\")); // missing day"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"02-03\")); // missing year"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"10/21/2019\")); // invalid month"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"29/02/2017\")); // invalid date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"03 /05/2008\")); // contain spaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\" 03/05/2019\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"10/10/2019 \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"02-03-2019.\")); // trailing period"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // wrong format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"12/28/2019\")); // wrong format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"2019/12/28\")); // wrong format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"12-28-2019\")); // wrong format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"2019.12.28\")); // wrong format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // valid expiry date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(ExpiryDate.isValidExpiryDate(\"03/05/2008\")); // forward slash format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "kelvinnharris": 52
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/food/FoodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food food \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(ALICE.isSameFood(ALICE));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ALICE.isSameFood(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(ALICE.isSameFood(editedAlice));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(ALICE.isSameFood(editedAlice));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(ALICE.isSameFood(editedAlice));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "zhangxuan97": 2,
      "kelvinnharris": 14,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/food/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(predicate.test(new GroceryItemBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(predicate.test(new GroceryItemBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(predicate.test(new GroceryItemBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertTrue(predicate.test(new GroceryItemBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(predicate.test(new GroceryItemBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(predicate.test(new GroceryItemBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertFalse(predicate.test(new GroceryItemBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "kelvinnharris": 11,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/food/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/food/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        GroceryItem editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Food editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cFood\u003e) null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        uniquePersonList.setPersons(foodList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        List\u003cFood\u003e listWithDuplicateFoods \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicateFoods));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "kelvinnharris": 13,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/food/UniqueTemplateItemsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.MINCEDBEEF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.MINCEDCHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.testutil.TemplateItemBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class UniqueTemplateItemsTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private final UniqueTemplateItems uniqueTemplateItems \u003d new UniqueTemplateItems(new Name(\"Necessities\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void contains_nullTemplateItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTemplateItems.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void contains_templateItemNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(uniqueTemplateItems.contains(MINCEDBEEF));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void contains_templateItemInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(uniqueTemplateItems.contains(MINCEDBEEF));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void contains_templateItemWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedMincedBeef \u003d new TemplateItemBuilder(MINCEDBEEF).withAmount(\"300g\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertTrue(uniqueTemplateItems.contains(editedMincedBeef));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void add_nullTemplateItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTemplateItems.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void add_duplicateTemplateItem_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniqueTemplateItems.add(MINCEDBEEF));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItem_nullTargetTemplateItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTemplateItems.setTemplateItem(null, MINCEDBEEF));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItem_nullEditedTemplateItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "                uniqueTemplateItems.setTemplateItem(MINCEDBEEF, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItem_targetTemplateItemNotInList_throwsTemplateItemNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e uniqueTemplateItems.setTemplateItem(MINCEDBEEF, MINCEDBEEF));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItem_editedTemplateItemIsSameTemplateItem_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.setTemplateItem(MINCEDBEEF, MINCEDBEEF);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems expectedUniquePersonList \u003d new UniqueTemplateItems(new Name(\"Necessities\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedUniquePersonList.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueTemplateItems);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItem_editedTemplateItemHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateItem editedMincedBeef \u003d new TemplateItemBuilder(MINCEDBEEF).withAmount(\"300g\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.setTemplateItem(MINCEDBEEF, editedMincedBeef);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems expectedUniqueTemplateItems \u003d new UniqueTemplateItems(new Name(\"Necessities\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedUniqueTemplateItems.add(editedMincedBeef);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(expectedUniqueTemplateItems, uniqueTemplateItems);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItem_editedTemplateItemHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.setTemplateItem(MINCEDBEEF, MINCEDCHICKEN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems expectedUniqueTemplateItems \u003d new UniqueTemplateItems(new Name(\"Necessities\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedUniqueTemplateItems.add(MINCEDCHICKEN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(expectedUniqueTemplateItems, uniqueTemplateItems);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setPerson_editedTemplateItemHasNonUniqueIdentity_throwsDuplicateTemplateItemException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDCHICKEN);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniqueTemplateItems"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .setTemplateItem(MINCEDBEEF, MINCEDCHICKEN));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void remove_nullTemplateItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTemplateItems.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void remove_templateItemDoesNotExist_throwsTemplateItemNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e uniqueTemplateItems.remove(MINCEDBEEF));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void remove_existingTemplateItem_removesTemplateItem() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.remove(MINCEDBEEF);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems expectedUniqueTemplateItems \u003d new UniqueTemplateItems(new Name(\"Necessities\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(expectedUniqueTemplateItems, uniqueTemplateItems);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItems_nullUniqueTemplateItems_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTemplateItems"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teika97"
        },
        "content": "                .setTemplateItems((UniqueTemplateItems) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItems_uniqueTemplateItems_replacesOwnListWithProvidedUniqueTemplateItems() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems expectedUniqueTemplateItems \u003d new UniqueTemplateItems(new Name(\"Necessities\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedUniqueTemplateItems.add(MINCEDCHICKEN);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.setTemplateItems(expectedUniqueTemplateItems);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(expectedUniqueTemplateItems, uniqueTemplateItems);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItems_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTemplateItems.setTemplateItems((List\u003cTemplateItem\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItem_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.add(MINCEDBEEF);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cTemplateItem\u003e foodList \u003d Collections.singletonList(MINCEDCHICKEN);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teika97"
        },
        "content": "        uniqueTemplateItems.setTemplateItems(foodList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems expectedUniquePersonList \u003d new UniqueTemplateItems(new Name (\"Necessities\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teika97"
        },
        "content": "        expectedUniquePersonList.add(MINCEDCHICKEN);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueTemplateItems);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void setTemplateItems_listWithDuplicateTemplateItems_throwsDuplicateTemplateItemException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teika97"
        },
        "content": "        List\u003cTemplateItem\u003e listWithDuplicateFoods \u003d Arrays.asList(MINCEDBEEF, MINCEDBEEF);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniqueTemplateItems.setTemplateItems(listWithDuplicateFoods));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teika97"
        },
        "content": "            -\u003e uniqueTemplateItems.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 165,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/storage/JsonAdaptedGroceryItemTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalGroceryItems.BENSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class JsonAdaptedGroceryItemTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static final String VALID_AMOUNT \u003d BENSON.getAmount().toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private static final String VALID_EXPIRY_DATE \u003d BENSON.getExpiryDate().toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        JsonAdaptedFood person \u003d new JsonAdaptedFood(BENSON);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        JsonAdaptedGroceryItem person \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                new JsonAdaptedGroceryItem(INVALID_NAME, VALID_AMOUNT, VALID_EXPIRY_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        JsonAdaptedGroceryItem person \u003d new JsonAdaptedGroceryItem(null, VALID_AMOUNT, VALID_EXPIRY_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        JsonAdaptedGroceryItem person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                new JsonAdaptedGroceryItem(VALID_NAME, VALID_AMOUNT, VALID_EXPIRY_DATE, invalidTags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 2,
      "kelvinnharris": 17,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/storage/JsonAdaptedTemplateItemTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.storage.JsonAdaptedTemplateItem.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.MILK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class JsonAdaptedTemplateItemTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final String INVALID_NAME \u003d \"-----\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"500\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final String VALID_NAME \u003d MILK.getName().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final String VALID_AMOUNT \u003d MILK.getAmount().toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void toModelType_validTemplateItemDetails_returnsTemplateItem() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        JsonAdaptedTemplateItem templateItem \u003d new JsonAdaptedTemplateItem(MILK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertEquals(MILK, templateItem.toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        JsonAdaptedTemplateItem templateItem \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "                new JsonAdaptedTemplateItem(INVALID_NAME, VALID_AMOUNT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, templateItem::toModelType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        JsonAdaptedTemplateItem templateItem \u003d new JsonAdaptedTemplateItem(null, VALID_AMOUNT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, templateItem::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 33,
      "zhangxuan97": 6
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/storage/JsonGroceryListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyGroceryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class JsonGroceryListStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private java.util.Optional\u003cReadOnlyGroceryList\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new JsonGroceryListStorage(Paths.get(filePath)).readGroceryList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList original \u003d getTypicalGroceryList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonGroceryListStorage jsonGroceryListStorage \u003d new JsonGroceryListStorage(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        jsonGroceryListStorage.saveGroceryList(original, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ReadOnlyGroceryList readBack \u003d jsonGroceryListStorage.readGroceryList(filePath).get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //assertEquals(original, new GroceryList(readBack));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        jsonGroceryListStorage.saveGroceryList(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        readBack \u003d jsonGroceryListStorage.readGroceryList(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //assertEquals(original, new GroceryList(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        jsonGroceryListStorage.saveGroceryList(original); // file path not specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        readBack \u003d jsonGroceryListStorage.readGroceryList().get(); // file path not specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //assertEquals(original, new GroceryList(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private void saveAddressBook(ReadOnlyGroceryList groceryList, String filePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            new JsonGroceryListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    .saveGroceryList(groceryList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new GroceryList(), null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 18,
      "teika97": 1,
      "zhangxuan97": 4,
      "kelvinnharris": 6,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/storage/JsonSerializableGroceryListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class JsonSerializableGroceryListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableGroceryListTest\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTemplatesTemplateList.json\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTemplateTemplateList.json\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTemplateTemplateList.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList groceryListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList typicalPersonsGroceryList \u003d TypicalGroceryItems.getTypicalAddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);**/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 4,
      "teika97": 5,
      "zhangxuan97": 1,
      "kelvinnharris": 4,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/storage/JsonSerializableTemplateListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class JsonSerializableTemplateListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "            \"JsonSerializableTemplateListTest\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Path TYPICAL_TEMPLATE_ITEMS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .resolve(\"typicalTemplateItemsTemplateList.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Path INVALID_TEMPLATE_ITEM_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .resolve(\"invalidTemplateItemTemplateList.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Path DUPLICATE_TEMPLATE_ITEM_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .resolve(\"duplicateTemplateItemTemplateList.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**JsonSerializableTemplateList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TEMPLATE_ITEMS_FILE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "                JsonSerializableTemplateList.class).get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateList templateListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateList typicalTemplateItemsTemplateList \u003d TypicalTemplateList.getTypicalTemplateList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(templateListFromFile, typicalTemplateItemsTemplateList);**/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void toModelType_invalidTemplateItemFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**JsonSerializableTemplateList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TEMPLATE_ITEM_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "                JsonSerializableTemplateList.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);**/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void toModelType_duplicateTemplateItems_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        /**JsonSerializableTemplateList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TEMPLATE_ITEM_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "                JsonSerializableTemplateList.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTemplateList.MESSAGE_DUPLICATE_TEMPLATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "                dataFromFile::toModelType);**/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 42,
      "zhangxuan97": 1
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/storage/JsonTemplateListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teika97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ReadOnlyTemplateList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class JsonTemplateListStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "            \"JsonTemplateListStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void readTemplateList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTemplateList(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTemplateList\u003e readTemplateList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new JsonTemplateListStorage(Paths.get(filePath)).readTemplateList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertFalse(readTemplateList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTemplateList(\"notJsonFormatTemplateList.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void readTemplateList_invalidTemplateItemTemplateList_throwDataConversionException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertThrows(DataConversionException.class, () -\u003e readTemplateList(\"invalidTemplateItemTemplateList.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void readTemplateList_invalidAndValidTemplateItemTemplateList_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "        //assertThrows(DataConversionException.class, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // -\u003e readTemplateList(\"invalidAndValidTemplateItemTemplateList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void readAndSaveTemplateList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"typicalTemplatesTemplateList.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateList original \u003d getTypicalTemplateList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        JsonTemplateListStorage jsonTemplateListStorage \u003d new JsonTemplateListStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "        jsonTemplateListStorage.saveTemplateList(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        ReadOnlyTemplateList readBack \u003d jsonTemplateListStorage.readTemplateList(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(original, new TemplateList(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teika97"
        },
        "content": "        original.addTemplate(DIET_PLAN);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teika97"
        },
        "content": "        original.removeTemplate(BIRTHDAY_PARTY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teika97"
        },
        "content": "        jsonTemplateListStorage.saveTemplateList(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teika97"
        },
        "content": "        readBack \u003d jsonTemplateListStorage.readTemplateList(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(original, new TemplateList(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teika97"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teika97"
        },
        "content": "        original.addTemplate(WEEKLY_NECESSITIES);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": "        jsonTemplateListStorage.saveTemplateList(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "        readBack \u003d jsonTemplateListStorage.readTemplateList().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertEquals(original, new TemplateList(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }**/"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void saveTemplateList_nullTemplateList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTemplateList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Saves {@code templateList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private void saveTemplateList(ReadOnlyTemplateList templateList, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teika97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new JsonTemplateListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teika97"
        },
        "content": "                    .saveTemplateList(templateList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teika97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teika97"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teika97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public void saveTemplateList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teika97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTemplateList(new TemplateList(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 102,
      "zhangxuan97": 5
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        userPrefs.setGroceryListFilePath(Paths.get(\"data\\\\grocerylist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "zhangxuan97": 5,
      "kelvinnharris": 4,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.JsonBoughtItemStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.shoppinglist.JsonShoppingItemStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.storage.wastelist.JsonWasteListStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonGroceryListStorage groceryListStorage \u003d new JsonGroceryListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        JsonTemplateListStorage templateListStorage \u003d new JsonTemplateListStorage(getTempFilePath(\"ac\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        JsonWasteListStorage wasteListStorage \u003d new JsonWasteListStorage(getTempFilePath(\"ad\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonShoppingItemStorage shoppingListStorage \u003d new JsonShoppingItemStorage(getTempFilePath(\"ae\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        JsonBoughtItemStorage boughtListStorage \u003d new JsonBoughtItemStorage(getTempFilePath(\"af\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        storageManager \u003d new StorageManager(groceryListStorage, userPrefsStorage, templateListStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                wasteListStorage, shoppingListStorage, boughtListStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void addressBookReadSave() throws Exception {*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "         * {@link JsonGroceryListStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonGroceryListStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /*   GroceryList original \u003d getTypicalGroceryList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ReadOnlyGroceryList retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertEquals(original, new GroceryList(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertNotNull(storageManager.getGroceryListFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 11,
      "teika97": 1,
      "zhangxuan97": 7,
      "kelvinnharris": 3,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private GroceryList groceryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList \u003d new GroceryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public AddressBookBuilder(GroceryList groceryList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.groceryList \u003d groceryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public AddressBookBuilder withPerson(GroceryItem food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        groceryList.addGroceryItem(food);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return groceryList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "kelvinnharris": 8,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/EditFoodDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class EditFoodDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private EditFoodDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditFoodDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditFoodDescriptorBuilder(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.descriptor \u003d new EditFoodDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditFoodDescriptorBuilder(Food food) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor.setName(food.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //descriptor.setTags(food.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditFoodDescriptorBuilder withAmount(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor.setAmount(new Amount(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditFoodDescriptorBuilder withExpiryDate(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor.setExpiryDate(new ExpiryDate(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditFoodDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditFoodDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public EditFoodDescriptor build() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "zhangxuan97": 7,
      "kelvinnharris": 67
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/EditTemplateItemDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.EditTemplateItemCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.templatelist.template.EditTemplateItemCommand.EditTemplateItemDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A utility class to help with building EditTemplateItemDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class EditTemplateItemDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private EditTemplateItemCommand.EditTemplateItemDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateItemDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "        descriptor \u003d new EditTemplateItemCommand.EditTemplateItemDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateItemDescriptorBuilder(EditTemplateItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.descriptor \u003d new EditTemplateItemDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns an {@code EditTemplateItemDescriptor} with fields containing {@code TemplateItem}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateItemDescriptorBuilder(TemplateItem templateItem) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        descriptor \u003d new EditTemplateItemDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "        descriptor.setName(templateItem.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "        descriptor.setAmount(templateItem.getAmount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditTemplateItemDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateItemDescriptorBuilder withAmount(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        descriptor.setAmount(new Amount(name));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateItemDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public EditTemplateItemDescriptor build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 46,
      "zhangxuan97": 6
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/GroceryItemBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ExpiryDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class GroceryItemBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"300g\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final String DEFAULT_EXPIRY_DATE \u003d \"10.08.2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItemBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        expiryDate \u003d new ExpiryDate(DEFAULT_EXPIRY_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItemBuilder(GroceryItem foodToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        expiryDate \u003d foodToCopy.getExpiryDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItemBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItemBuilder withExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.expiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public GroceryItem build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new GroceryItem(name, amount, expiryDate, tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 1,
      "zhangxuan97": 7,
      "kelvinnharris": 70
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/GroceryListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A utility class to help with building GroceryList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " *     {@code GroceryList ab \u003d new GroceryListBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class GroceryListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private GroceryList groceryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public GroceryListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        groceryList \u003d new GroceryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public GroceryListBuilder(GroceryList groceryList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.groceryList \u003d groceryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public GroceryListBuilder withPerson(GroceryItem food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        groceryList.addGroceryItem(food);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public GroceryList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return groceryList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 31,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static String getAddCommand(Food food) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(food);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static String getPersonDetails(Food food) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        sb.append(PREFIX_NAME + food.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //food.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //   s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static String getEditFoodDescriptorDetails(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.fullAmt).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        descriptor.getExpiryDate().ifPresent(expiryDate -\u003e sb.append(PREFIX_EXPIRY_DATE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .append(expiryDate.expiryDate).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 3,
      "zhangxuan97": 9,
      "kelvinnharris": 8,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/ShoppingItemBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ShoppingItemBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"300g\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //public static final String DEFAULT_EXPIRY_DATE \u003d \"10.08.2019\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    //private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItemBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItemBuilder(ShoppingItem shoppingItemToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        name \u003d shoppingItemToCopy.getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        amount \u003d shoppingItemToCopy.getAmount();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItemBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /*public GroceryItemBuilder withExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.expiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /*/**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /*public GroceryItemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingItem build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new ShoppingItem(name, amount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 65,
      "zhangxuan97": 4
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/ShoppingListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ShoppingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A Waste List Builder"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ShoppingListBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private ShoppingList shoppingList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingListBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingList \u003d new ShoppingList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Constructs a shopping list builder."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param shoppingList the shopping list to construct a shopping list builder with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingListBuilder(ShoppingList shoppingList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.shoppingList \u003d shoppingList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Adds an item to the shopping list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param shoppingItem the item to be added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return the waste list with the added item"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingListBuilder withShoppingItem(ShoppingItem shoppingItem) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        shoppingList.addShoppingItem(shoppingItem);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ShoppingList build() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return shoppingList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 35,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TemplateItemBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A utility class to help with building TemplateItem objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateItemBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Minced Pork\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"300g\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItemBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItemBuilder(TemplateItem itemToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "        name \u003d itemToCopy.getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        amount \u003d itemToCopy.getAmount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItemBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateItem build() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new TemplateItem(name, amount);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 46,
      "zhangxuan97": 4
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TemplateListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A utility class to help with building TemplateList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": " *     {@code TemplateList tl \u003d new TemplateListBuilder().withTemplateItem(\"John\", \"300g\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TemplateListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private TemplateList templateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateList \u003d new TemplateList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateListBuilder(TemplateList templateList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "        this.templateList \u003d templateList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Adds a new {@code TemplateItem} to the {@code TemplateList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateListBuilder withTemplateItem(UniqueTemplateItems template) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "        templateList.addTemplate(template);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public TemplateList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return templateList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 31,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.grocerylist.GroceryListParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.templatelist.TemplateListParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.logic.parser.templatelist.template.TemplateItemParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static Index getMidIndex(Model model, String list) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "        switch (list) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case GroceryListParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Index.fromOneBased(model.getFilteredGroceryItemList().size() / 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case TemplateListParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return Index.fromOneBased(model.getFilteredTemplateList().size() / 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case TemplateItemParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return Index.fromOneBased(model.getFilteredTemplateToBeShown().size() / 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "            System.out.println(\"Add new case to use this method for a new list.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static Index getLastIndex(Model model, String list) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "        switch (list) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case GroceryListParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return Index.fromOneBased(model.getFilteredGroceryItemList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case TemplateListParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return Index.fromOneBased(model.getFilteredTemplateList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teika97"
        },
        "content": "        case TemplateItemParser.LIST_TYPE_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teika97"
        },
        "content": "            return Index.fromOneBased(model.getFilteredTemplateToBeShown().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teika97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teika97"
        },
        "content": "            System.out.println(\"Add new case to use this method for a new list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static Food getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return model.getFilteredGroceryItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns the template in the {@code model}\u0027s template list at {@code index}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static UniqueTemplateItems getTemplate(Model model, Index index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return model.getFilteredTemplateList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns the template item in the {@code model}\u0027s template at {@code index}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static TemplateItem getTemplateItem(Model model, Index templateIndex, Index itemIndex) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems template \u003d model.getFilteredTemplateList().get(templateIndex.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return template.get(itemIndex.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 37,
      "zhangxuan97": 9,
      "kelvinnharris": 4,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TypicalBoughtList.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class TypicalBoughtList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem ALICE \u003d new GroceryItemBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem BENSON \u003d new GroceryItemBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem CARL \u003d new GroceryItemBuilder().withName(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem DANIEL \u003d new GroceryItemBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem ELLE \u003d new GroceryItemBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem FIONA \u003d new GroceryItemBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem GEORGE \u003d new GroceryItemBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem HOON \u003d (GroceryItem) new GroceryItemBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem IDA \u003d (GroceryItem) new GroceryItemBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem AMY \u003d new GroceryItemBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final GroceryItem BOB \u003d new GroceryItemBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private TypicalBoughtList() {} // prevents instantiation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns an {@code GroceryList} with all the typical persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static GroceryList getTypicalBoughtList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList ab \u003d new GroceryList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (GroceryItem food : getTypicalPersons()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            ab.addGroceryItem(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static List\u003cGroceryItem\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 58,
      "zhangxuan97": 7
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TypicalGroceryItems.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.GroceryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class TypicalGroceryItems {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem ALICE \u003d new GroceryItemBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem BENSON \u003d new GroceryItemBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem CARL \u003d new GroceryItemBuilder().withName(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem DANIEL \u003d new GroceryItemBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem ELLE \u003d new GroceryItemBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem FIONA \u003d new GroceryItemBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem GEORGE \u003d new GroceryItemBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem HOON \u003d (GroceryItem) new GroceryItemBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem IDA \u003d (GroceryItem) new GroceryItemBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem AMY \u003d new GroceryItemBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static final GroceryItem BOB \u003d new GroceryItemBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private TypicalGroceryItems() {} // prevents instantiation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns an {@code GroceryList} with all the typical persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static GroceryList getTypicalGroceryList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        GroceryList ab \u003d new GroceryList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        for (GroceryItem food : getTypicalPersons()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            ab.addGroceryItem(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static List\u003cGroceryItem\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 12,
      "zhangxuan97": 7,
      "kelvinnharris": 16,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 4,
      "zhangxuan97": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TypicalShoppingList.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.ShoppingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.ShoppingItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A Typical Waste List"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class TypicalShoppingList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final ShoppingItem APPLE \u003d new ShoppingItemBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withAmount(\"3g\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final ShoppingItem BANANA \u003d new ShoppingItemBuilder().withName(\"Banana\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withAmount(\"5g\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final ShoppingItem CAKE \u003d new ShoppingItemBuilder().withName(\"Cake\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withAmount(\"10g\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final ShoppingItem DATES \u003d new ShoppingItemBuilder().withName(\"Dates\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withAmount(\"11g\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final ShoppingItem EGGS \u003d new ShoppingItemBuilder().withName(\"Eggs\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withAmount(\"15g\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final ShoppingItem FRIES \u003d new ShoppingItemBuilder().withName(\"Fries\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withAmount(\"20g\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static final ShoppingItem GRAPES \u003d new ShoppingItemBuilder().withName(\"Grapes\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            .withAmount(\"25g\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private TypicalShoppingList() {} // prevents instantiation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static ShoppingList getTypicalShoppingList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ShoppingList ab \u003d new ShoppingList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (ShoppingItem shoppingItem: getTypicalShoppingItems()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            ab.addShoppingItem(shoppingItem);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static List\u003cShoppingItem\u003e getTypicalShoppingItems() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA, CAKE, DATES, EGGS, FRIES, GRAPES));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 40,
      "zhangxuan97": 3
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TypicalTemplateItems.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_AMOUNT_CHEESE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_AMOUNT_TOMATO_JUICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_NAME_CHEESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.logic.commands.CommandTestUtil.VALID_NAME_TOMATO_JUICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A utility class containing a list of {@code TemplateItem} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TypicalTemplateItems {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final Name TEMPLATE_NAME_WEEKLY_NECESSITIES \u003d new Name(\"Weekly Necessities\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem MINCEDPORK \u003d new TemplateItemBuilder().withName(\"Ground Pork\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(\"300g\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem MINCEDBEEF \u003d new TemplateItemBuilder().withName(\"Ground Beef\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(\"300g\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem MINCEDCHICKEN \u003d new TemplateItemBuilder().withName(\"Ground Chicken\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(\"300g\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem TOMATO \u003d new TemplateItemBuilder().withName(\"Tomato\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(\"2units\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem MILK \u003d new TemplateItemBuilder().withName(\"FullFat Milk\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(\"1L\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem WINE \u003d new TemplateItemBuilder().withName(\"Red Wine\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(\"1L\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem EGGPLANT \u003d (TemplateItem) new TemplateItemBuilder().withName(\"Eggplant\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(\"3units\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem JUICE \u003d (TemplateItem) new TemplateItemBuilder().withName(\"Apple Juice\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(\"300ml\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem CHEESE \u003d new TemplateItemBuilder().withName(VALID_NAME_CHEESE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(VALID_AMOUNT_CHEESE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final TemplateItem TOMATO_JUICE \u003d new TemplateItemBuilder().withName(VALID_NAME_TOMATO_JUICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teika97"
        },
        "content": "            .withAmount(VALID_AMOUNT_TOMATO_JUICE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private TypicalTemplateItems() {} // prevents instantiation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns an {@code TemplateList} with all the typical persons."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static UniqueTemplateItems getTypicalTemplate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teika97"
        },
        "content": "        UniqueTemplateItems ab \u003d new UniqueTemplateItems(TEMPLATE_NAME_WEEKLY_NECESSITIES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teika97"
        },
        "content": "        for (TemplateItem templateItem : getTypicalTemplateItems()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teika97"
        },
        "content": "            ab.add(templateItem);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static List\u003cTemplateItem\u003e getTypicalTemplateItems() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MINCEDBEEF, MINCEDPORK, MINCEDCHICKEN, TOMATO, MILK));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 56,
      "zhangxuan97": 8
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TypicalTemplateList.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.MILK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.MINCEDBEEF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.MINCEDCHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.TOMATO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalTemplateItems.WINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.TemplateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A utility class containing a list of {@code TemplateItem} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class TypicalTemplateList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final UniqueTemplateItems WEEKLY_NECESSITIES \u003d new UniqueTemplateItemsBuilder("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new Name(\"Weekly Necessities\")).withTemplateItem(MINCEDBEEF).withTemplateItem(MILK).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final UniqueTemplateItems DIET_PLAN \u003d new UniqueTemplateItemsBuilder("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new Name(\"Diet Plan\")).withTemplateItem(TOMATO).withTemplateItem(MINCEDCHICKEN).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static final UniqueTemplateItems BIRTHDAY_PARTY \u003d new UniqueTemplateItemsBuilder("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": "            new Name(\"Birthday Party\")).withTemplateItem(WINE).withTemplateItem(MINCEDBEEF).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private TypicalTemplateList() {} // prevents instantiation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Returns an {@code TemplateList} with all the typical persons."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static TemplateList getTypicalTemplateList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teika97"
        },
        "content": "        TemplateList ab \u003d new TemplateList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teika97"
        },
        "content": "        for (UniqueTemplateItems templates: getTypicalTemplates()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teika97"
        },
        "content": "            ab.addTemplate(templates);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teika97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public static List\u003cUniqueTemplateItems\u003e getTypicalTemplates() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(WEEKLY_NECESSITIES, BIRTHDAY_PARTY, DIET_PLAN));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 35,
      "zhangxuan97": 9
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TypicalWasteArchive.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteList.APPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteList.BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteList.CAKE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteList.DATES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteList.EGGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteList.FRIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.TypicalWasteList.GRAPES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * A typical waste archive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class TypicalWasteArchive {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final WasteList CURRENT_WASTE_LIST \u003d new WasteListBuilder("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new WasteMonth(LocalDate.now()))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withWasteItem(APPLE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withWasteItem(BANANA)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withWasteItem(CAKE).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final WasteList LAST_MONTH_WASTE_LIST \u003d new WasteListBuilder("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            new WasteMonth(LocalDate.now().minusMonths(1)))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withWasteItem(DATES)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withWasteItem(EGGS)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withWasteItem(FRIES)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withWasteItem(GRAPES).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private TypicalWasteArchive() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static TreeMap\u003cWasteMonth, WasteList\u003e getTypicalWasteArchive() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        for (WasteList wl : getTypicalWasteLists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            wasteArchive.put(wl.getWasteMonth(), wl);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteArchive;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static List\u003cWasteList\u003e getTypicalWasteLists() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                add(CURRENT_WASTE_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "                add(LAST_MONTH_WASTE_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 53
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/TypicalWasteList.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * A Typical Waste List"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class TypicalWasteList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final GroceryItem APPLE \u003d new GroceryItemBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final GroceryItem BANANA \u003d new GroceryItemBuilder().withName(\"Banana\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final GroceryItem CAKE \u003d new GroceryItemBuilder().withName(\"Cake\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final GroceryItem DATES \u003d new GroceryItemBuilder().withName(\"Dates\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final GroceryItem EGGS \u003d new GroceryItemBuilder().withName(\"Eggs\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final GroceryItem FRIES \u003d new GroceryItemBuilder().withName(\"Fries\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static final GroceryItem GRAPES \u003d new GroceryItemBuilder().withName(\"Grapes\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private TypicalWasteList() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static WasteList getTypicalWasteList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteList wasteList \u003d new WasteList(new WasteMonth(LocalDate.now()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        for (GroceryItem item : getTypicalWasteItems()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "            wasteList.addWasteItem(item);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public static List\u003cGroceryItem\u003e getTypicalWasteItems() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA, CAKE, DATES, EGGS, FRIES, GRAPES));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 44
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/UniqueTemplateItemsBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.TemplateItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.UniqueTemplateItems;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teika97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teika97"
        },
        "content": " * A utility class to help with building UniqueTemplateItems objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teika97"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teika97"
        },
        "content": " *     {@code TemplateList tl \u003d new TemplateListBuilder().withTemplateItem(\"John\", \"300g\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teika97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teika97"
        },
        "content": "public class UniqueTemplateItemsBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teika97"
        },
        "content": "    private UniqueTemplateItems template;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public UniqueTemplateItemsBuilder(Name name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teika97"
        },
        "content": "        template \u003d new UniqueTemplateItems(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teika97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teika97"
        },
        "content": "     * Adds a new {@code TemplateItem} to the {@code UniqueTemplateItems} that we are building."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teika97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public UniqueTemplateItemsBuilder withTemplateItem(TemplateItem templateItem) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teika97"
        },
        "content": "        template.add(templateItem);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teika97"
        },
        "content": "    public UniqueTemplateItems build() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teika97"
        },
        "content": "        return template;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teika97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teika97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teika97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teika97": 27,
      "zhangxuan97": 4
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/WasteArchiveBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * A Waste List Builder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class WasteArchiveBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteArchiveBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteArchive \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteArchiveBuilder(TreeMap\u003cWasteMonth, WasteList\u003e wasteArchive) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteArchive \u003d wasteArchive;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Adds a new waste list to the waste archive."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param wasteList the waste list to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return an updated WasteArchiveBuilder"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteArchiveBuilder withWasteList(WasteList wasteList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        WasteMonth wlMonth \u003d wasteList.getWasteMonth();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteArchive.put(wlMonth, wasteList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public TreeMap\u003cWasteMonth, WasteList\u003e build() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return this.wasteArchive;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 37
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/testutil/WasteListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.WasteList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.food.GroceryItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.model.waste.WasteMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " * A Waste List Builder"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "public class WasteListBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    private WasteList wasteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteListBuilder(WasteMonth wasteMonth) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteList \u003d new WasteList(wasteMonth);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Constructs a waste list builder."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param wasteList the waste list to construct a waste list builder with."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteListBuilder(WasteList wasteList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        this.wasteList \u003d wasteList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * Adds an item to the waste list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @param wasteItem the item to be added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     * @return the waste list with the added item"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteListBuilder withWasteItem(GroceryItem wasteItem) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        wasteList.addWasteItem(wasteItem);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    public WasteList build() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "        return wasteList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 39
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/ifridge/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "package seedu.ifridge.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import static seedu.ifridge.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "import seedu.ifridge.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003c?import seedu.ifridge.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangxuan97"
        },
        "content": "\u003cfx:root type\u003d\"seedu.ifridge.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zhangxuan97": 1,
      "-": 5
    }
  }
]
