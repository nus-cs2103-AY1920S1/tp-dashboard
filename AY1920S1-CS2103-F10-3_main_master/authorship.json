[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d CS2103/T Revision Tool"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-F10-3/main[image:https://travis-ci.org/AY1920S1-CS2103-F10-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "https://ci.appveyor.com/project/khiangleon/main[image:https://ci.appveyor.com/api/projects/status/495w820p1xr6owq2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-F10-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-F10-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "https://app.netlify.com/sites/revisiontoolpreview/deploys[image:https://api.netlify.com/api/v1/badges/7af7f86f-2c47-49e2-ac61-ca1f2b2c794c/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level3?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level3\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "CS2103/T Revision Tool (RT) is a desktop application for storing test banks and acting as your one stop customisable revision tool before the exams! The features will be optimised for usage by CS2103/T students who happens to like using the CLI (Command Line Interface) for typing down their solutions. In addition, it also comes with the benefits of having a beautiful Graphical User Interface (GUI)!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* the original source of the code is from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 10,
      "-": 23
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "mainClassName \u003d \u0027seedu.revision.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u0027site-name\u0027: \u0027CS2103/T Revision Tool\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-F10-3/main\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "khiangleon": 2,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "CS2103/T Revision Tool was developed by the https://AY1920S1-CS2103-F10-3.github.io/docs/Team.html[AY1920S1-CS2103-F10-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d  Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: Project Advisor / Lecturer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Wilfred Bradley Tan"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::wilfredbtan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "{empty}[http://github.com/wilfredbtan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Responsibilities: Parser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Neo Si Hao"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::neoshh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "{empty}[http://github.com/neoshh[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: Scheduling and Tracking +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Ng Tze Xuan, Shuan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::ShaunNgTX.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "{empty}[http://github.com/ShaunNgTX[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Sim Khiang Leon"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::khiangleon.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "{empty}[http://github.com/khiangleon[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Keng Jun Xian"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::jxofficial.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "{empty}[http://github.com/jxofficial[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Responsibilities: Storage"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 29,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F10-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* *Email us* : You can also reach us at `wilfred @ u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d Test Bank - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F10-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "By: `Group F10-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  `Logic` uses the `TestBankParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a question)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* stores a `Question Bank` object that represents the Question Bank."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* stores the Test Bank data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cQuestion\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Test Bank`, which `Question` can reference. This would allow `Test Bank` to only require one `Tag` object per unique `Tag`, instead of each `Question` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* can save `Question Bank` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* can save the Test Bank data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d [Proposed] Add questions feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The add questions mechanism is facilitated by `AddCommand`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neoshh"
        },
        "content": "It extends `Command` that will read a user command and execute the command result."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* `AddCommand#addMcq()` -- Adds a mcq question to the test bank."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* `AddCommand#addShortAns()` -- Adds a short answer question to the test bank."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neoshh"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#addMcqCommand()` and `Model#addShortAnsCommand()` respectively."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Given below is an example usage scenario and how the add questions mechanism behaves at each step."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Step 1. The user types `add mcq q/\"string of question\" x/option1 x/option2 y/option3 x/option4 cat/[UML] diff/[easy]`, this command adds a easy difficulty mcq question about UML with 4 options and option3 being the correct answer."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Step 2. The command is being parse into the parser and the AddCommand object of type Command will be created."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Step 3. The AddCommand object will call its `addMcq()` method, this method will read the command and store the question with the answers into the `test bank` accordingly."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neoshh"
        },
        "content": "If a command fails its execution, it will not save the question into the `test bank`. It will however throw an invalid command exception."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The following sequence diagram shows how the add question operation works:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How add executes"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* **Alternative 1 (current choice):** Read and parse the command to execute it"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Format of the add command"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* **Alternative 1 (current choice):** Use a single line containing all the information of the question."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Pros: Faster for user to add a question."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Cons: Hard for user to memorize the long sequence which may cause invalid command input."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* **Alternative 2:** Use multiple steps to guide user on adding the question."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Pros: User do not have to memorize the correct format and less chance for an invalid command input."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Cons: Slow to add questions, requiring multiple steps to fully complete a question."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* is a CS2103/T student"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* prefer to use an app to help them to revise"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*Value proposition*: helps student to ace CS2103/T"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |lazy CS2103 student |refer to the revision tool solely for my consolidated module revision |do not have to refer to Luminus"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |have a personalised application to store all my questions and answers in one place |refer to it conveniently for revision."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |have a revision tool to test my coding skills and concepts through writing short codes |test myself on coding proficiency too."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |keep track and see how much progress I have made in completing the questions |gauge my level of progress in completing the syllabus."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |vim-using CS2103/T student |use the keyboard-based commands |further increase my efficiency"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |busy CS2103/T |use quick revision tools |learn using spaced-retrieval"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |busy CS2103 student |mark certain concepts as easy |will not have to spend as much time studying the easy concepts."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student with a lot of things on my mind |mark certain questions that I am unsure of |refer back to the question when I am free."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |import questions from my peers |study on my own."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |conscientious CS2103 student |export the questions I am unsure of |raise them up during tutorials."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |indecisive student |be recommended questions instead of me having to plan my own study plan |go directly to studying"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |competitive CS2103 student |at least know where I stand among my cohort |look at who is the next person I can beat."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |gamer CS2103/T student |accomplish tasks that give me a sense of achievement, preferably through in application rewards |I feel good."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |A+ CS2103 student |review and give suggestions to improve the application |benefit more CS2103 students."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 student |port this application over to my other modules |revise for my other modules using this application as well."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |unorganized CS2103 student |get reminders about my quiz deadlines |complete my quizzes on time"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |organized CS2103 student |schedule reminders to remind me when I should use the application to do revision |will not forget to do revision."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |user of the application |get an estimate of my final grade for CS2103 |know what to expect on result release day."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 peer tutor |use this as a form of teaching tool |teach better"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CAP 5.0 CS2103 student |show off my IQ by perfecting my test scores |motivate other students."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 student |view the questions/topics that most students answered wrongly |revise for those topics."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |visual oriented student |the app to have different colours as compared to the regular black and white |learn better"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |non-motivated CS2103 student |use the application to remind me to study |I will study"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |student that wants shortcuts |type a partial command and have it be auto-completed |I can save time."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 student new to Git |have a help function which lists all the commonly used Git commands |become more proficient with Git."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |master software engineer taking CS2103 |be able to access the source code |to make the application better and customise it for myself."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 student |get recommended a list of questions that I frequently get wrong |learn from my mistakes"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`*` |lonely CS2103 student |have someone to talk to, even if it’s a computer |I won\u0027t feel lonely"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`*` |CS2103 student who keeps having stomach ache |the application to tell me where the nearest toilet is |go and shit"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "neoshh": 78,
      "-": 352,
      "ShaunNgTX": 11
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d CS2103/T Revision Tool - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F10-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "By: `Team F10-3`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This CS2103/T Revision Tool (RT) is for those who *prefer to use a desktop app for storing test banks*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "More importantly, RT is *optimized for those who prefer to work with a Command Line"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If you can type fast, RT can get your contact management tasks done faster than traditional"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".  Download the latest RT link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your `*test bank*`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *`list`* : lists all categories and difficulties for the user to choose."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* **`add`**`mcq/According to the textbook, which kind of project is more difficult? x/Greenfield x/Brownfield y/None"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "of the above x/Padifield` : adds an mcq question with x/ (as in a cross for \"wrong\") marking the wrong answers and y/ (as in \"yes\") marking the correct answers."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* **`delete`**`3` : deletes the 3rd question shown in the current list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *`exit`* : exits the app."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add mcq/QUESTION`, `QUESTION` is a parameter"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "which can be used as `add mcq/What the recommended user story format?`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Items in square brackets are optional e.g `mcq/QUESTION [cat/CATEGORY]` can be used as"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`mcq/What is the recommended user story format cat?/Requirements` or as `mcq/What is the recommended user story format?`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[y/CORRECT_ANSWER]...` can be used as `{nbsp}` (i.e. 0 times), `y/Greenfield`, `y/Brownfield` etc."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `mcq/QUESTION cat/CATEGORY`, `cat/CATEGORY mcq/QUESTION` is also acceptable."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Starting the quiz: `start`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "User can start by choosing a `category`, `difficulty` or `recommended` bank of questions."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `start cat/[CATEGORY] diff/[difficulty]`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If no category or difficulty is stated (i.e. `start`), program will start the quiz with a recommended list of questions based on categories"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "that the user can improve on."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `start cat/implementation`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `start diff/2`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Ending the quiz: `end`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "User can end the quiz and go back into configuration mode to perform commands such as `add`, `list`, and `status`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `end`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Check your progress: `status`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Displays the number of questions answered correctly by category and difficulty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `status`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`status`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*Total*: 290/300 questions answered correctly"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Difficulty::"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Level 1: 100/100"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Level 2: 100/100"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Level 3: 90/100"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Category::"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Requirements: 100/100"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Design: 50/100"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Implementation: 50/100"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Project Management: 90/100"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Adding a question: `add`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Adds a question to the test bank"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `add [mcq/QUESTION] [cat/CATEGORY] [diff/DIFFICULTY] [x/WRONG_ANSWER]... [y/CORRECT_ANSWER]...`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `mcq/ According to the textbook, which kind of project is more difficult? x/Greenfield x/Brownfield y/None"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "of the above x/Padifield`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `mcq/ What are some characteristics of well-defined requirements? y/Unambiguous x/Untestable y/Clear y/Atomic`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//TODO: Improve edit. How to determine which question to change? Or just scrap this feature?"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d `*Need improvement*` Editing a question : `edit`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Edits an existing question in the test bank."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `edit INDEX [mcq/QUESTION] [cat/CATEGORY] [diff/DIFFICULTY] [x/WRONG_ANSWER]... [y/CORRECT_ANSWER]...`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Edits the question at the specified `INDEX`. The index refers to the index number shown in the displayed question list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* When editing category and/or difficulty, the existing category and/or difficulty of the question will be removed"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "i.e adding of category and/or difficulty is not cumulative."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* You can remove all the question\u0027s category and/or difficulty by typing `cat/` or `diff/` without specifying any tags after it."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `edit 1 mcq/According the the textbook, is greenfield or brownfield tougher?` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Edits the the question of the first mcq to \"According the the textbook, is greenfield or brownfield tougher?\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Deleting a question : `delete`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Deletes the specified questions from the test bank. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `delete INDEX [MORE_INDICES]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Delete the question(s) at the specified `INDEX`s."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* The index refers to the index number shown in the displayed question list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Deletes the 2nd question in the test bank list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `find Greenfield` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`delete 1 3 5` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Deletes the 1st, 3rd and 5th question in the test bank list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Listing all questions : `list`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Shows a list of all questions in the test back. If appended with a category and/or difficulty, `*Insert name*` will show all questions"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "of the chosen category and/or difficulty"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `list cat/[CATEGORY] diff/[DIFFICULTY]`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `list cat/requirements`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `list cat/requiments diff/2`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Locating questions: `find`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Finds questions whose descriptions contain any of the given keywords. +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* The search is case insensitive. e.g `brownfield` will match `Brownfield`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* The order of the keywords does not matter. e.g. `green field` will match `field green`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Only full words will be matched e.g. `Requirement` will not match `Requirements`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Descriptions matching at least one keyword will be returned (i.e. `OR` search). e.g. `User story` will return `User Survery`, `User Input`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `find User` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Returns `How do you gather user requirements?` and `What is the recommended user story format?`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `find User, Brownfield, Greenfield` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Returns any question containing descriptions `User`, `Brownfield`, or `Greenfield`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Clears all questions from the test bank. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Restoring all entries : `restore`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Clears all current questions from the test bank and restores the default questions that were in the original app. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `restore`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Test bank data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "// tag::import/export[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Importing / Exporting test banks `[coming in v2.0]`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "_{explain how the user can import / export test banks}_"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "// end::import/export[]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Test Bank folder."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Start* `start [cat/CATEGORY] [diff/DIFFICULTY]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *End* `end`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Status* : `status`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Add* `add [mcq/QUESTION] [cat/CATEGORY] [diff/DIFFICULTY] [x/WRONG_ANSWER]... [y/CORRECT_ANSWER]...` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `mcq/ What are some characteristics of well-defined requirements? y/Unambiguous x/Untestable y/Clear y/Atomic`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//TODO: update edit"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Edit (To be updated)* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Delete* : `delete INDEX [MORE_INDICS]` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `delete 1 3 5`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `find user story`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Restore* : `restore`"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 153,
      "khiangleon": 1,
      "-": 103
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Participant \":Logic\" as mainLogic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ui -[UI_COLOR]\u003e mainLogic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate mainLogic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "mainLogic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "model -[MODEL_COLOR]-\u003e mainLogic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "mainLogic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "storage --[STORAGE_COLOR]\u003e mainLogic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "mainLogic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate mainLogic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 9,
      "-": 28
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Participant \":LogicManager\" as mainLogic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "[-\u003e mainLogic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate mainLogic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "mainLogic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "ecp -\u003e ec ++: index, editAnswerableDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "abp --\u003e mainLogic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "jxofficial": 5,
      "-": 15
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 3,
      "-": 422
    }
  },
  {
    "path": "src/main/java/seedu/revision/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/revision/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/revision/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.MainLogic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.MainLogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.QuizLogic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.QuizLogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected MainLogic mainLogic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected QuizLogic quizLogic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Revision Tool ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        mainLogic \u003d new MainLogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        quizLogic \u003d new QuizLogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ui \u003d new UiManager(mainLogic, quizLogic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s revision tool and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The data from the sample revision tool will be used instead if {@code storage}\u0027s revision tool is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * or an empty revision tool will be used instead if errors occur when reading {@code storage}\u0027s revision tool."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Revision Tool ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 27,
      "jxofficial": 10,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static Level currentLogLevel \u003d Level.ALL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        consoleHandler.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX \u003d \"The answerable index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_ANSWERABLES_LISTED_OVERVIEW \u003d \"%1$d answerables listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_QUIZ_STARTED \u003d \"Quiz starting...!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 9,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * API of the MainLogic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @see seedu.revision.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of answerables */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ObservableList\u003cAnswerable\u003e getFilteredAnswerableList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the user prefs\u0027 revision tool file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 8,
      "jxofficial": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/MainLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Inherits Logic interface. Added functionality to original Logic interface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public interface MainLogic extends Logic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 17,
      "khiangleon": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/MainLogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.main.MainParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * The main MainLogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class MainLogicManager implements MainLogic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainLogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final MainParser mainParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public MainLogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        mainParser \u003d new MainParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command command \u003d mainParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            //since it\u0027s being stored here."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e getFilteredAnswerableList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return model.getFilteredAnswerableList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 15,
      "jxofficial": 8,
      "khiangleon": 5,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/QuizLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Inherits Logic interface. Added functionality to original Logic interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Specifically used to start the quiz session."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public interface QuizLogic extends Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    CommandResult execute(String commandText, Answerable currentAnswerable) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 17,
      "khiangleon": 4
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/QuizLogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.quiz.QuizParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * The main QuizManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class QuizLogicManager implements QuizLogic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MainLogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final QuizParser quizParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public QuizLogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        quizParser \u003d new QuizParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Quiz session in operation. Takes in user input and determines command to execute."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param currentAnswerable The current question to be responded to."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return commandResult to be executed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CommandResult execute(String commandText, Answerable currentAnswerable)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throws ParseException, CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command command \u003d quizParser.parseCommand(commandText, currentAnswerable);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //If user exits the quiz, restore the filtered list to original state."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            ListCommand originalList \u003d new ListCommand(null, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            originalList.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e getFilteredAnswerableList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return model.getFilteredAnswerableList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 21,
      "jxofficial": 23,
      "khiangleon": 11,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "jxofficial": 2,
      "-": 16,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Adds a answerable to the revision tool."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a question to the test bank. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION_TYPE + \"QUESTION TYPE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_CATEGORY + \"[CATEGORY]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION_TYPE + \"mcq \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION + \"Which of the following gives us the highest intensity of testing? \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_WRONG + \"50% statement coverage \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_CORRECT + \"100% path coverage \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_WRONG + \"70% branch coverage \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_WRONG + \"80% condition coverage \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_DIFFICULTY + \"3 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_CATEGORY + \"TestCoverage \" + PREFIX_CATEGORY + \"Week8 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ANSWERABLE \u003d \"This question already exists in the test bank\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Answerable toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Answerable}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AddCommand(Answerable answerable) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        toAdd \u003d answerable;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (model.hasAnswerable(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.addAnswerable(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 33,
      "jxofficial": 2,
      "khiangleon": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Clears the revision tool."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Test bank has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "jxofficial": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /** The quiz will start. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private final boolean start;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /** The restore window will open. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private final boolean showRestore;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /** To pass the Model. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.start \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.showRestore \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean start) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.showRestore \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean restore, Model model) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.start \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.showRestore \u003d restore;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean isStart() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public boolean isShowRestore() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return showRestore;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 1,
      "khiangleon": 3,
      "-": 70,
      "ShaunNgTX": 45
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Deletes one or more answerables identified using it\u0027s displayed index from the revision tool."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \": Deletes one or more questions identified by the index number used in the displayed question list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_DELETE_ANSWERABLE_SUCCESS \u003d \"Deleted Questions: %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DeleteCommand(ArrayList\u003cIndex\u003e targetIndexList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.targetIndexList.add(targetIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e lastShownList \u003d model.getFilteredAnswerableList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswerable\u003e toBeDeleted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Answerable answerableToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            toBeDeleted.add(answerableToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Answerable answerableToDelete : toBeDeleted) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            model.deleteAnswerable(answerableToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ANSWERABLE_SUCCESS, toBeDeleted.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof DeleteCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                // \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 64,
      "jxofficial": 2
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.model.Model.PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.QuestionType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Saq;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Edits the details of an existing answerable in the test bank."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the answerable identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"by the index number used in the displayed answerable list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"category]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION + \"Blackfield or Whitefield?\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_DIFFICULTY + \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_EDIT_ANSWERABLE_SUCCESS \u003d \"Edited Answerable: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ANSWERABLE \u003d \"This question already exists in the test bank.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final EditAnswerableDescriptor editAnswerableDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param index of the answerable in the filtered answerable list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param editAnswerableDescriptor details to edit the answerable with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditCommand(Index index, EditAnswerableDescriptor editAnswerableDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(editAnswerableDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.editAnswerableDescriptor \u003d new EditAnswerableDescriptor(editAnswerableDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e lastShownList \u003d model.getFilteredAnswerableList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerableToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAnswerable \u003d createEditedAnswerable(answerableToEdit, editAnswerableDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        validateAnswerableToEdit(answerableToEdit, editedAnswerable);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!answerableToEdit.isSameAnswerable(editedAnswerable) \u0026\u0026 model.hasAnswerable(editedAnswerable)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.setAnswerable(answerableToEdit, editedAnswerable);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.updateFilteredAnswerableList(PREDICATE_SHOW_ALL_ANSWERABLE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ANSWERABLE_SUCCESS, editedAnswerable));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Validates the {@code Answerable} used for the edit command by its type."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerableToEdit answerable that is to be edited."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param editedAnswerable answerable that has been edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws CommandException exception is thrown is edited answerable is not in the correct format according to type."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void validateAnswerableToEdit(Answerable answerableToEdit, Answerable editedAnswerable)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToEdit instanceof Mcq) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!Mcq.isValidMcq((Mcq) editedAnswerable)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new CommandException(Mcq.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToEdit instanceof Saq) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!Saq.isValidSaq((Saq) editedAnswerable)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new CommandException(Saq.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToEdit instanceof TrueFalse) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!TrueFalse.isValidTrueFalse((TrueFalse) editedAnswerable)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new CommandException(TrueFalse.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates and returns a {@code Answerable} with the details of {@code answerableToEdit}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * edited with {@code editAnswerableDescriptor}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static Answerable createEditedAnswerable("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Answerable answerableToEdit, EditAnswerableDescriptor editAnswerableDescriptor) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assert answerableToEdit !\u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Question updatedQuestion \u003d editAnswerableDescriptor.getQuestion().orElse(answerableToEdit.getQuestion());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e updatedCorrectAnswerList \u003d editAnswerableDescriptor.getCorrectAnswerList()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .orElse(answerableToEdit.getCorrectAnswerList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e updatedWrongAnswerList \u003d editAnswerableDescriptor.getWrongAnswerList()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .orElse(answerableToEdit.getWrongAnswerList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Difficulty updatedDifficulty \u003d editAnswerableDescriptor.getDifficulty().orElse(answerableToEdit"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .getDifficulty());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d editAnswerableDescriptor.getCategories().orElse(answerableToEdit"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .getCategories());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToEdit instanceof Mcq) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new Mcq(updatedQuestion, updatedCorrectAnswerList, updatedWrongAnswerList, updatedDifficulty,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    updatedCategories);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else if (answerableToEdit instanceof TrueFalse) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new TrueFalse(updatedQuestion, updatedCorrectAnswerList, updatedDifficulty, updatedCategories);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new Saq(updatedQuestion, updatedCorrectAnswerList, updatedDifficulty, updatedCategories);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 editAnswerableDescriptor.equals(e.editAnswerableDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Stores the details to edit the answerable with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * corresponding field value of the answerable."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static class EditAnswerableDescriptor {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private QuestionType questionType;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private Question question;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private ArrayList\u003cAnswer\u003e correctAnswerList;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private ArrayList\u003cAnswer\u003e wrongAnswerList;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private Difficulty difficulty;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public EditAnswerableDescriptor() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public EditAnswerableDescriptor(EditAnswerableDescriptor toCopy) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setQuestionType(toCopy.questionType);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setCorrectAnswerList(toCopy.correctAnswerList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setWrongAnswerList(toCopy.wrongAnswerList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setDifficulty(toCopy.difficulty);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(questionType, question, correctAnswerList, wrongAnswerList,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    difficulty, categories);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public QuestionType getQuestionType() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return questionType;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setQuestionType(QuestionType questionType) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.questionType \u003d questionType;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setCorrectAnswerList(ArrayList\u003cAnswer\u003e correctAnswerList) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.correctAnswerList \u003d correctAnswerList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public Optional\u003cArrayList\u003cAnswer\u003e\u003e getCorrectAnswerList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return Optional.ofNullable(correctAnswerList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setWrongAnswerList(ArrayList\u003cAnswer\u003e wrongAnswerList) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.wrongAnswerList \u003d wrongAnswerList;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public Optional\u003cArrayList\u003cAnswer\u003e\u003e getWrongAnswerList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return Optional.ofNullable(wrongAnswerList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setDifficulty(Difficulty difficulty) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public Optional\u003cDifficulty\u003e getDifficulty() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return Optional.ofNullable(difficulty);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        public void setCategories(Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            this.categories \u003d (categories !\u003d null) ? new HashSet\u003c\u003e(categories) : null;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        public Optional\u003cSet\u003cCategory\u003e\u003e getCategories() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return (categories !\u003d null) ? Optional.of(Collections.unmodifiableSet(categories)) : Optional.empty();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!(other instanceof EditAnswerableDescriptor)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            EditAnswerableDescriptor e \u003d (EditAnswerableDescriptor) other;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u0026\u0026 getCorrectAnswerList().equals(e.getCorrectAnswerList())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u0026\u0026 getWrongAnswerList().equals(e.getWrongAnswerList())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u0026\u0026 getDifficulty().equals(e.getDifficulty())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    \u0026\u0026 getCategories().equals(e.getCategories());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 148,
      "jxofficial": 15,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting quiz as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "jxofficial": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Finds and lists all answerables in test bank whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all answerables whose questions contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" greenfield brownfield\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final QuestionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public FindCommand(QuestionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.updateFilteredAnswerableList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String.format(Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW, model.getFilteredAnswerableList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 10,
      "jxofficial": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "jxofficial": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.model.Model.PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.CategoryPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.DifficultyPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Lists all answerables in the revision tool to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all questions which belong to the \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"specified category and difficulty (case-insensitive, optional) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + PREFIX_CATEGORY + \"UML \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + PREFIX_DIFFICULTY + \"2 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all answerables\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private CategoryPredicate categoryPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private DifficultyPredicate difficultyPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public ListCommand(CategoryPredicate categoryPredicate, DifficultyPredicate difficultyPredicate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.categoryPredicate \u003d categoryPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.difficultyPredicate \u003d difficultyPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cPredicate\u003cAnswerable\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (categoryPredicate !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            predicates.add(categoryPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (difficultyPredicate !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            predicates.add(difficultyPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // if predicate list is empty, it will just return a predicate which shows all answerable"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Predicate\u003cAnswerable\u003e combinedPredicate \u003d predicates.stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .reduce(PREDICATE_SHOW_ALL_ANSWERABLE, Predicate::and);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        model.updateFilteredAnswerableList(combinedPredicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String.format(Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW, model.getFilteredAnswerableList().size()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 12,
      "jxofficial": 37,
      "khiangleon": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/RestoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.model.Model.PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Format Restore instructions for every command for display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class RestoreCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"restore\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String SHOWING_CONFIRMATION_MESSAGE \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new CommandResult(SHOWING_CONFIRMATION_MESSAGE, true, model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 36
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/StartQuizCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.CategoryPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.DifficultyPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Command to start the quiz session."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class StartQuizCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Starts quiz based on Category, \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Difficulty or Mode.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_MODE + \"MODE\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_MODE + \"normal\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Starting Quiz!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static Object currentIteratedAnswerable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private CategoryPredicate categoryPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private DifficultyPredicate difficultyPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Mode mode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Answerable}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public StartQuizCommand(CategoryPredicate categoryPredicate, DifficultyPredicate difficultyPredicate, Mode mode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.categoryPredicate \u003d categoryPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.difficultyPredicate \u003d difficultyPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public CommandResult execute(Model model) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ListCommand quizList \u003d new ListCommand(categoryPredicate, difficultyPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        quizList.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 24,
      "jxofficial": 4,
      "khiangleon": 7,
      "ShaunNgTX": 22
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/quiz/McqInputCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * User inputs that answer the MCQ questions in the quiz session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class McqInputCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Input can only be A, B, C, or D (case insensitive)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final String mcqInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Answerable currentAnswerable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public McqInputCommand(String mcqInput, Answerable currentAnswerable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.mcqInput \u003d mcqInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.currentAnswerable \u003d currentAnswerable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answer selectedAnswer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (mcqInput.toLowerCase()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"a\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d currentAnswerable.getCombinedAnswerList().get(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"b\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d currentAnswerable.getCombinedAnswerList().get(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d currentAnswerable.getCombinedAnswerList().get(2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"d\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d currentAnswerable.getCombinedAnswerList().get(3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(selectedAnswer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String result \u003d currentAnswerable.isCorrect(selectedAnswer) ? \"correct\" : \"wrong\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(result, false, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22,
      "jxofficial": 38,
      "khiangleon": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/quiz/TfInputCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** TfInputCommand class used to execute user inputs for True and False Answerables. **/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TfInputCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Input can only be True(T) or False(F) (case insensitive)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final String tfInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Answerable currentAnswerable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TfInputCommand(String tfInput, Answerable currentAnswerable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.tfInput \u003d tfInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.currentAnswerable \u003d currentAnswerable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answer selectedAnswer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        switch (tfInput.toLowerCase()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"true\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"t\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d new Answer(\"true\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"false\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"f\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d new Answer(\"false\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            selectedAnswer \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(selectedAnswer);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String result \u003d currentAnswerable.isCorrect(selectedAnswer) ? \"correct\" : \"wrong\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new CommandResult(result , false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 8,
      "jxofficial": 43
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_QUESTION_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_CORRECT \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_WRONG \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_DIFFICULTY \u003d new Prefix(\"diff/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"cat/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_MODE \u003d new Prefix(\"mode/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 8,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.QuestionType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e answers} into a {@code Set\u003cAnswer\u003e}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static ArrayList\u003cAnswer\u003e parseAnswers(Collection\u003cString\u003e answers) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answers);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final ArrayList\u003cAnswer\u003e answerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (String answer : answers) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Answer newAnswer \u003d parseAnswer(answer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (answerList.contains(newAnswer)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answerList.add(newAnswer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses {@code questionType} into an {@code QuestionType} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code questionType} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static QuestionType parseType(String questionType) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedType \u003d questionType.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Question.isValidQuestion(trimmedType)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(QuestionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new QuestionType(trimmedType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses a {@code String difficulty} into a {@code Difficulty}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code difficulty} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Difficulty parseDifficulty(String difficulty) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedDifficulty \u003d difficulty.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Difficulty.isValidDifficulty(trimmedDifficulty)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Difficulty(trimmedDifficulty);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses a {@code String Category} into a {@code Category}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if the given {@code Category} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (!Category.isValidCategoryName(trimmedCategory)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e Categorys} into a {@code Set\u003cCategory\u003e}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            categorySet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return categorySet;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses a {@code String mode} into a {@code Mode}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code mode} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Mode parseMode(String mode) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedMode \u003d mode.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Mode.isValidMode(trimmedMode)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Mode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Mode(trimmedMode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 89,
      "jxofficial": 11,
      "khiangleon": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/QuizParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Represents a QuizParser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public interface QuizParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    T parse(String userInput, Answerable currentAnswerable) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 17
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.QuestionType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Saq;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cAnswer\u003e correctAnswerList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cAnswer\u003e wrongAnswerList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION_TYPE, PREFIX_QUESTION, PREFIX_CORRECT, PREFIX_WRONG,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                PREFIX_DIFFICULTY, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionType questionType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_QUESTION_TYPE)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_QUESTION_TYPE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //assert validateQuestionType(questionType, argMultimap) : \"question not valid according to type\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        validateQuestionType(questionType, argMultimap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.categories \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerable;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (questionType.getType()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"mcq\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answerable \u003d new Mcq(question, correctAnswerList, wrongAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"tf\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            answerable \u003d new TrueFalse(question, correctAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"saq\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answerable \u003d new Saq(question, correctAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        validateAnswerableToAdd(answerable);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new AddCommand(answerable);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Validates that the question to be added is either an MCQ, TrueFalse or SAQ."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param questionType type of question to be added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws ParseException if question is in the wrong format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean validateQuestionType(QuestionType questionType, ArgumentMultimap argMultimap) throws"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String type \u003d questionType.getType();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int numCorrect \u003d argMultimap.getAllValues(PREFIX_CORRECT).size();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int numWrong \u003d argMultimap.getAllValues(PREFIX_WRONG).size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_CORRECT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                PREFIX_DIFFICULTY) \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.correctAnswerList \u003d ParserUtil.parseAnswers(argMultimap.getAllValues(PREFIX_CORRECT));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            switch (type.toLowerCase()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            case \"mcq\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                if (numCorrect \u003d\u003d 1 \u0026\u0026 numWrong \u003d\u003d 3 \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_WRONG)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    this.wrongAnswerList \u003d ParserUtil.parseAnswers(argMultimap.getAllValues(PREFIX_WRONG));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    throw new ParseException(Mcq.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            case \"tf\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                if (numCorrect \u003d\u003d 1 \u0026\u0026 numWrong \u003c\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    throw new ParseException(TrueFalse.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            case \"saq\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Validates the answerable by its type."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerableToAdd the answerable that is being added."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return a boolean to determine if answerable is valid. True if valid. False otherwise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException exception is thrown if answerable is not in the correct format."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean validateAnswerableToAdd(Answerable answerableToAdd)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToAdd instanceof Mcq) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!Mcq.isValidMcq((Mcq) answerableToAdd)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(Mcq.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToAdd instanceof Saq) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!Saq.isValidSaq((Saq) answerableToAdd)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(Saq.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToAdd instanceof TrueFalse) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!TrueFalse.isValidTrueFalse((TrueFalse) answerableToAdd)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(TrueFalse.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 99,
      "jxofficial": 20,
      "khiangleon": 9,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cIndex\u003e indexArray;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            indexArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            String[] rawIndices \u003d args.strip().split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            for (String index : rawIndices) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                indexArray.add(ParserUtil.parseIndex(index.strip()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new DeleteCommand(indexArray);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 11,
      "jxofficial": 4,
      "khiangleon": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION_TYPE, PREFIX_QUESTION, PREFIX_CORRECT, PREFIX_WRONG,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                        PREFIX_DIFFICULTY, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand.EditAnswerableDescriptor editAnswerableDescriptor \u003d new EditCommand.EditAnswerableDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            editAnswerableDescriptor.setQuestion("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            editAnswerableDescriptor.setDifficulty("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CORRECT).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            editAnswerableDescriptor.setCorrectAnswerList("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    ParserUtil.parseAnswers(argMultimap.getAllValues(PREFIX_CORRECT)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WRONG).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            editAnswerableDescriptor.setWrongAnswerList("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    ParserUtil.parseAnswers(argMultimap.getAllValues(PREFIX_WRONG)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        parseCategoriesForEdit(argMultimap.getAllValues(PREFIX_CATEGORY))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .ifPresent(editAnswerableDescriptor::setCategories);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!editAnswerableDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new EditCommand(index, editAnswerableDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e} if {@code categories} is non-empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * If {@code categories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * {@code Set\u003cCategory\u003e} containing zero categories."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Optional\u003cSet\u003cCategory\u003e\u003e parseCategoriesForEdit(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert categories !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return Optional.of(ParserUtil.parseCategories(categories));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 21,
      "jxofficial": 24,
      "khiangleon": 3,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String[] questionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(questionKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "jxofficial": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.CategoryPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.DifficultyPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Adds a filter to the list command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Can filter by category or difficulty of questions available."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Checks whether category or difficulty parsed in is available before executing list command to filter."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class ListCommandParser implements Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Command parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_DIFFICULTY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CategoryPredicate categoryPredicate \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        DifficultyPredicate difficultyPredicate \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Category categoryToFilter \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            categoryPredicate \u003d new CategoryPredicate(categoryToFilter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Difficulty difficultyToFilter \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            difficultyPredicate \u003d new DifficultyPredicate(difficultyToFilter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new ListCommand(categoryPredicate, difficultyPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "jxofficial": 31,
      "khiangleon": 6
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/MainParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.RestoreCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.StartQuizCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class MainParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        case RestoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return new RestoreCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        case StartQuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new StartQuizCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "jxofficial": 12,
      "khiangleon": 1,
      "-": 60,
      "ShaunNgTX": 7
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/StartQuizCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.StartQuizCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.CategoryPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.DifficultyPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Parses input arguments and creates a new StartQuizCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class StartQuizCommandParser implements Parser\u003cStartQuizCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StartQuizCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * and returns a StartQuizCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public StartQuizCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_DIFFICULTY, PREFIX_MODE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CategoryPredicate categoryPredicate \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DifficultyPredicate difficultyPredicate \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Mode chosenMode \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Category categoryToFilter \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            categoryPredicate \u003d new CategoryPredicate(categoryToFilter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Difficulty difficultyToFilter \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            difficultyPredicate \u003d new DifficultyPredicate(difficultyToFilter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            chosenMode \u003d ParserUtil.parseMode(argMultimap.getValue(PREFIX_MODE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new StartQuizCommand(categoryPredicate, difficultyPredicate, chosenMode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 27,
      "jxofficial": 4,
      "khiangleon": 4,
      "ShaunNgTX": 20
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/quiz/McqInputCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.McqInputCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.QuizParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class McqInputCommandParser implements QuizParser\u003cMcqInputCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public McqInputCommand parse(String args, Answerable currentAnswerable) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (args.matches(\"\\\\b[a-d]\\\\b|\\\\b[A-D]\\\\b\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new McqInputCommand(args, currentAnswerable);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, McqInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "jxofficial": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/quiz/QuizParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * In-charge of parsing commands during quiz session."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class QuizParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Checks if user input during quiz is valid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * It should be either an exit command, help command, or an answer to the current question."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param userInput user response or command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param currentAnswerable the current question"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return exit command or help command or MCQ input command parser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Command parseCommand(String userInput, Answerable currentAnswerable) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (currentAnswerable instanceof Mcq) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new McqInputCommandParser().parse(userInput, currentAnswerable);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else if (currentAnswerable instanceof TrueFalse) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new TfInputCommandParser().parse(userInput, currentAnswerable);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 21,
      "jxofficial": 24,
      "khiangleon": 16
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/quiz/TfInputCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.TfInputCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.QuizParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** TfInputCommandParser used to parse user inputs for True and False {@code Answerables}.**/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TfInputCommandParser implements QuizParser\u003cTfInputCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TfInputCommand parse(String args, Answerable currentAnswerable) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (args.matches(\"\\\\b(?i)(true|false|t|f)\\\\b\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new TfInputCommand(args, currentAnswerable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TfInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "jxofficial": 25
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.UniqueAnswerableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Wraps all data at the revision tool level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Duplicates are not allowed (by .isSameAnswerable comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final UniqueAnswerableList answerables;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerables \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates an AddressBook using the Answerables in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the contents of the answerable list with {@code answerables}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code answerables} must not contain duplicate answerables."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables(List\u003cAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answerables.setAnswerables(answerables);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setAnswerables(newData.getAnswerableList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //// answerable-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a answerable with the same identity as {@code answerable} exists in the revision tool."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerables.contains(answerable);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a answerable to the revision tool."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The answerable must not already exist in the revision tool."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void addAnswerable(Answerable p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerables.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the given answerable {@code target} in the list with {@code editedAnswerable}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code target} must exist in the revision tool."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * The answerable identity of {@code editedAnswerable} must not be the same as"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * another existing answerable in the revision tool."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable(Answerable target, Answerable editedAnswerable) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(editedAnswerable);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerables.setAnswerable(target, editedAnswerable);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code key} must exist in the revision tool."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void removeAnswerable(Answerable key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerables.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerables.asUnmodifiableObservableList().size() + \" answerables\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e getAnswerableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerables.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 answerables.equals(((AddressBook) other).answerables));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerables.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 35,
      "khiangleon": 2,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    Predicate\u003cAnswerable\u003e PREDICATE_SHOW_ALL_ANSWERABLE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the user prefs\u0027 revision tool file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the user prefs\u0027 revision tool file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces revision tool data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a answerable with the same identity as {@code answerable} exists in the revision tool."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    boolean hasAnswerable(Answerable answerable);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Deletes the given answerable."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The answerable must exist in the revision tool."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void deleteAnswerable(Answerable target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds the given answerable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code answerable} must not already exist in the revision tool."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void addAnswerable(Answerable answerable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the given answerable {@code target} with {@code editedAnswerable}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code target} must exist in the revision tool."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * The answerable identity of {@code editedAnswerable} must not be the same as"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * another existing answerable in the revision tool."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void setAnswerable(Answerable target, Answerable editedAnswerable);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered answerable list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ObservableList\u003cAnswerable\u003e getFilteredAnswerableList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates the filter of the filtered answerable list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void updateFilteredAnswerableList(Predicate\u003cAnswerable\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22,
      "khiangleon": 2,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents the in-memory model of the revision tool data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final FilteredList\u003cAnswerable\u003e filteredAnswerables;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.fine(\"Initializing with revision tool: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        filteredAnswerables \u003d new FilteredList\u003c\u003e(this.addressBook.getAnswerableList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return addressBook.hasAnswerable(answerable);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void deleteAnswerable(Answerable target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        addressBook.removeAnswerable(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void addAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        addressBook.addAnswerable(answerable);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        updateFilteredAnswerableList(PREDICATE_SHOW_ALL_ANSWERABLE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable(Answerable target, Answerable editedAnswerable) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireAllNonNull(target, editedAnswerable);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        addressBook.setAnswerable(target, editedAnswerable);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Answerable List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Answerable} backed by the internal list of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e getFilteredAnswerableList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return filteredAnswerables;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void updateFilteredAnswerableList(Predicate\u003cAnswerable\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        filteredAnswerables.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 filteredAnswerables.equals(other.filteredAnswerables);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 27,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Unmodifiable view of an revision tool."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an unmodifiable view of the answerables list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * This list will not contain any duplicate answerables."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ObservableList\u003cAnswerable\u003e getAnswerableList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Answerable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Answerable in the Test Bank."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class Answerable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Answerable.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final Question question;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final Difficulty difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final ArrayList\u003cAnswer\u003e correctAnswerList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final ArrayList\u003cAnswer\u003e wrongAnswerList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final ArrayList\u003cAnswer\u003e combinedAnswerList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Answerable(Question question, ArrayList\u003cAnswer\u003e correctAnswerList,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                      ArrayList\u003cAnswer\u003e wrongAnswerList, Difficulty difficulty, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireAllNonNull(question, difficulty, categories);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.correctAnswerList \u003d correctAnswerList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.wrongAnswerList \u003d wrongAnswerList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.combinedAnswerList \u003d Stream.concat("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                correctAnswerList.stream(), wrongAnswerList.stream())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cAnswer\u003e getCorrectAnswerList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return correctAnswerList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cAnswer\u003e getWrongAnswerList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return wrongAnswerList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cAnswer\u003e getCombinedAnswerList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return combinedAnswerList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns true if question has been answered correctly and false if it has been answered wrongly."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param selectedAnswer answer that user selected."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return true if correct or false if wrong."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isCorrect(Answer selectedAnswer) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (correctAnswerList.contains(selectedAnswer)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.info(\"correct answer selected\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"WRONG answer selected\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if both answerables with the same question have at least one other identity field that is the same."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * This defines a weaker notion of equality between two answerables."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isSameAnswerable(Answerable otherAnswerable) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (otherAnswerable \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!(otherAnswerable.getClass().equals(this.getClass()))) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean isSameMCq \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (this instanceof Mcq) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            isSameMCq \u003d otherAnswerable.getWrongAnswerList().equals(getWrongAnswerList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return otherAnswerable !\u003d null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u0026\u0026 otherAnswerable.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u0026\u0026 otherAnswerable.getCorrectAnswerList().equals(getCorrectAnswerList())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u0026\u0026 otherAnswerable.getDifficulty().equals(getDifficulty())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u0026\u0026 isSameMCq;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if both Answerables have the same identity and data fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * This defines a stronger notion of equality between two Answerables."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!(other instanceof Answerable)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable otherAnswerable \u003d (Answerable) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return otherAnswerable.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 otherAnswerable.getCorrectAnswerList().equals(getCorrectAnswerList())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 otherAnswerable.getWrongAnswerList().equals(getWrongAnswerList())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 otherAnswerable.getDifficulty().equals(getDifficulty())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 otherAnswerable.getCategories().equals(getCategories());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return Objects.hash(question, correctAnswerList, wrongAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        builder.append(\"Question: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Answers:\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Correct Answers: \" + getCorrectAnswerList())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Wrong Answers: \" + getWrongAnswerList())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Difficulty: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getDifficulty())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 84,
      "jxofficial": 11,
      "khiangleon": 3,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Difficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Questions\u0027s Difficulty in the test bank."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDifficulty(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Difficulty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //TODO: Change this constraint and implement the new constraint"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \"Difficulty should only contain numbers, and it should only be 1, 2, or 3\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-3]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code Difficulty}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param difficulty A valid difficulty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Difficulty(String difficulty) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidDifficulty(difficulty), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        value \u003d difficulty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a given string is a valid difficulty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidDifficulty(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof Difficulty // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 value.equals(((Difficulty) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 18,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Mcq.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Answerable in the Test Bank."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Mcq extends Answerable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"MCQs should only have 1 correct answer and 4 options in total\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Mcq(Question question, ArrayList\u003cAnswer\u003e correctAnswerList, ArrayList\u003cAnswer\u003e wrongAnswerList,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "               Difficulty difficulty, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(question, correctAnswerList, wrongAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Checks whether the input Mcq is valid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param mcq the mcq to validate."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return boolean to indicate whether Mcq is valid or not."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidMcq(Mcq mcq) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(mcq);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (mcq.getCorrectAnswerList().contains(Answer.emptyAnswer())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || mcq.getWrongAnswerList().contains(Answer.emptyAnswer())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (mcq.getWrongAnswerList().size() !\u003d 3) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns an entire text string of the answerable (question with all possible answers,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * difficulty level and categories)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return answerable string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        builder.append(\"Type: MCQ \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Question: \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Answers:\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Correct Answers: \" + getCorrectAnswerList())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Wrong Answers: \" + getWrongAnswerList())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Difficulty: \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getDifficulty())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 59,
      "khiangleon": 5
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Answerable\u0027s name in the revision tool."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Questions should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?\u003d\\\\s*\\\\S).*$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final String fullQuestion;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        fullQuestion \u003d question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return fullQuestion;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 fullQuestion.equals(((Question) other).fullQuestion)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return fullQuestion.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 20,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/QuestionType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents the type of Question"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class QuestionType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \"Question type should only be mcq, tf, or saq\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * The first character of the question type must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)mcq|saq|tf\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code QuestionType}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param type A valid question type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public QuestionType(String type) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidQuestionType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.type \u003d type.toLowerCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isValidQuestionType(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof QuestionType // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 type.equals(((QuestionType) other).type)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return type.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 57,
      "jxofficial": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Saq.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Answerable in the Test Bank."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Saq extends Answerable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"SAQs should not be blank.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Saq(Question question, ArrayList\u003cAnswer\u003e correctAnswerList, Difficulty difficulty,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "               Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(question, correctAnswerList, new ArrayList\u003c\u003e(), difficulty, categories);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Checks whether the input Saq is valid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param saq the saq to validate."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return boolean to indicate whether Saq is valid or not."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidSaq(Saq saq) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(saq);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (saq.getCorrectAnswerList().contains(Answer.emptyAnswer())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || saq.getWrongAnswerList().contains(Answer.emptyAnswer())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns an entire text string of the answerable (question with all possible answers,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * difficulty level and categories)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return answerable string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        builder.append(\"Type: SAQ \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Question: \")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Correct Answers: \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getCorrectAnswerList())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Difficulty: \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getDifficulty())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 51,
      "khiangleon": 7
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/TrueFalse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** TrueFalse class used to create True and False answerables. **/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TrueFalse extends Answerable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Message to be shown if user-added True and False {@code Answerable}is not is in the wrong format**/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \" T/F answer\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \" should only be True/False (case insensitive)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Validation Regex for the TrueFalse class used to validate user-added True and False {@code Answerable}. **/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)(true|false)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(TrueFalse.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TrueFalse(Question question, ArrayList\u003cAnswer\u003e correctAnswerList,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                     Difficulty difficulty, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(question, correctAnswerList, new ArrayList\u003c\u003e(), difficulty, categories);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Empty TrueFalse Answer used for validation."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return empty TrueFalse Answer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidTrueFalse(TrueFalse trueFalse) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(trueFalse);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (trueFalse.getCorrectAnswerList().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .anyMatch(a -\u003e a.getAnswer().matches(VALIDATION_REGEX))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || trueFalse.getWrongAnswerList().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .anyMatch(a -\u003e a.getAnswer().matches(VALIDATION_REGEX))) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isCorrect(Answer selectedAnswer) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answer caseInsensitiveAnswer \u003d new Answer(selectedAnswer.toString().toLowerCase());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (correctAnswerList.contains(caseInsensitiveAnswer)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            logger.info(\"correct answer selected\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        logger.info(\"WRONG answer selected\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        builder.append(\"Type: T/F \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(\"Question: \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(\" Answers:\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(\" Correct Answer: \" + getCorrectAnswerList())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(\" Difficulty: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(getDifficulty())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(\" Categories: \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 27,
      "jxofficial": 43
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/UniqueAnswerableList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.exceptions.AnswerableNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.answerable.exceptions.DuplicateAnswerableException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A list of answerables that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * A answerable is considered unique by comparing using {@code Answerable#isSameAnswerable(Answerable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * As such, adding and updating of answerables uses Answerable#isSameAnswerable(Answerable) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * so as to ensure that the answerable being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * UniqueAnswerableList. However, the removal of a answerable uses Answerable#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * as to ensure that the answerable with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @see Answerable#isSameAnswerable(Answerable)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class UniqueAnswerableList implements Iterable\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ObservableList\u003cAnswerable\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ObservableList\u003cAnswerable\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if the list contains an equivalent answerable as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean contains(Answerable toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAnswerable);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a answerable to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The answerable must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add(Answerable toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DuplicateAnswerableException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the answerable {@code target} in the list with {@code editedAnswerable}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * The answerable identity of {@code editedAnswerable} must not be the same as"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * another existing answerable in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable(Answerable target, Answerable editedAnswerable) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireAllNonNull(target, editedAnswerable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AnswerableNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!target.isSameAnswerable(editedAnswerable) \u0026\u0026 contains(editedAnswerable)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DuplicateAnswerableException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        internalList.set(index, editedAnswerable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Removes the equivalent answerable from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The answerable must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void remove(Answerable toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AnswerableNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables(UniqueAnswerableList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the contents of this list with {@code answerables}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code answerables} must not contain duplicate answerables."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables(List\u003cAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireAllNonNull(answerables);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!answerablesAreUnique(answerables)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DuplicateAnswerableException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        internalList.setAll(answerables);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Iterator\u003cAnswerable\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof UniqueAnswerableList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAnswerableList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if {@code answerables} contains only unique answerables."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean answerablesAreUnique(List\u003cAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (int i \u003d 0; i \u003c answerables.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c answerables.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                if (answerables.get(i).isSameAnswerable(answerables.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 132,
      "khiangleon": 7
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/answer/Answer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.model.answerable.answer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** Answer class used to create answers for {@code Answerable}s. **/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Message to be shown if user-added answer is not is in the wrong format**/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Answers should be not be blank.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Validation Regex for the Answer class used to validate user-added answers. **/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(.*\\\\n*.*)*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final String answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code Ansewr}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answer A valid answer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Empty Answer used for validation."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return empty Answer."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Answer emptyAnswer() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Answer(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 answer.equals(((Answer) other).answer)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answer.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 57,
      "jxofficial": 5
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/exceptions/AnswerableNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Signals that the operation is unable to find the specified answerable."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/exceptions/DuplicateAnswerableException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Signals that the operation will result in duplicate Answerables (Answerables are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DuplicateAnswerableException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DuplicateAnswerableException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(\"Operation would result in duplicate answerables\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "khiangleon": 2
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/predicates/CategoryPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Tests that a {@code Answerable}\u0027s {@code category} matches the category given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CategoryPredicate implements Predicate\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CategoryPredicate(Category category) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean test(Answerable answerable) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return answerable.getCategories()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                         .stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                         .map(category -\u003e category.categoryName)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                         .anyMatch(categoryName -\u003e categoryName.equalsIgnoreCase(this.category.categoryName));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || (other instanceof CategoryPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 category.equals(((CategoryPredicate) other).category)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "jxofficial": 32
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/predicates/DifficultyPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Tests that a {@code Answerable}\u0027s {@code difficulty} matches the difficulty given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class DifficultyPredicate implements Predicate\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Difficulty level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public DifficultyPredicate(Difficulty level) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean test(Answerable answerable) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return level.equals(answerable.getDifficulty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || (other instanceof DifficultyPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 level.equals(((DifficultyPredicate) other).level)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "jxofficial": 25,
      "khiangleon": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/predicates/QuestionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Tests that a {@code Answerable}\u0027s {@code Question} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class QuestionContainsKeywordsPredicate implements Predicate\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean test(Answerable answerable) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(answerable.getQuestion().fullQuestion, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 10,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/category/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a category in the revision tool."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCategoryName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Category names should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?\u003d\\\\s*\\\\S).*$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Constructs a {@code category}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param categoryName A valid category name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        checkArgument(isValidCategoryName(categoryName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Returns true if a given string is a valid category name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static boolean isValidCategoryName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return \u0027[\u0027 + categoryName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "jxofficial": 49
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/quiz/Mode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents the mode of a quiz in the Revision Tool."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Mode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Mode can only be -normal-, *chaos*, or ?custom?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)\\\\bnormal\\\\b|\\\\bchaos\\\\b|^\\\\bcustom\\\\b\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final String mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param mode A valid question."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Mode(String mode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidMode(mode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidMode(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof Mode // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 mode.equals(((Mode) other).mode)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return mode.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 58
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Answerable[] getSampleAnswerables() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answer defaultCorrectAnswer \u003d new Answer(\"CORRECT\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        ArrayList\u003cAnswer\u003e defaultCorrectAnswerList \u003d new ArrayList\u003c\u003e(Arrays.asList(defaultCorrectAnswer));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answer defaultWrongAnswer \u003d new Answer(\"WRONG\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        ArrayList\u003cAnswer\u003e defaultWrongAnswerList \u003d new ArrayList\u003c\u003e(Arrays.asList(defaultWrongAnswer,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                defaultWrongAnswer, defaultWrongAnswer));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //TODO: Implement actual answerable"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Answerable[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Sample Question\"), defaultCorrectAnswerList, defaultWrongAnswerList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"category 1\", \"category 2\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"What type of project is AB3?\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Brownfield\"))),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Greenfield\"), new Answer(\"Blackfield\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Whitefield\"))),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"introduction\", \"week 2\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is a delight of Software Engineering?\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"What you get of making things that are useful to others\"))),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"One must perform perfectly\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"One rarely controls the circumstances of his work or goal\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"The dependence upon others\"))),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"introduction\", \"pros and cons\", \"week 2\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is a woe of Software Engineering?\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Finding nitty little bugs\"))),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"What you get of having to solve puzzles\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"What you get of working in such a tractable medium\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"What you get of having to keep learning always\"))),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"introduction\", \"pros and cons\", \"week 2\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"What does IDE stand for?\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Integrated Development Environment\"))),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Integrated Development Editor\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Interchangeable Development Environment\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Integrated Development Enhancement\"))),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"implementation\", \"IDEs\", \"basic\", \"week 2\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Test cases can only be determined \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"by reviewing similar existing systems\"))),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"SUT stands for Software Under Test\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A test case failure is a mismatch between the actual behaviour \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"and the expected behaviour\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A test case failure may not always indicate a bug/defect in the SUT\"))),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"quality assurance\", \"testing\", \"week 2\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is true?\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"A regression is an unintended and undesirable side effect \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"of a modification\"))),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Regression testing is the re-testing of the \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"software to fix regression bugs\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Regression testing must be automated\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Regression testing is less effective when done frequently\"))),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"quality assurance\", \"testing\", \"week 2\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Downloading a copy of a remote repo to your computer is \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"called forking\"))),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"A local repo can pull from multiple \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"remote repositories\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"It is possible to set up a Git server on your own computer\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A pull request is mechanism for contributing code to a remote repo.\"))),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"project management\", \"revision control\", \"week 2\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Git uses a serial number (matching the exact nano-second a commit \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"was created) to uniquely identify a commit.\"))),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"After you initialize a git repo in a folder, \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"all files in that folder are automatically tracked by Git.\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"The git history does not contain everything that happened to the \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"tracked files. It only contains specific points that you committed to \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"the history.\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Git can show you the difference between two adjacent commits in the \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"version history.\"))),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"project management\", \"revision control\", \"week 2\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"To see the working folder at specific commit, \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"we ‘revert’ to that commit.\"))),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"The git history does not contain everything that \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"happened to the tracked files. It only contains specific points that you \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"committed to the history.\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"After you initialize a git repo in a folder, \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"all files in that folder are automatically tracked by Git.\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Git can show you the difference between two adjacent commits in the \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"version history.\"))),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"project management\", \"revision control\", \"week 2\")),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is true?\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"One aim of adopting a coding standard is to make the \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"entire code base look like it was written by one person.\"))),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"A developer should understand the importance of \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"following a coding standard. However, there is no need to follow one.\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"It is better if each developer followed their own style of coding \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"so that the code can be traced to the author easily.\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A coding standard is universal and not specific to any programming language\"))),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"implementation\", \"code quality\", \"week 3\")),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is true?\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"There are tools that can help to enforce some parts of a \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"coding standard e.g. indentation rules.\"))),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"It is better if each developer followed their \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"own style of coding so that the code can be traced to the author easily.\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A developer should understand the importance of following a coding standard. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"However, there is no need to follow one.\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Company\u0027s coding standard can be vastly different from typical \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"industry practices as long as it is consistent throughout the whole company\"))),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"implementation\", \"code quality\", \"week 3\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is true?\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"This variable name is compliant with the coding standard.\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"final static int RED \u003d 1;\"))),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Names such as i, j, k should not be used as \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"variable names as they are not descriptive enough.\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"This variable name is compliant with the coding standard.\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"boolean processingStatus \u003d false;\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"When wrapping a long statement (an example given below), \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"one should indent lines using two tabs instead of the usual one tab.\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"totalSum \u003d a + b + c\\n          + d + e;\"))),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"coding standard\", \"week 3\")),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is true?\"),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Of the two statements below, the first one has the correct spacing.\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"a \u003d (b + c) * d;\\na\u003d(b+c)*d;\"))),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Wildcard imports (an example given below) \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"should not be used unless there are many classes being imported from \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"the same package.\\nimport java.util.*;\"),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"This is an acceptable opening sentence for a javadoc header comment.\\n/**\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \" * Add the value to the current list.\\n * ...\\n */\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"This indentation is unacceptable:\\nswitch (condition) {\\ncase ABC:\\n    \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"statements;\\n    break;\\ndefault:\\n    statements;\\n    break;\\n}\"))),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"coding standard\", \"week 3\")),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"There is no need for developer testing if there are \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"separate testers.\"))),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Developer testing is the testing done by the \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"developers themselves.\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A downside of developer testing: A developer may subconsciously test \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"only situations that she knows to work (i.e. test it too \u0027gently\u0027)\"),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"It is better to do earlier testing\"))),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"quality assurance\", \"testing\", \"week 3\")),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"A test driver is the person that ‘drives’ (or ‘in charge of’) \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"the testing process, usually, a test engineer.\"))),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"When using JUnit for a class Foo, \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"the common practice is to create a FooTest class, which will contain \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"various test methods to test the Foo class.\"),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"The following method name (found in a JUnit test class) is compliant \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"with the Java coding standard.\\nintDivision_zeroDivisor_exceptionThrown\"),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"If the class Box depends on the class Lid, unit testing the Box class \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"should be done in isolation from the Lid class.\"))),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"quality assurance\", \"testing\", \"week 3\")),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Test drivers can be used to isolate the SUT from its dependencies.\"))),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"A stub\u0027s implementation is supposed to be much simpler \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"than the component it replaces.\"),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"The following method name (found in a JUnit test class) is compliant \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"with the Java coding standard.\\nintDivision_zeroDivisor_exceptionThrown\"),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"When using JUnit for a class Foo, the common practice is to \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"create a FooTest class, which will contain various test methods \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"to test the Foo class.\"))),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"quality assurance\", \"testing\", \"week 3\"))"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Answerable sampleAnswerable : getSampleAnswerables()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sampleAb.addAnswerable(sampleAnswerable);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Returns a category set containing the list of strings given."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static Set\u003cCategory\u003e getCategorySet(String... strings) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .map(Category::new)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 79,
      "jxofficial": 6,
      "khiangleon": 97,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a storage for {@link seedu.revision.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonAdaptedAnswer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Jackson-friendly version of {@link Answer}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "class JsonAdaptedAnswer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code JsonAdaptedAnswer} with the given {@code answerDescription}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public JsonAdaptedAnswer(String answer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Converts a given {@code answer} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public JsonAdaptedAnswer(Answer source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        answer \u003d source.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Answer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Answer(answer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 46,
      "jxofficial": 1,
      "khiangleon": 2
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonAdaptedAnswerable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Saq;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Jackson-friendly version of {@link Answerable}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "class JsonAdaptedAnswerable {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Answerable\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String questionType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final List\u003cJsonAdaptedAnswer\u003e correctAnswerSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final List\u003cJsonAdaptedAnswer\u003e wrongAnswerSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String difficulty;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code JsonAdaptedAnswerable} with the given answerable details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public JsonAdaptedAnswerable(@JsonProperty(\"questionType\") String questionType,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "             @JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "             @JsonProperty(\"correctAnswerSet\") List\u003cJsonAdaptedAnswer\u003e correctAnswerSet,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "             @JsonProperty(\"wrongAnswerSet\") List\u003cJsonAdaptedAnswer\u003e wrongAnswerSet,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "             @JsonProperty(\"difficulty\") String difficulty,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "             @JsonProperty(\"categories\") List\u003cJsonAdaptedCategory\u003e categories) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.questionType \u003d questionType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.correctAnswerSet.addAll(correctAnswerSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.wrongAnswerSet.addAll(wrongAnswerSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (categories !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            this.categories.addAll(categories);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Converts a given {@code Answerable} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public JsonAdaptedAnswerable(Answerable source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (source instanceof Mcq) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType \u003d \"mcq\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            wrongAnswerSet.addAll(source.getWrongAnswerList().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .map(JsonAdaptedAnswer::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else if (source instanceof TrueFalse) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            questionType \u003d \"tf\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType \u003d \"saq\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        question \u003d source.getQuestion().fullQuestion;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        difficulty \u003d source.getDifficulty().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        correctAnswerSet.addAll(source.getCorrectAnswerList().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .map(JsonAdaptedAnswer::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        categories.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Converts this Jackson-friendly adapted answerable object into the model\u0027s {@code Answerable} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted answerable."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Answerable toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        final List\u003cCategory\u003e answerableTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        for (JsonAdaptedCategory category : categories) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            answerableTags.add(category.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final List\u003cAnswer\u003e correctAnswers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (JsonAdaptedAnswer correctAnswer : correctAnswerSet) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            correctAnswers.add(correctAnswer.toModelType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final List\u003cAnswer\u003e wrongAnswers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (JsonAdaptedAnswer wrongAnswer : wrongAnswerSet) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            wrongAnswers.add(wrongAnswer.toModelType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final ArrayList\u003cAnswer\u003e modelCorrectAnswerSet \u003d new ArrayList\u003c\u003e(correctAnswers);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final ArrayList\u003cAnswer\u003e modelWrongAnswerSet \u003d new ArrayList\u003c\u003e(wrongAnswers);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    Difficulty.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Difficulty.isValidDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final Difficulty modelDifficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(answerableTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (questionType) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"mcq\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new Mcq(modelQuestion, modelCorrectAnswerSet, modelWrongAnswerSet,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    modelDifficulty, modelCategories);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"saq\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new Saq (modelQuestion, modelCorrectAnswerSet, modelDifficulty, modelCategories);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"tf\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new TrueFalse(modelQuestion, modelCorrectAnswerSet, modelDifficulty, modelCategories);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(\"Invalid question type\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 83,
      "jxofficial": 19,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonAdaptedCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Jackson-friendly version of {@link Category}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Constructs a {@code JsonAdaptedCategory} with the given {@code categoryName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public JsonAdaptedCategory(String categoryName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Converts a given {@code category} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        categoryName \u003d source.categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (!Category.isValidCategoryName(categoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new Category(categoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "jxofficial": 45
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ANSWERABLE \u003d \"Answerables list contains duplicate answerable(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final List\u003cJsonAdaptedAnswerable\u003e answerables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given answerables."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"answerables\") List\u003cJsonAdaptedAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answerables.addAll(answerables);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        answerables.addAll(source.getAnswerableList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .map(JsonAdaptedAnswerable::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Converts this revision tool into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (JsonAdaptedAnswerable jsonAdaptedAnswerable : answerables) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Answerable answerable \u003d jsonAdaptedAnswerable.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (addressBook.hasAnswerable(answerable)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            addressBook.addAnswerable(answerable);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16,
      "khiangleon": 2,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a storage for {@link seedu.revision.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Saves the given {@link seedu.revision.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/AnswerableCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * An UI component that displays information of a {@code Answerable}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static int questionNumbering;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FXML \u003d \"AnswerableListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final Answerable answerable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private FlowPane answer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Label questionNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableCard(Answerable answerable, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answerable \u003d answerable;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        question.setText(answerable.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        difficulty.setText(\"Difficulty: \" + answerable.getDifficulty().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        answerable.getCategories().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!(other instanceof AnswerableCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AnswerableCard card \u003d (AnswerableCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 answerable.equals(card.answerable);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static String convert (Answer answer, Integer questionNumbering) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String fullString \u003d String.format(\"%s %s\", questionNumbering, answer.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return fullString;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 17,
      "jxofficial": 4,
      "khiangleon": 2,
      "-": 49,
      "ShaunNgTX": 7
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/AnswerableCardWithAnswers.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * An UI component that displays information of a {@code Answerable}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class AnswerableCardWithAnswers extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static Set\u003cAnswer\u003e combinedAnswerSet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static final String FXML \u003d \"AnswerableListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public final Answerable answerable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label questionType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private FlowPane answer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //    private FlowPane correctAnswers;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //    private FlowPane wrongAnswers;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Label questionNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public AnswerableCardWithAnswers(Answerable answerable, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.answerable \u003d answerable;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerable instanceof Mcq) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType.setText(\"Question type: MCQ\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else if (answerable instanceof TrueFalse) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            questionType.setText(\"Question type: T/F\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType.setText(\"Question type: SAQ\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        question.setText(answerable.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        difficulty.setText(\"Difficulty: \" + answerable.getDifficulty().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //        answerable.getCorrectAnswerSet().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //                .sorted(Comparator.comparing(correctAnswer -\u003e correctAnswer.answer))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //                .forEach(correctAnswer -\u003e correctAnswers.getChildren().add(new Label(correctAnswer.answer)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //        answerable.getWrongAnswerSet().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //                .sorted(Comparator.comparing(wrongAnswer -\u003e wrongAnswer.answer))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //                .forEach(wrongAnswer -\u003e wrongAnswers.getChildren().add(new Label(wrongAnswer.answer)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        //To set the individual answers to the answer flowPane"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerable.getCombinedAnswerList().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .sorted(Comparator.comparing(answer -\u003e answer.toString()))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .forEach(answer -\u003e this.answer.getChildren().add(new Label(answer.toString())));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //        answer.getChildren().add(new Label (answerable.getCombinedAnswerSet().toString()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerable.getCategories().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static Set\u003cAnswer\u003e getCombinedAnswerSet() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return combinedAnswerSet;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static void setCombinedAnswerSet(Set\u003cAnswer\u003e combinedAnswerSet) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        AnswerableCardWithAnswers.combinedAnswerSet \u003d combinedAnswerSet;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        if (!(other instanceof AnswerableCardWithAnswers)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        AnswerableCardWithAnswers card \u003d (AnswerableCardWithAnswers) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                \u0026\u0026 answerable.equals(card.answerable);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 27,
      "jxofficial": 6,
      "khiangleon": 11,
      "ShaunNgTX": 67
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/AnswerableListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Panel containing the list of answerables."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FXML \u003d \"AnswerableListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AnswerableListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ListView\u003cAnswerable\u003e answerableListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableListPanel(ObservableList\u003cAnswerable\u003e answerableList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableListView.setItems(answerableList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableListView.setCellFactory(listView -\u003e new AnswerableListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Answerable} using a {@code AnswerableCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    class AnswerableListViewCell extends ListCell\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        protected void updateItem(Answerable answerable, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            super.updateItem(answerable, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (empty || answerable \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                setGraphic(new AnswerableCard(answerable, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                //To set the display when StartQuizCommand is run."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                setGraphic(new AnswerableCardWithAnswers(answerable, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 46,
      "ShaunNgTX": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.MainLogic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TextField getCommandTextField() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return commandTextField;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * @see MainLogic#execute(String)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "jxofficial": 2,
      "khiangleon": 1,
      "-": 71,
      "ShaunNgTX": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 99,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.ButtonBar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.MainApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.MainLogic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.QuizLogic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class MainWindow extends Window {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public MainWindow(Stage primaryStage, MainLogic mainLogic, QuizLogic quizLogic) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(primaryStage, mainLogic, quizLogic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    Model passedModel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        answerableListPanel \u003d new AnswerableListPanel(mainLogic.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        answerableListPanelPlaceholder.getChildren().add(answerableListPanel.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(mainLogic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Initialises the session for quiz. Loads the window components for quiz."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void handleStart() throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(String.valueOf(this.mainLogic.getFilteredAnswerableList().size()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (this.mainLogic.getFilteredAnswerableList().size() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            StartQuizWindow startQuizWindow \u003d new StartQuizWindow(getPrimaryStage(), getMainLogic(), getQuizLogic());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            startQuizWindow.show();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            startQuizWindow.fillInnerParts();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new CommandException(\"No questions were found matching that category/difficulty\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"Quiz start aborted. Type \u0027list\u0027 to view your full list of questions again.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected void handleExit() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        mainLogic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Opens the restore window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void handleRestore(Model passedModel) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        boolean exists;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Alert alert \u003d new Alert(Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        alert.setTitle(\"Warning!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        alert.setHeaderText(null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        alert.setGraphic(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        alert.setContentText(\"Are you sure? This cannot be undone.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        ButtonType confirmRestore \u003d new ButtonType("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                \"Yes\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                ButtonBar.ButtonData.OK_DONE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        ButtonType declineRestore \u003d new ButtonType("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                \"No\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                ButtonBar.ButtonData.CANCEL_CLOSE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        alert.getButtonTypes().setAll(confirmRestore, declineRestore);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Optional\u003cButtonType\u003e result \u003d alert.showAndWait();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        if (result.get() \u003d\u003d confirmRestore) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            ReadOnlyAddressBook sampleData;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            sampleData \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            passedModel.setAddressBook(new AddressBook(sampleData));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableListPanel getAnswerableListPanel() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerableListPanel;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @see MainLogic#execute(String)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    protected CommandResult executeCommand(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            CommandResult commandResult \u003d mainLogic.execute(commandText);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            if (commandResult.isStart()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                handleStart();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            if (commandResult.isShowRestore()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                passedModel \u003d commandResult.getModel();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                handleRestore(passedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 19,
      "jxofficial": 8,
      "khiangleon": 5,
      "-": 66,
      "ShaunNgTX": 66
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/ProgressIndicatorBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.property.ReadOnlyDoubleProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Shows a bar to the user to indicate current progress through quiz."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ProgressIndicatorBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FXML \u003d \"ProgressIndicatorBar.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final int DEFAULT_LABEL_PADDING \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ReadOnlyDoubleProperty workDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final double totalWork;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private StackPane pane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ProgressBar bar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Text text \u003d new Text();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String labelFormatSpecifier;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public ProgressIndicatorBar(final ReadOnlyDoubleProperty workDone, final double totalWork,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                final String labelFormatSpecifier) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.workDone \u003d workDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.totalWork \u003d totalWork;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.labelFormatSpecifier \u003d labelFormatSpecifier;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        syncProgress();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        workDone.addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observableValue, Number number, Number number2) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                syncProgress();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        bar.setMaxWidth(Double.MAX_VALUE); // allows the progress bar to expand to fill available horizontal space."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        pane.getChildren().setAll(bar, text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Synchronizes the progress indicated with the work done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void syncProgress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (workDone \u003d\u003d null || totalWork \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            text.setText(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            bar.setProgress(ProgressBar.INDETERMINATE_PROGRESS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            text.setText(String.format(labelFormatSpecifier, Math.ceil(workDone.get())));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            bar.setProgress(workDone.get() / totalWork);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        bar.setMinHeight(text.getBoundsInLocal().getHeight() + DEFAULT_LABEL_PADDING * 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        bar.setMinWidth (text.getBoundsInLocal().getWidth() + DEFAULT_LABEL_PADDING * 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 56,
      "khiangleon": 9
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/StartQuizWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.property.ReadOnlyDoubleProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.property.ReadOnlyDoubleWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ButtonBar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.MainLogic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.QuizLogic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.answers.AnswersGridPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.answers.McqAnswersGridPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.answers.TfAnswersGridPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StartQuizWindow extends Window {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private AnswerableListPanel answerableListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ResultDisplay questionDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private AnswersGridPane answersGridPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ProgressIndicatorBar progressIndicatorBar;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Answerable currentAnswerable;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Iterator\u003cAnswerable\u003e answerableIterator;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private int score \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private ReadOnlyDoubleWrapper currentProgressIndex \u003d new ReadOnlyDoubleWrapper(this, \"currentProgressIndex\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public StartQuizWindow(Stage primaryStage, MainLogic mainLogic, QuizLogic quizLogic) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        super(primaryStage, mainLogic, quizLogic);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final double getCurrentProgressIndex() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return currentProgressIndex.get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final ReadOnlyDoubleProperty currentProgressIndexProperty() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return currentProgressIndex.getReadOnlyProperty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ObservableList\u003cAnswerable\u003e filteredAnswerableList \u003d this.mainLogic.getFilteredAnswerableList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableIterator \u003d filteredAnswerableList.iterator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        currentAnswerable \u003d answerableIterator.next();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (currentAnswerable instanceof Mcq) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            answersGridPane \u003d new McqAnswersGridPane(AnswersGridPane.MCQ_GRID_PANE_FXML, currentAnswerable);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else if (currentAnswerable instanceof TrueFalse) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            answersGridPane \u003d new TfAnswersGridPane(AnswersGridPane.TF_GRID_PANE_FXML, currentAnswerable);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        answerableListPanelPlaceholder.getChildren().add(answersGridPane.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        questionDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        questionDisplay.setFeedbackToUser(currentAnswerable.getQuestion().toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(questionDisplay.getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(mainLogic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        progressIndicatorBar \u003d new ProgressIndicatorBar(currentProgressIndex, filteredAnswerableList.size(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \"%.0f/\" + filteredAnswerableList.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        scoreProgressBar.getChildren().add(progressIndicatorBar.getRoot());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Handles ending of quiz session."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void handleEnd() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        currentProgressIndex.set(currentProgressIndex.get() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Alert alert \u003d new Alert(Alert.AlertType.CONFIRMATION);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        alert.setTitle(null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        alert.setHeaderText(null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        alert.setGraphic(null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        alert.setContentText(\"Quiz has ended! Your score is \" + score + \"\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + \"Try again?\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + \"Press [ENTER] to try again.\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + \"Press [ESC] to return to main screen.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ButtonType tryAgainButton \u003d new ButtonType("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \"Yes\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                ButtonBar.ButtonData.OK_DONE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ButtonType endButton \u003d new ButtonType("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \"No\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                ButtonBar.ButtonData.CANCEL_CLOSE"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        alert.getButtonTypes().setAll(tryAgainButton, endButton);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Optional\u003cButtonType\u003e result \u003d alert.showAndWait();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (result.get() \u003d\u003d tryAgainButton) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            restartQuiz();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else if (result.get() \u003d\u003d endButton) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Restarts the quiz session by resetting progress."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void restartQuiz() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        score \u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        currentProgressIndex.set(0);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        commandBox.getCommandTextField().requestFocus();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected void handleExit() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        mainWindow \u003d new MainWindow(getPrimaryStage(), mainLogic, quizLogic);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        mainWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        mainWindow.resultDisplay.setFeedbackToUser(\"You attempted these questions.\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"Type \u0027list\u0027 to view your full list of questions again.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public AnswerableListPanel getAnswerableListPanel() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return answerableListPanel;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @see QuizLogic#execute(String, Answerable)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected CommandResult executeCommand (String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            CommandResult commandResult \u003d quizLogic.execute(commandText, currentAnswerable);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.info(\"Question result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            if (commandResult.getFeedbackToUser().equalsIgnoreCase(\"correct\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                // TODO: KhiangLeon use the updateStatistics() method here or in McqInputCommand#execute."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                //  Both has access to the answerable."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                score++;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!answerableIterator.hasNext()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                handleEnd();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new CommandResult(\"Quiz has ended.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            currentAnswerable \u003d answerableIterator.next();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            currentProgressIndex.set(getCurrentProgressIndex() + 1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionDisplay.setFeedbackToUser(currentAnswerable.getQuestion().toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answersGridPane.updateAnswers(currentAnswerable);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 95,
      "jxofficial": 22,
      "khiangleon": 16,
      "ShaunNgTX": 69
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.MainLogic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.QuizLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private MainLogic mainLogic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private QuizLogic quizLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public UiManager(MainLogic mainLogic, QuizLogic quizLogic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.mainLogic \u003d mainLogic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.quizLogic \u003d quizLogic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, mainLogic, quizLogic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "jxofficial": 8,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/Window.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.MainLogic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.QuizLogic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class Window extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected Stage primaryStage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected MainLogic mainLogic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected QuizLogic quizLogic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected AnswerableListPanel answerableListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected HelpWindow helpWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane answerableListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane scoreProgressBar;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Window(Stage primaryStage, MainLogic mainLogic, QuizLogic quizLogic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.mainLogic \u003d mainLogic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.quizLogic \u003d quizLogic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setWindowDefaultSize(this.mainLogic.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public MainLogic getMainLogic() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return mainLogic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public QuizLogic getQuizLogic() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return quizLogic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    abstract void fillInnerParts();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected abstract void handleExit();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    protected abstract CommandResult executeCommand(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 38,
      "-": 115,
      "ShaunNgTX": 2
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/answers/AnswersGridPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.answers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Shows available answers/options to the user during quiz."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public abstract class AnswersGridPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String MCQ_GRID_PANE_FXML \u003d \"McqAnswersGridPane.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String TF_GRID_PANE_FXML \u003d \"TfAnswersGridPane.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public final Answerable answerable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Button option1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Button option2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Button option3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Button option4;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises an AnswersGridPane used to display answers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerable the answerable that is used to display answers."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public AnswersGridPane(String fxml, Answerable answerable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.answerable \u003d answerable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates the grid pane with updated answers."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerable the question to be answered."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public abstract void updateAnswers(Answerable answerable);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16,
      "jxofficial": 26
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/answers/McqAnswersGridPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.answers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * McqAnswersGridPane class used to display Mcq Answers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class McqAnswersGridPane extends AnswersGridPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(McqAnswersGridPane.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Button option1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Button option2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Button option3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Button option4;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public McqAnswersGridPane(String fxml, Answerable answerable) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(fxml, answerable);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e answerList \u003d answerable.getCombinedAnswerList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option1.setText(answerList.get(0).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option2.setText(answerList.get(1).toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option3.setText(answerList.get(2).toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option4.setText(answerList.get(3).toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.getRoot().getStyleClass().add(\"option-label\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates the answers displayed during quiz mode."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerable answerable used to update answers."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void updateAnswers(Answerable answerable) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e answerList \u003d answerable.getCombinedAnswerList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option1.setText(answerList.get(0).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option2.setText(answerList.get(1).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option3.setText(answerList.get(2).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option4.setText(answerList.get(3).toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (!(other instanceof McqAnswersGridPane)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        McqAnswersGridPane answersGrid \u003d (McqAnswersGridPane) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return answerable.equals(answersGrid.answerable);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 13,
      "jxofficial": 47,
      "ShaunNgTX": 5
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/answers/TfAnswersGridPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.answers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * TfAnswersGridPane class used to display True and False answers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TfAnswersGridPane extends AnswersGridPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TfAnswersGridPane.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Button option1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Button option2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Instantiates TfAnswersGridPane to display True and False answers."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param fxml the fxml used to display the TfAnswersGridPane."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerable answerable used to display answers."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TfAnswersGridPane(String fxml, Answerable answerable) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(fxml, answerable);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option1.setText(\"True\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option2.setText(\"False\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.getRoot().getStyleClass().add(\"option-label\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates the answers to true and false."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerable"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void updateAnswers(Answerable answerable) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option1.setText(\"True\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option2.setText(\"False\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (!(other instanceof TfAnswersGridPane)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        TfAnswersGridPane answersGrid \u003d (TfAnswersGridPane) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return answerable.equals(answersGrid.answerable);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 12,
      "jxofficial": 46
    }
  },
  {
    "path": "src/main/resources/view/AnswerableListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c!--      \u003cFlowPane fx:id\u003d\"correctAnswer\" /\u003e--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c!--      \u003cFlowPane fx:id\u003d\"wrongAnswer\" /\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cLabel fx:id\u003d\"questionType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$questionType\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"answer\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/AnswerableListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "  \u003cListView fx:id\u003d\"answerableListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/AnswerableListPanelWithAnswers.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            fx:controller\u003d\"$CONTROLLER_NAME$\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 14
    }
  },
  {
    "path": "src/main/resources/view/AnswersGridPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003cGridPane fx:id\u003d\"cardPane\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          alignment\u003d\"center\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option1\" text\u003d\"\\$option1\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option2\" text\u003d\"\\$option2\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option3\" text\u003d\"\\$option3\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option4\" text\u003d\"\\$option4\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "jxofficial": 46,
      "ShaunNgTX": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#filterField, #answerableListPanel, #answerableWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#answer {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-vgap: 10;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#answer .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-start-margin: 40;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-min-height: 30;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #959595;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 19,
      "-": 349
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".option-label {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-max-height: 300;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-max-width: 600;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*-fx-pref-height: 300;*/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*-fx-pref-width: 600;*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*-fx-min-height: 300;*/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*-fx-min-width: 600;*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-family: \"Lucida Bright\",  \"Times New Roman\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-style: normal;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-size: 30;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #2a3b74;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-color: #fbf3f3;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-width: 3;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*-fx-effect: DropShadow;*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 19,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cVBox fx:id\u003d\"answerableList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cStackPane fx:id\u003d\"answerableListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"scoreProgressBar\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   minHeight\u003d\"30\" prefHeight\u003d\"30\" maxHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "-": 58
    }
  },
  {
    "path": "src/main/resources/view/McqAnswersGridPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003cGridPane fx:id\u003d\"cardPane\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          alignment\u003d\"center\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option1\" text\u003d\"\\$option1\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option2\" text\u003d\"\\$option2\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option3\" text\u003d\"\\$option3\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option4\" text\u003d\"\\$option4\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 56
    }
  },
  {
    "path": "src/main/resources/view/ProgressIndicatorBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cStackPane fx:id\u003d\"pane\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003cProgressBar fx:id\u003d\"bar\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 12
    }
  },
  {
    "path": "src/main/resources/view/TfAnswersGridPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003cGridPane fx:id\u003d\"cardPane\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          alignment\u003d\"center\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option1\" text\u003d\"\\$option1\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cButton styleClass\u003d\"option-label\" fx:id\u003d\"option2\" text\u003d\"\\$option2\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 42
    }
  },
  {
    "path": "src/test/java/seedu/revision/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final Index fifthAnswerableIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(fifthAnswerableIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(fifthAnswerableIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(fifthAnswerableIndex.equals(fifthAnswerableIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(fifthAnswerableIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(fifthAnswerableIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(fifthAnswerableIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/MainMainLogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CORRECT_ANSWER_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.MCQ_WRONG_ANSWER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_TYPE_MCQ;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.ALPHA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class MainMainLogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private MainLogic mainLogic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        mainLogic \u003d new MainLogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // Setup MainLogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        mainLogic \u003d new MainLogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + QUESTION_TYPE_MCQ + QUESTION_DESC_AMY + CORRECT_ANSWER_DESC"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CATEGORY_DESC_UML + MCQ_WRONG_ANSWER_DESC + DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable expectedAnswerable \u003d new AnswerableBuilder(ALPHA).withCategories(\"UML\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.addAnswerable(expectedAnswerable);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String expectedMessage \u003d MainLogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void getFilteredAnswerableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mainLogic.getFilteredAnswerableList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CommandResult result \u003d mainLogic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e mainLogic.execute(inputCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 25,
      "jxofficial": 11,
      "khiangleon": 5,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_newAnswerable_success() throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable validAnswerable \u003d new AnswerableBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.addAnswerable(validAnswerable);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandSuccess(new AddCommand(validAnswerable), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validAnswerable), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_duplicateAnswerable_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerableInList \u003d model.getAddressBook().getAnswerableList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(new AddCommand(answerableInList), model, AddCommand.MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16,
      "jxofficial": 1,
      "khiangleon": 2,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_answerableAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ModelStubAcceptingAnswerableAdded modelStub \u003d new ModelStubAcceptingAnswerableAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable validAnswerable \u003d new AnswerableBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validAnswerable).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validAnswerable), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(Arrays.asList(validAnswerable), modelStub.answerablesAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_duplicateAnswerable_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable validAnswerable \u003d new AnswerableBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validAnswerable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAnswerable(validAnswerable);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ANSWERABLE, () -\u003e addCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable alice \u003d new AnswerableBuilder().withQuestion(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable bob \u003d new AnswerableBuilder().withQuestion(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void addAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void deleteAnswerable(Answerable target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setAnswerable(Answerable target, Answerable editedAnswerable) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public ObservableList\u003cAnswerable\u003e getFilteredAnswerableList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void updateFilteredAnswerableList(Predicate\u003cAnswerable\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * A Model stub that contains a single answerable."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private class ModelStubWithAnswerable extends ModelStub {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private final Answerable answerable;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ModelStubWithAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            requireNonNull(answerable);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.answerable \u003d answerable;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            requireNonNull(answerable);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return this.answerable.isSameAnswerable(answerable);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * A Model stub that always accept the answerable being added."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private class ModelStubAcceptingAnswerableAdded extends ModelStub {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final ArrayList\u003cAnswerable\u003e answerablesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            requireNonNull(answerable);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return answerablesAdded.stream().anyMatch(answerable::isSameAnswerable);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void addAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            requireNonNull(answerable);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answerablesAdded.add(answerable);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 48,
      "jxofficial": 2,
      "khiangleon": 2,
      "-": 145
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_emptyAddressBook_success() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "jxofficial": 1,
      "khiangleon": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "jxofficial": 2,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_QUESTION_ALPHA \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_QUESTION_BETA \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_QUESTION_TYPE \u003d \"mcq\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_DIFFICULTY_ALPHA \u003d \"1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_DIFFICULTY_BETA \u003d \"3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_CATEGORY_ALPHA \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_CATEGORY_GREENFIELD \u003d \"greenfield\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_CATEGORY_UML \u003d \"UML\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String QUESTION_TYPE_MCQ \u003d \" \" + PREFIX_QUESTION_TYPE + \"mcq\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String QUESTION_DESC_AMY \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_ALPHA;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String QUESTION_DESC_BETA \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_BETA;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String CORRECT_ANSWER_DESC \u003d \" \" + PREFIX_CORRECT + \"Brownfield\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MCQ_WRONG_ANSWER_DESC \u003d \" \" + PREFIX_WRONG + \"Greenfield \" + PREFIX_WRONG + \"Blackfield \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_WRONG + \"Whitefield\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String QUESTION_TYPE_DESC \u003d \" \" + PREFIX_QUESTION_TYPE + VALID_QUESTION_TYPE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String DIFFICULTY_DESC_ALPHA \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_ALPHA;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String DIFFICULTY_DESC_BETA \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String CATEGORY_DESC_UML \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_UML;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String CATEGORY_DESC_GREENFIELD \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    // empty string not allowed for questions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    // \u0027a\u0027 not allowed in difficulty"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String INVALID_DIFFICULTY_DESC \u003d \" \" + PREFIX_DIFFICULTY + \"911a\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    // category cannot just be whitespace"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final EditCommand.EditAnswerableDescriptor DESC_ALPHA;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final EditCommand.EditAnswerableDescriptor DESC_BETA;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer correctAnswer \u003d new Answer(\"CORRECT\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final ArrayList\u003cAnswer\u003e defaultCorrectAnswerList \u003d new ArrayList\u003c\u003e(Arrays.asList(correctAnswer));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer wrongAnswer \u003d new Answer(\"WRONG\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final ArrayList\u003cAnswer\u003e defaultWrongAnswerList \u003d new ArrayList\u003c\u003e(Arrays.asList(wrongAnswer));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DESC_ALPHA \u003d new EditAnswerableDescriptorBuilder().withQuestion(VALID_QUESTION_ALPHA)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withCorrectAnswerList(defaultCorrectAnswerList).withWrongAnswerList(defaultWrongAnswerList)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_ALPHA).withCategories(VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DESC_BETA \u003d new EditAnswerableDescriptorBuilder().withQuestion(VALID_QUESTION_BETA)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withCorrectAnswerList(defaultCorrectAnswerList).withWrongAnswerList(defaultWrongAnswerList)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withCategories(VALID_CATEGORY_GREENFIELD, VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            Model expectedModel) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (ParseException parseException) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            //TODO: Handle Error"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            Model expectedModel) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * - the revision tool, filtered answerable list and selected answerable in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the answerable at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code model}\u0027s revision tool."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void showAnswerableAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAnswerableList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerable \u003d model.getFilteredAnswerableList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final String[] splitName \u003d answerable.getQuestion().fullQuestion.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.updateFilteredAnswerableList(new QuestionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(1, model.getFilteredAnswerableList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 53,
      "jxofficial": 5,
      "khiangleon": 16,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.showAnswerableAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswerable\u003e answerablesToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerablesToDelete.add(model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_ANSWERABLE_SUCCESS, answerablesToDelete.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.deleteAnswerable(model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAnswerableList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerableToDelete \u003d model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ANSWERABLE_SUCCESS, answerableToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRevisionTool(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.deleteAnswerable(answerableToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showNoAnswerable(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of revision tool list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getAnswerableList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexToDelete);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e firstDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e secondDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        firstDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        secondDelete.add(INDEX_SECOND_ANSWERABLE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(firstDelete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(secondDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(firstDelete);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void showNoAnswerable(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.updateFilteredAnswerableList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(model.getFilteredAnswerableList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 60,
      "jxofficial": 1,
      "khiangleon": 2,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/EditAnswerableDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DESC_ALPHA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DESC_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_QUESTION_BETA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand.EditAnswerableDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class EditAnswerableDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand.EditAnswerableDescriptor descriptorWithSameValues \u003d new EditAnswerableDescriptor(DESC_ALPHA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(DESC_ALPHA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(DESC_ALPHA.equals(DESC_ALPHA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(DESC_BETA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditCommand.EditAnswerableDescriptor editedAmy \u003d new EditAnswerableDescriptorBuilder(DESC_ALPHA)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withQuestion(VALID_QUESTION_BETA).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different difficulty -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        editedAmy \u003d new EditAnswerableDescriptorBuilder(DESC_ALPHA).withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        editedAmy \u003d new EditAnswerableDescriptorBuilder(DESC_ALPHA).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 19,
      "jxofficial": 2,
      "khiangleon": 4,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DESC_ALPHA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DESC_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_QUESTION_BETA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.showAnswerableAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand.EditAnswerableDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.testutil.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAnswerable \u003d new AnswerableBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder(editedAnswerable).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANSWERABLE_SUCCESS, editedAnswerable);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.setAnswerable(model.getFilteredAnswerableList().get(0), editedAnswerable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index indexLastAnswerable \u003d Index.fromOneBased(model.getFilteredAnswerableList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable lastAnswerable \u003d model.getFilteredAnswerableList().get(indexLastAnswerable.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AnswerableBuilder answerableInList \u003d new AnswerableBuilder(lastAnswerable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Answerable editedAnswerable \u003d answerableInList.withQuestion(VALID_QUESTION_BETA)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder().withQuestion(VALID_QUESTION_BETA)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastAnswerable, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANSWERABLE_SUCCESS, editedAnswerable);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.setAnswerable(lastAnswerable, editedAnswerable);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE, new EditAnswerableDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAnswerable \u003d model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANSWERABLE_SUCCESS, editedAnswerable);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_filteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Answerable answerableInFilteredList \u003d model.getFilteredAnswerableList()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .get(INDEX_FIRST_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Answerable editedAnswerable \u003d new AnswerableBuilder(answerableInFilteredList)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withQuestion(VALID_QUESTION_BETA).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new EditAnswerableDescriptorBuilder().withQuestion(VALID_QUESTION_BETA).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANSWERABLE_SUCCESS, editedAnswerable);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.setAnswerable(model.getFilteredAnswerableList().get(0), editedAnswerable);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_duplicateAnswerableUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable firstAnswerable \u003d model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder(firstAnswerable).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ANSWERABLE, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_duplicateAnswerableFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // edit answerable in filtered list into a duplicate in revision tool"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Answerable answerableInList \u003d model.getAddressBook().getAnswerableList()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .get(INDEX_SECOND_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new EditAnswerableDescriptorBuilder(answerableInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_invalidAnswerableIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAnswerableList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withQuestion(VALID_QUESTION_BETA).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * but smaller than size of revision tool"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_invalidAnswerableIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of revision tool list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getAnswerableList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new EditAnswerableDescriptorBuilder().withQuestion(VALID_QUESTION_BETA).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE, DESC_ALPHA);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditAnswerableDescriptor copyDescriptor \u003d new EditAnswerableDescriptor(DESC_ALPHA);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ANSWERABLE, copyDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ANSWERABLE, DESC_ALPHA)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ANSWERABLE, DESC_BETA)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 66,
      "jxofficial": 3,
      "khiangleon": 19,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.main.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_exit_success() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "jxofficial": 3,
      "khiangleon": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.C_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.E_ANSWERABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.F_ANSWERABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_zeroKeywords_noAnswerableFound() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ANSWERABLES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.updateFilteredAnswerableList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_multipleKeywords_multipleAnswerablesFound() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ANSWERABLES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.updateFilteredAnswerableList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(Arrays.asList(C_ANSWERABLE, E_ANSWERABLE, F_ANSWERABLE), model.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses {@code userInput} into a {@code QuestionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private QuestionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 27,
      "jxofficial": 1,
      "khiangleon": 3,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.main.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_help_success() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "jxofficial": 3,
      "khiangleon": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.CategoryPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.DifficultyPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    //TODO: Make into actual stub"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static CategoryPredicate categoryPredicateStub \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new CategoryPredicate(new Category(\"CATEGORY\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static DifficultyPredicate difficultyPredicateStub \u003d new DifficultyPredicate(new Difficulty(\"1\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertCommandSuccess(new ListCommand(categoryPredicateStub, difficultyPredicateStub),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertCommandSuccess(new ListCommand(categoryPredicateStub, difficultyPredicateStub),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 10,
      "khiangleon": 14,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_GREENFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CORRECT_ANSWER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_DIFFICULTY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.MCQ_WRONG_ANSWER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_DESC_BETA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_TYPE_MCQ;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_UML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_QUESTION_BETA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.BETA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.main.AddCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable expectedAnswerable \u003d new AnswerableBuilder(BETA).withCategories(VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d (PREAMBLE_WHITESPACE + QUESTION_TYPE_MCQ + QUESTION_DESC_BETA + DIFFICULTY_DESC_BETA"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CORRECT_ANSWER_DESC + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_UML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_TYPE_MCQ + QUESTION_DESC_BETA"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + DIFFICULTY_DESC_BETA + CORRECT_ANSWER_DESC + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new AddCommand(expectedAnswerable));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, QUESTION_TYPE_MCQ + QUESTION_DESC_AMY + QUESTION_DESC_BETA"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + DIFFICULTY_DESC_BETA + CORRECT_ANSWER_DESC + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new AddCommand(expectedAnswerable));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // multiple difficulty - last difficulty accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, QUESTION_TYPE_MCQ + QUESTION_DESC_BETA + DIFFICULTY_DESC_ALPHA"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + DIFFICULTY_DESC_BETA + CORRECT_ANSWER_DESC + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new AddCommand(expectedAnswerable));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // multiple categories - all accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Answerable expectedAnswerableMultipleTags \u003d new AnswerableBuilder(BETA).withCategories(VALID_CATEGORY_UML,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, QUESTION_TYPE_MCQ + QUESTION_DESC_BETA + DIFFICULTY_DESC_BETA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + CORRECT_ANSWER_DESC + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_GREENFIELD + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new AddCommand(expectedAnswerableMultipleTags));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_BETA + DIFFICULTY_DESC_BETA, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // missing difficulty prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_BETA + VALID_DIFFICULTY_BETA, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_BETA + VALID_DIFFICULTY_BETA, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, QUESTION_TYPE_MCQ + INVALID_QUESTION_DESC + CORRECT_ANSWER_DESC"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + MCQ_WRONG_ANSWER_DESC + DIFFICULTY_DESC_BETA + CATEGORY_DESC_GREENFIELD + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, QUESTION_TYPE_MCQ + QUESTION_DESC_BETA + CORRECT_ANSWER_DESC"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + MCQ_WRONG_ANSWER_DESC + INVALID_DIFFICULTY_DESC + CATEGORY_DESC_GREENFIELD"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CATEGORY_DESC_UML, Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_TYPE_MCQ + QUESTION_DESC_BETA"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + DIFFICULTY_DESC_BETA + CORRECT_ANSWER_DESC + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_GREENFIELD"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CATEGORY_DESC_UML, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 39,
      "jxofficial": 2,
      "khiangleon": 20,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String argsString \u003d \"  some random string /cat category with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.main.DeleteCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(indexToDelete));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "jxofficial": 2,
      "khiangleon": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_GREENFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CORRECT_ANSWER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_DIFFICULTY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.MCQ_WRONG_ANSWER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_TYPE_MCQ;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_ALPHA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_UML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_ALPHA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_QUESTION_ALPHA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_THIRD_ANSWERABLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand.EditAnswerableDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.main.EditCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String CATEGORY_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_ALPHA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, \"-5\" + QUESTION_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, \"0\" + QUESTION_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DIFFICULTY_DESC, Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // invalid difficultty"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DIFFICULTY_DESC, Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // valid difficulty followed by invalid difficulty. The test case for invalid difficulty"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // followed by valid difficulty is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + DIFFICULTY_DESC_BETA + INVALID_DIFFICULTY_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // while parsing {@code PREFIX_CATEGORY} alone will reset the categories of the {@code Answerable} being edited,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // parsing it together with a valid category results in error"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_UML + CATEGORY_DESC_GREENFIELD + CATEGORY_EMPTY,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_UML + CATEGORY_EMPTY + CATEGORY_DESC_GREENFIELD,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_EMPTY + CATEGORY_DESC_UML + CATEGORY_DESC_GREENFIELD,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + QUESTION_TYPE_MCQ + CORRECT_ANSWER_DESC"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + MCQ_WRONG_ANSWER_DESC + VALID_CATEGORY_ALPHA + VALID_DIFFICULTY_ALPHA, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DIFFICULTY_DESC_BETA + CATEGORY_DESC_GREENFIELD"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + QUESTION_DESC_AMY + CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditCommand.EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withQuestion(VALID_QUESTION_ALPHA).withDifficulty(VALID_DIFFICULTY_BETA)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withCategories(VALID_CATEGORY_GREENFIELD, VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ANSWERABLE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withQuestion(VALID_QUESTION_ALPHA).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // difficulty"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditAnswerableDescriptorBuilder().withDifficulty(VALID_DIFFICULTY_ALPHA).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditAnswerableDescriptorBuilder().withCategories(VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DIFFICULTY_DESC_ALPHA + CATEGORY_DESC_UML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + DIFFICULTY_DESC_ALPHA + CATEGORY_DESC_UML + DIFFICULTY_DESC_BETA"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CATEGORY_DESC_GREENFIELD;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withCategories(VALID_CATEGORY_UML, VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DIFFICULTY_DESC + DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditCommand.EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DIFFICULTY_DESC + DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditAnswerableDescriptorBuilder().withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 52,
      "jxofficial": 3,
      "khiangleon": 38,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.main.FindCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "jxofficial": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/MainParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.main.MainParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.testutil.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class MainParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final MainParser parser \u003d new MainParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerable \u003d new AnswerableBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AnswerableUtil.getAddCommand(answerable));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(new AddCommand(answerable), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ANSWERABLE.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(new DeleteCommand(indexToDelete), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerable \u003d new AnswerableBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand.EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder(answerable).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + INDEX_FIRST_ANSWERABLE.getOneBased() + \" \" + AnswerableUtil"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .getEditAnswerableDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ANSWERABLE, descriptor), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(new FindCommand(new QuestionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 23,
      "jxofficial": 11,
      "khiangleon": 3,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_DIFFICULTY \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String VALID_DIFFICULTY \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String VALID_CATEGORY_1 \u003d \"OOP\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String VALID_CATEGORY_2 \u003d \"git\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(INDEX_FIRST_ANSWERABLE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(INDEX_FIRST_ANSWERABLE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseQuestion_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseQuestion_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseDifficulty_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDifficulty((String) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseDifficulty_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDifficulty(INVALID_DIFFICULTY));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseDifficulty_validValueWithoutWhitespace_returnsDifficulty() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Difficulty expectedDifficulty \u003d new Difficulty(VALID_DIFFICULTY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedDifficulty, ParserUtil.parseDifficulty(VALID_DIFFICULTY));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseDifficulty_validValueWithWhitespace_returnsTrimmedDifficulty() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String difficultyWithWhitespace \u003d WHITESPACE + VALID_DIFFICULTY + WHITESPACE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Difficulty expectedDifficulty \u003d new Difficulty(VALID_DIFFICULTY);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedDifficulty, ParserUtil.parseDifficulty(difficultyWithWhitespace));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY_1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String categoryWithWhitespace \u003d VALID_CATEGORY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategories_collectionWithInvalidCategories_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .parseCategories(Arrays.asList(VALID_CATEGORY_1, INVALID_CATEGORY)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(ParserUtil.parseCategories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategories_collectionWithValidCategoriess_returnsCategorySet() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Set\u003cCategory\u003e actualCategorySet \u003d ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, VALID_CATEGORY_2));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Set\u003cCategory\u003e expectedCategorySet \u003d new HashSet\u003cCategory\u003e("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            Arrays.asList(new Category(VALID_CATEGORY_1), new Category(VALID_CATEGORY_2)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(expectedCategorySet, actualCategorySet);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 36,
      "jxofficial": 21,
      "khiangleon": 5,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.A_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.exceptions.DuplicateAnswerableException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getAnswerableList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void resetData_withDuplicateAnswerable_throwsDuplicateAnswerableException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Two answerables with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withCategories(VALID_CATEGORY_GREENFIELD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e newAnswerables \u003d Arrays.asList(A_ANSWERABLE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newAnswerables);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(DuplicateAnswerableException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasAnswerable(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_answerableNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(addressBook.hasAnswerable(A_ANSWERABLE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_answerableInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        addressBook.addAnswerable(A_ANSWERABLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(addressBook.hasAnswerable(A_ANSWERABLE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void getAnswerableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getAnswerableList().remove(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * A stub ReadOnlyAddressBook whose answerables list can violate interface constraints."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private final ObservableList\u003cAnswerable\u003e answerables \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AddressBookStub(Collection\u003cAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.answerables.setAll(answerables);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public ObservableList\u003cAnswerable\u003e getAnswerableList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return answerables;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 30,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.model.Model.PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.A_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.B_ANSWERABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"revision/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/revision/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Path path \u003d Paths.get(\"revision/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAnswerable(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_answerableNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(modelManager.hasAnswerable(A_ANSWERABLE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_answerableInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        modelManager.addAnswerable(A_ANSWERABLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(modelManager.hasAnswerable(A_ANSWERABLE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void getFilteredAnswerableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAnswerableList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withAnswerable(A_ANSWERABLE)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withAnswerable(B_ANSWERABLE).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String[] keywords \u003d A_ANSWERABLE.getQuestion().fullQuestion.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        modelManager.updateFilteredAnswerableList(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        modelManager.updateFilteredAnswerableList(PREDICATE_SHOW_ALL_ANSWERABLE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 23,
      "khiangleon": 2,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/AnswerableTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_QUESTION_BETA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.A_ANSWERABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.BETA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerable \u003d new AnswerableBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e answerable.getCategories().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(A_ANSWERABLE.isSameAnswerable(A_ANSWERABLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(A_ANSWERABLE.isSameAnswerable(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withQuestion(VALID_QUESTION_BETA).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(A_ANSWERABLE.isSameAnswerable(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // same question, same difficulty, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(A_ANSWERABLE.isSameAnswerable(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // same question, same difficulty, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(A_ANSWERABLE.isSameAnswerable(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable aliceCopy \u003d new AnswerableBuilder(A_ANSWERABLE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(A_ANSWERABLE.equals(aliceCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(A_ANSWERABLE.equals(A_ANSWERABLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(A_ANSWERABLE.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(A_ANSWERABLE.equals(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(A_ANSWERABLE.equals(BETA));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withQuestion(VALID_QUESTION_BETA).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(A_ANSWERABLE.equals(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different difficulty -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(A_ANSWERABLE.equals(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(A_ANSWERABLE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 37,
      "khiangleon": 4,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/DifficultyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DifficultyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Difficulty(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_invalidDifficulty_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String invalidDifficulty \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Difficulty(invalidDifficulty));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void isValidDifficulty() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // null difficulty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Difficulty.isValidDifficulty(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"difficulty\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //TODO: Implement valid difficulty. These are not valid for test bank"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(\"1\")); // exactly 1 number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(\"2\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 39
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/QuestionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class QuestionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new QuestionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(predicate.test(new AnswerableBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(predicate.test(new AnswerableBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(predicate.test(new AnswerableBuilder().withQuestion(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(predicate.test(new AnswerableBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void test_questionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(predicate.test(new AnswerableBuilder().withQuestion(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(predicate.test(new AnswerableBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Keywords match difficulty, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(predicate.test(new AnswerableBuilder().withQuestion(\"Alice\").withDifficulty(\"1\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 71,
      "khiangleon": 8
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/QuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // valid question"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"With a question mark?\")); // with question mark"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 38
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/UniqueAnswerableListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.A_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.BETA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.exceptions.AnswerableNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.answerable.exceptions.DuplicateAnswerableException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class UniqueAnswerableListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final UniqueAnswerableList uniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void contains_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(uniqueAnswerableList.contains(A_ANSWERABLE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(uniqueAnswerableList.contains(A_ANSWERABLE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withCategories(VALID_CATEGORY_GREENFIELD)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(uniqueAnswerableList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add_duplicateAnswerable_throwsDuplicateAnswerableException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(DuplicateAnswerableException.class, () -\u003e uniqueAnswerableList.add(A_ANSWERABLE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_nullTargetAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.setAnswerable(null, A_ANSWERABLE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_nullEditedAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.setAnswerable(A_ANSWERABLE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_targetAnswerableNotInList_throwsAnswerableNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(AnswerableNotFoundException.class, () -\u003e uniqueAnswerableList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .setAnswerable(A_ANSWERABLE, A_ANSWERABLE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_editedAnswerableIsSameAnswerable_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.setAnswerable(A_ANSWERABLE, A_ANSWERABLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedUniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_editedAnswerableHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAlice \u003d new AnswerableBuilder(A_ANSWERABLE).withCategories(VALID_CATEGORY_GREENFIELD)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.setAnswerable(A_ANSWERABLE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedUniqueAnswerableList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_editedAnswerableHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.setAnswerable(A_ANSWERABLE, BETA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedUniqueAnswerableList.add(BETA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_editedAnswerableHasNonUniqueIdentity_throwsDuplicateAnswerableException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(BETA);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(DuplicateAnswerableException.class, () -\u003e uniqueAnswerableList.setAnswerable(A_ANSWERABLE, BETA));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void remove_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void remove_personDoesNotExist_throwsAnswerableNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(AnswerableNotFoundException.class, () -\u003e uniqueAnswerableList.remove(A_ANSWERABLE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void remove_existingAnswerable_removesAnswerable() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.remove(A_ANSWERABLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_nullUniqueAnswerableList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .setAnswerables((UniqueAnswerableList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_uniqueAnswerableList_replacesOwnListWithProvidedUniqueAnswerableList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedUniqueAnswerableList.add(BETA);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.setAnswerables(expectedUniqueAnswerableList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.setAnswerables((List\u003cAnswerable\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(A_ANSWERABLE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e answerableList \u003d Collections.singletonList(BETA);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.setAnswerables(answerableList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedUniqueAnswerableList.add(BETA);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_listWithDuplicateAnswerables_throwsDuplicateAnswerableException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e listWithDuplicateAnswerables \u003d Arrays.asList(A_ANSWERABLE, A_ANSWERABLE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(DuplicateAnswerableException.class, () -\u003e uniqueAnswerableList"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .setAnswerables(listWithDuplicateAnswerables));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            -\u003e uniqueAnswerableList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 165,
      "khiangleon": 7
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/category/CategoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void constructor_invalidCategoryName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String invalidCategoryName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategoryName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void isValidCategoryName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // null Category name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategoryName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "jxofficial": 24
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/JsonAdaptedAnswerableTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.storage.JsonAdaptedAnswerable.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.B_ANSWERABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class JsonAdaptedAnswerableTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_DIFFICULTY \u003d \"+651234\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String VALID_QUESTION_TYPE \u003d \"MCQ\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String VALID_QUESTION \u003d B_ANSWERABLE.getQuestion().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final List\u003cJsonAdaptedAnswer\u003e VALID_CORRECT_ANSWER \u003d B_ANSWERABLE.getCorrectAnswerList().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .map(JsonAdaptedAnswer::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final List\u003cJsonAdaptedAnswer\u003e VALID_WRONG_ANSWER \u003d B_ANSWERABLE.getWrongAnswerList().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .map(JsonAdaptedAnswer::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String VALID_DIFFICULTY \u003d B_ANSWERABLE.getDifficulty().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final List\u003cJsonAdaptedCategory\u003e VALID_CATEGORIES \u003d B_ANSWERABLE.getCategories().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonAdaptedAnswerable answerable \u003d new JsonAdaptedAnswerable(B_ANSWERABLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(B_ANSWERABLE, answerable.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonAdaptedAnswerable person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, INVALID_QUESTION, VALID_CORRECT_ANSWER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                        VALID_WRONG_ANSWER, VALID_DIFFICULTY, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonAdaptedAnswerable person \u003d new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, null, VALID_CORRECT_ANSWER,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                VALID_WRONG_ANSWER, VALID_DIFFICULTY, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_invalidDifficulty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonAdaptedAnswerable person \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, VALID_QUESTION, VALID_CORRECT_ANSWER, VALID_WRONG_ANSWER,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                        INVALID_DIFFICULTY, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        String expectedMessage \u003d Difficulty.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_nullDifficulty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        JsonAdaptedAnswerable person \u003d new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, VALID_QUESTION,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                VALID_CORRECT_ANSWER, VALID_WRONG_ANSWER, null, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Difficulty.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cJsonAdaptedCategory\u003e invalidCategories \u003d new ArrayList\u003c\u003e(VALID_CATEGORIES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        invalidCategories.add(new JsonAdaptedCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonAdaptedAnswerable person \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, VALID_QUESTION, VALID_CORRECT_ANSWER, VALID_WRONG_ANSWER,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                VALID_DIFFICULTY, invalidCategories);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 38,
      "jxofficial": 1,
      "khiangleon": 6,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.A_ANSWERABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.H_ANSWERABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.I_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatTestBank.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void readAddressBook_invalidAnswerableAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAnswerableTestBank.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void readAddressBook_invalidAndValidAnswerableAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidAnswerableTestBank.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        original.addAnswerable(H_ANSWERABLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        original.removeAnswerable(A_ANSWERABLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        original.addAnswerable(I_ANSWERABLE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 17,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.TypicalAnswerables;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Path TYPICAL_ANSWERABLES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAnswerableTestBank.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Path INVALID_ANSWERABLE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAnswerableTestBank.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Path DUPLICATE_ANSWERABLE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateAnswerableTestBank.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_typicalAnswerablesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ANSWERABLES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AddressBook typicalAnswerablesAddressBook \u003d TypicalAnswerables.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(addressBookFromFile, typicalAnswerablesAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_invalidAnswerableFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ANSWERABLE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_duplicateAnswerables_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ANSWERABLE_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_ANSWERABLE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 18,
      "khiangleon": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalAnswerables.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withAnswerable(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a new {@code Answerable} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AddressBookBuilder withAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        addressBook.addAnswerable(answerable);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/AnswerableBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A utility class to help with building Answerable objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"Greenfield projects are easier than brownfield projects\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String DEFAULT_DIFFICULTY \u003d \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"CATEGORY\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer defaultCorrectAnswerSet \u003d new Answer(\"CORRECT\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer defaultWrongAnswerSet \u003d new Answer(\"WRONG\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private ArrayList\u003cAnswer\u003e correctAnswerList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private ArrayList\u003cAnswer\u003e wrongAnswerList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //TODO: Implement Answerable"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        difficulty \u003d new Difficulty(DEFAULT_DIFFICULTY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        correctAnswerList \u003d new ArrayList\u003c\u003e(Arrays.asList(defaultCorrectAnswerSet));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        wrongAnswerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        wrongAnswerList.add(new Answer(\"Wrong answer A\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        wrongAnswerList.add(new Answer(\"Wrong answer B\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        wrongAnswerList.add(new Answer(\"Wrong answer C\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        categories.add(new Category(DEFAULT_CATEGORY));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initializes the AnswerableBuilder with the data of {@code answerableToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder(Answerable answerableToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        question \u003d answerableToCopy.getQuestion();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //TODO: Implement Answerable"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        correctAnswerList \u003d new ArrayList\u003c\u003e(answerableToCopy.getCorrectAnswerList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        wrongAnswerList \u003d new ArrayList\u003c\u003e(answerableToCopy.getWrongAnswerList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        difficulty \u003d answerableToCopy.getDifficulty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(answerableToCopy.getCategories());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the {@code Question} of the {@code Answerable} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder withQuestion(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.question \u003d new Question(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Correct Answer Set of the {@code Answerable} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //TODO: Implement Answerable"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public AnswerableBuilder withCorrectAnswerList(ArrayList\u003cAnswer\u003e correctAnswerList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.correctAnswerList \u003d correctAnswerList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Wrong Answer Set of the {@code Answerable} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //TODO: Implement Answerable"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public AnswerableBuilder withWrongAnswerList(ArrayList\u003cAnswer\u003e wrongAnswerList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.wrongAnswerList \u003d wrongAnswerList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code Answerable}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder withCategories(String ... categories) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategorySet(categories);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code Answerable} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns an answerable."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return the answerable."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Answerable build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //TODO: Implement Answerable"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return new Mcq(question, correctAnswerList, wrongAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 88,
      "jxofficial": 3,
      "khiangleon": 19
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/AnswerableUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A utility class for Answerable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an add command string for adding the {@code answerable}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String getAddCommand(Answerable answerable) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getAnswerableDetails(answerable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the part of command string for the given {@code answerable}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String getAnswerableDetails(Answerable answerable) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerable instanceof Mcq) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sb.append(PREFIX_QUESTION_TYPE + \"mcq\" + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answerable.getWrongAnswerList().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                s -\u003e sb.append(PREFIX_WRONG + s.toString() + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sb.append(PREFIX_QUESTION_TYPE + \"saq\" + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        sb.append(PREFIX_QUESTION + answerable.getQuestion().fullQuestion + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        sb.append(PREFIX_DIFFICULTY + answerable.getDifficulty().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerable.getCorrectAnswerList().stream().forEach("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            s -\u003e sb.append(PREFIX_CORRECT + s.toString() + \" \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerable.getCategories().stream().forEach("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            s -\u003e sb.append(PREFIX_CATEGORY + s.categoryName + \" \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the part of command string for the given {@code EditAnswerableDescriptor}\u0027s details."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String getEditAnswerableDescriptorDetails(EditCommand.EditAnswerableDescriptor descriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        descriptor.getQuestion().ifPresent(question -\u003e sb.append(PREFIX_QUESTION)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .append(question.fullQuestion).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        descriptor.getDifficulty().ifPresent(difficulty -\u003e sb.append(PREFIX_DIFFICULTY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .append(difficulty.value).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (descriptor.getCategories().isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Set\u003cCategory\u003e tags \u003d descriptor.getCategories().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                sb.append(PREFIX_CATEGORY + \" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_CATEGORY).append(s.categoryName).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (descriptor.getCorrectAnswerList().isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            ArrayList\u003cAnswer\u003e correctAnswerList \u003d descriptor.getCorrectAnswerList().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (correctAnswerList.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                sb.append(PREFIX_CORRECT + \" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                correctAnswerList.forEach(s -\u003e sb.append(PREFIX_CORRECT + s.toString() + \" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (descriptor.getWrongAnswerList().isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            ArrayList\u003cAnswer\u003e wrongAnswerList \u003d descriptor.getWrongAnswerList().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (wrongAnswerList.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                sb.append(PREFIX_WRONG + \" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                wrongAnswerList.forEach(s -\u003e sb.append(PREFIX_WRONG + s.toString() + \" \"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 45,
      "jxofficial": 3,
      "khiangleon": 14,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/EditAnswerableDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand.EditAnswerableDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A utility class to help with building EditAnswerableDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class EditAnswerableDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private EditAnswerableDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditCommand.EditAnswerableDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder(EditCommand.EditAnswerableDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.descriptor \u003d new EditAnswerableDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an {@code EditAnswerableDescriptor} with fields containing {@code answerable}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder(Answerable answerable) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditCommand.EditAnswerableDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setQuestion(answerable.getQuestion());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setCorrectAnswerList(answerable.getCorrectAnswerList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setWrongAnswerList(answerable.getWrongAnswerList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setDifficulty(answerable.getDifficulty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setCategories(answerable.getCategories());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the {@code Question} of the {@code EditAnswerableDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setQuestion(new Question(question));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Correct Answer Set of the {@code EditAnswerableDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public EditAnswerableDescriptorBuilder withCorrectAnswerList(ArrayList\u003cAnswer\u003e correctAnswerList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        descriptor.setCorrectAnswerList(correctAnswerList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Wrong Answer Set of the {@code EditAnswerableDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public EditAnswerableDescriptorBuilder withWrongAnswerList(ArrayList\u003cAnswer\u003e wrongAnswerList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        descriptor.setWrongAnswerList(wrongAnswerList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code EditAnswerableDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setDifficulty(new Difficulty(difficulty));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cCategory\u003e} and set it to the {@code EditAnswerableDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder withCategories(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Set\u003cCategory\u003e tagSet \u003d Stream.of(tags).map(Category::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setCategories(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditCommand.EditAnswerableDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 77,
      "jxofficial": 3,
      "khiangleon": 7
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the middle index of the answerable in the {@code model}\u0027s answerable list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAnswerableList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the last index of the answerable in the {@code model}\u0027s answerable list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAnswerableList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the answerable in the {@code model}\u0027s answerable list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Answerable getAnswerable(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return model.getFilteredAnswerableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/TypicalAnswerables.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_UML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_ALPHA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_QUESTION_ALPHA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_QUESTION_BETA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.answer.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A utility class containing a list of {@code Answerable} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class TypicalAnswerables {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer correctAnswer \u003d new Answer(\"Brownfield\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final ArrayList\u003cAnswer\u003e defaultCorrectAnswerList \u003d new ArrayList\u003c\u003e(Arrays.asList(correctAnswer));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer wrongAnswerA \u003d new Answer(\"Greenfield\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer wrongAnswerB \u003d new Answer(\"Blackfield\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer wrongAnswerC \u003d new Answer(\"Whitefield\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final ArrayList\u003cAnswer\u003e defaultWrongAnswerList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Arrays.asList(wrongAnswerA, wrongAnswerB, wrongAnswerC));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answerable A_ANSWERABLE \u003d new AnswerableBuilder().withQuestion(\"If a subclass imposes more \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"restrictive conditions than its parent class, it violates Liskov Substitution Principle.\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withCorrectAnswerList(defaultCorrectAnswerList).withWrongAnswerList(defaultWrongAnswerList)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withDifficulty(\"1\").withCategories(\"LSP\", \"SOLID\", \"Week 9\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answerable B_ANSWERABLE \u003d new AnswerableBuilder().withQuestion(\"Brownfield or Greenfield?\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withCorrectAnswerList(defaultCorrectAnswerList).withWrongAnswerList(defaultWrongAnswerList)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withDifficulty(\"1\").withCategories(\"field\", \"introduction\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answerable C_ANSWERABLE \u003d new AnswerableBuilder().withQuestion(\"Carl Kurz\").withDifficulty(\"1\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withCorrectAnswerList(defaultCorrectAnswerList).withWrongAnswerList(defaultWrongAnswerList).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answerable E_ANSWERABLE \u003d new AnswerableBuilder().withQuestion(\"Elle Meyer\").withDifficulty(\"1\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withCorrectAnswerList(defaultCorrectAnswerList).withWrongAnswerList(defaultWrongAnswerList).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answerable F_ANSWERABLE \u003d new AnswerableBuilder().withQuestion(\"Fiona Kunz\").withDifficulty(\"1\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withCorrectAnswerList(defaultCorrectAnswerList).withWrongAnswerList(defaultWrongAnswerList).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final Answerable H_ANSWERABLE \u003d new AnswerableBuilder().withQuestion(\"Hoon Meier\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withDifficulty(\"1\").withCorrectAnswerList(defaultCorrectAnswerList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withWrongAnswerList(defaultWrongAnswerList).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final Answerable I_ANSWERABLE \u003d new AnswerableBuilder().withQuestion(\"Ida Mueller\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withDifficulty(\"1\").withCorrectAnswerList(defaultCorrectAnswerList)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withWrongAnswerList(defaultWrongAnswerList).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    // Manually added - Answerable\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answerable ALPHA \u003d new AnswerableBuilder().withQuestion(VALID_QUESTION_ALPHA)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_ALPHA).withCorrectAnswerList(defaultCorrectAnswerList)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withWrongAnswerList(defaultWrongAnswerList).withCategories(VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answerable BETA \u003d new AnswerableBuilder().withQuestion(VALID_QUESTION_BETA)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_BETA).withCorrectAnswerList(defaultCorrectAnswerList)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            .withWrongAnswerList(defaultWrongAnswerList)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withCategories(VALID_CATEGORY_GREENFIELD, VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private TypicalAnswerables() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical answerables."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Answerable answerable : getTypicalAnswerables()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            ab.addAnswerable(answerable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static List\u003cAnswerable\u003e getTypicalAnswerables() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(A_ANSWERABLE, B_ANSWERABLE, C_ANSWERABLE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                E_ANSWERABLE, F_ANSWERABLE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 31,
      "jxofficial": 1,
      "khiangleon": 21,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Index INDEX_FIRST_ANSWERABLE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Index INDEX_SECOND_ANSWERABLE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Index INDEX_THIRD_ANSWERABLE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import seedu.revision.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cfx:root type\u003d\"seedu.revision.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 5
    }
  }
]
